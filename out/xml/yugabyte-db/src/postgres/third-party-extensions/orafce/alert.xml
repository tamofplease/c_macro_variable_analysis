<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/third-party-extensions/orafce/alert.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pipe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shmmc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_register</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_remove</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_removeall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_set_defaults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_waitany</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_waitone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>dbms_alert_defered_signal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>int</name></type> <name>sid</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>float8</name></type> <name>sensitivity</name> <init>= <expr><literal type="number">250.0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>extern</specifier> <name>LWLockId</name></type> <name>shmem_lockid</name></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_GetCurrentTimestamp</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GetCurrentTimestamp</name><parameter_list>()</parameter_list></cpp:macro>		<cpp:value>GetCurrentTimestamp()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>GetNowFloat</name></cpp:ifndef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_INT64_TIMESTAMP</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetNowFloat</name><parameter_list>()</parameter_list></cpp:macro>   <cpp:value>((float8) _GetCurrentTimestamp() / 1000000.0)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GetNowFloat</name><parameter_list>()</parameter_list></cpp:macro>   <cpp:value>_GetCurrentTimestamp()</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TDAYS</name></cpp:macro> <cpp:value>(1000*24*3600)</cpp:value></cpp:define>


<comment type="block">/*
 * There are maximum 30 events and 255 collaborating sessions
 *
 */</comment>

<decl_stmt><decl><type><name>alert_event</name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>alert_lock</name>  <modifier>*</modifier></type><name>locks</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>alert_lock</name> <modifier>*</modifier></type><name>session_lock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_FOUND</name></cpp:macro>  <cpp:value>-1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NOT_USED</name></cpp:macro> <cpp:value>-1</cpp:value></cpp:define>

<comment type="block">/*
 * Compare text and cstr
 */</comment>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>textcmpm</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>txt</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>retval</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>VARHDRSZ</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>VARDATA</name><argument_list>(<argument><expr><name>txt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><name>len</name><operator>--</operator> <operator>&amp;&amp;</operator> <operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>

		<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <operator>(</operator><name>retval</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator> <operator>-</operator> <operator>*</operator><name>str</name><operator>++</operator><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><name>retval</name></expr>;</return></block_content></block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>str</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * find or create event rec
 *
 */</comment>

<function><type><specifier>static</specifier> <name>alert_lock</name><modifier>*</modifier></type>
<name>find_lock</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>first_free</name> <init>= <expr><name>NOT_FOUND</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>session_lock</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<return>return <expr><name>session_lock</name></expr>;</return></block_content></block></if></if_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_LOCKS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sid</name> <operator>==</operator> <name>sid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return <expr><operator>&amp;</operator><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if>
		<if type="elseif">else if <condition>(<expr><name><name>locks</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sid</name> <operator>==</operator> <name>NOT_USED</name> <operator>&amp;&amp;</operator> <name>first_free</name> <operator>==</operator> <name>NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>first_free</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>first_free</name> <operator>!=</operator> <name>NOT_FOUND</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>locks</name><index>[<expr><name>first_free</name></expr>]</index></name><operator>.</operator><name>sid</name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>locks</name><index>[<expr><name>first_free</name></expr>]</index></name><operator>.</operator><name>echo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>session_lock</name> <operator>=</operator> <operator>&amp;</operator><name><name>locks</name><index>[<expr><name>first_free</name></expr>]</index></name></expr>;</expr_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>locks</name><index>[<expr><name>first_free</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ORA_PACKAGES_LOCK_REQUEST_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lock request error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed to create session lock."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"There are too many collaborating sessions. Increase MAX_LOCKS in 'pipe.h'."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>alert_event</name><modifier>*</modifier></type>
<name>find_event</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>event_name</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>create</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>event_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EVENTS</name></expr>;</condition><incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_name</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>textcmpm</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>,<argument><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>event_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><operator>*</operator><name>event_id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
			<return>return <expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>create</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name><operator>=</operator><literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EVENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_name</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_name</name> <operator>=</operator> <call><name>ora_scstring</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>max_receivers</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>receivers</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>messages</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>receivers_number</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

				<if_stmt><if>if <condition>(<expr><name>event_id</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>event_id</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<return>return <expr><operator>&amp;</operator><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_PROGRAM_LIMIT_EXCEEDED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"event registeration error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Too many registered events."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"There are too many collaborating sessions. Increase MAX_EVENTS in 'pipe.h'."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>register_event</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>event_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>alert_event</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>new_receivers</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>first_free</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>find_lock</name><argument_list>(<argument><expr><name>sid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>find_event</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>first_free</name> <operator>=</operator> <name>NOT_FOUND</name></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>sid</name></expr>)</condition><block type="pseudo"><block_content>
			<return>return;</return></block_content></block></if></if_stmt>   <comment type="block">/* event is registered */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NOT_USED</name> <operator>&amp;&amp;</operator> <name>first_free</name> <operator>==</operator> <name>NOT_FOUND</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name>first_free</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * I can have a maximum of MAX_LOCKS receivers for one event.
	 * Array receivers is increased for 16 fields
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>first_free</name> <operator>==</operator> <name>NOT_FOUND</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name> <operator>+</operator> <literal type="number">16</literal> <operator>&gt;</operator> <name>MAX_LOCKS</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ORA_PACKAGES_LOCK_REQUEST_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"lock request error"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Failed to create session lock."</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"There are too many collaborating sessions. Increase MAX_LOCKS in 'pipe.h'."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<comment type="block">/* increase receiver's array */</comment>

		<expr_stmt><expr><name>new_receivers</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><call><name>salloc</name><argument_list>(<argument><expr><operator>(</operator><name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name> <operator>+</operator> <literal type="number">16</literal><operator>)</operator><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name> <operator>+</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>new_receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>new_receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NOT_USED</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
		</block_content>}</block></for>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name> <operator>+=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name></name> <operator>=</operator> <name>new_receivers</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>first_free</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name> <operator>-</operator> <literal type="number">16</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>first_free</name></expr>]</index></name> <operator>=</operator> <name>sid</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
 * Remove receiver from default receivers of message,
 * I expect clean all message_items
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>unregister_event</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>event_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>alert_event</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>ev</name> <operator>=</operator> <operator>&amp;</operator><name><name>events</name><index>[<expr><name>event_id</name></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>sid</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NOT_USED</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>event_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>event_name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * remove receiver from list of receivers.
 * Message has always minimal one receiver
 * Return true, if exist other receiver
 */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>remove_receiver</name><parameter_list>(<parameter><decl><type><name>message_item</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>find_other</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>msg</name><operator>-&gt;</operator><name>receivers_number</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>sid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>msg</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NOT_USED</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>msg</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NOT_USED</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>find_other</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>found</name> <operator>&amp;&amp;</operator> <name>find_other</name></expr>)</condition><block type="pseudo"><block_content>
			<break>break;</break></block_content></block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>find_other</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 *
 * Reads message message_id for user sid. If arg:all is true,
 * then get any message. If arg:remove_all then remove all
 * signaled messages for sid. If arg:filter_message then
 * skip other messages than message_id, else read and remove
 * all others messages than message_id.
 *
 */</comment>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type>
<name>find_and_remove_message_item</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>message_id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sid</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>all</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>remove_all</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>filter_message</name></decl></parameter>,
							 <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>sleep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>event_name</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>alert_lock</name> <modifier>*</modifier></type><name>alck</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>_message_id</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>sleep</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>sleep</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>alck</name> <operator>=</operator> <call><name>find_lock</name><argument_list>(<argument><expr><name>sid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>event_name</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><operator>*</operator><name>event_name</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>alck</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>alck</name><operator>-&gt;</operator><name>echo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* if I have registered and created item */</comment>
		<decl_stmt><decl><type><name><name>struct</name> <name>_message_echo</name></name> <modifier>*</modifier></type><name>echo</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>last_echo</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>echo</name> <operator>=</operator> <name><name>alck</name><operator>-&gt;</operator><name>echo</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>last_echo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

		<while>while <condition>(<expr><name>echo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message_text</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>destroy_msg_item</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>filter_message</name> <operator>&amp;&amp;</operator> <name><name>echo</name><operator>-&gt;</operator><name>message_id</name></name> <operator>!=</operator> <name>message_id</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>last_echo</name> <operator>=</operator> <name>echo</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>echo</name> <operator>=</operator> <name><name>echo</name><operator>-&gt;</operator><name>next_echo</name></name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>message_text</name> <operator>=</operator> <name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>message</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name>_message_id</name> <operator>=</operator> <name><name>echo</name><operator>-&gt;</operator><name>message_id</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>remove_receiver</name><argument_list>(<argument><expr><name><name>echo</name><operator>-&gt;</operator><name>message</name></name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>destroy_msg_item</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>prev_message</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>prev_message</name><operator>-&gt;</operator><name>next_message</name></name> <operator>=</operator>
						<name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>next_message</name></name></expr>;</expr_stmt></block_content></block></if>
				<else>else<block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>events</name><index>[<expr><name><name>echo</name><operator>-&gt;</operator><name>message_id</name></name></expr>]</index></name><operator>.</operator><name>messages</name> <operator>=</operator>
						<name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>next_message</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>next_message</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>next_message</name><operator>-&gt;</operator><name>prev_message</name></name> <operator>=</operator>
						<name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>prev_message</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>echo</name><operator>-&gt;</operator><name>message</name><operator>-&gt;</operator><name>receivers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name><name>echo</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>last_echo</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>alck</name><operator>-&gt;</operator><name>echo</name></name> <operator>=</operator> <name><name>echo</name><operator>-&gt;</operator><name>next_echo</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>echo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>echo</name> <operator>=</operator> <name><name>alck</name><operator>-&gt;</operator><name>echo</name></name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name><name>last_echo</name><operator>-&gt;</operator><name>next_echo</name></name> <operator>=</operator> <name><name>echo</name><operator>-&gt;</operator><name>next_echo</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>echo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>echo</name> <operator>=</operator> <name>last_echo</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<if_stmt><if>if <condition>(<expr><name>remove_all</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>message_text</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>destroy_msg_item</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>message_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<continue>continue;</continue>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>_message_id</name> <operator>==</operator> <name>message_id</name> <operator>||</operator> <name>all</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* I have to do local copy */</comment>
				<if_stmt><if>if <condition>(<expr><name>message_text</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>message_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name>destroy_msg_item</name></expr>)</condition><block type="pseudo"><block_content>
						<expr_stmt><expr><call><name>ora_sfree</name><argument_list>(<argument><expr><name>message_text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				</block_content>}</block></if></if_stmt>

				<if_stmt><if>if <condition>(<expr><name>event_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><operator>*</operator><name>event_name</name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>events</name><index>[<expr><name>_message_id</name></expr>]</index></name><operator>.</operator><name>event_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
 * Queue mustn't to contain duplicate messages
 */</comment>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>create_message</name><parameter_list>(<parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>event_name</name></decl></parameter>, <parameter><decl><type><name>text</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>event_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>alert_event</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>message_item</name> <modifier>*</modifier></type><name>msg_item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>,<decl><type ref="prev"/><name>j</name></decl>,<decl><type ref="prev"/><name>k</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>find_event</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* process event only when any recipient exitsts */</comment>
	<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <operator>(</operator><name>ev</name> <operator>=</operator> <call><name>find_event</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>msg_item</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>messages</name></name></expr>;</expr_stmt>
			<while>while <condition>(<expr><name>msg_item</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>msg_item</name><operator>-&gt;</operator><name>message</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>message</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				    <return>return;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>msg_item</name><operator>-&gt;</operator><name>message</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>message</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>textcmpm</name><argument_list>(<argument><expr><name>message</name></expr></argument>,<argument><expr><name><name>msg_item</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
						<return>return;</return></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

				<expr_stmt><expr><name>msg_item</name> <operator>=</operator> <name><name>msg_item</name><operator>-&gt;</operator><name>next_message</name></name></expr>;</expr_stmt>
			</block_content>}</block></while>

			<expr_stmt><expr><name>msg_item</name> <operator>=</operator> <call><name>salloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>receivers</name></name> <operator>=</operator> <call><name>salloc</name><argument_list>( <argument><expr><name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>receivers_number</name></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>receivers_number</name></name></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name>message</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>ora_scstring</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
			<else>else<block type="pseudo"><block_content>
				<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

			<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>message_id</name></name> <operator>=</operator> <name>event_id</name></expr>;</expr_stmt>
			<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>max_receivers</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>NOT_USED</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
					<for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>MAX_LOCKS</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
						<if_stmt><if>if <condition>(<expr><name><name>locks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>sid</name> <operator>==</operator> <name><name>ev</name><operator>-&gt;</operator><name>receivers</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition>
						<block>{<block_content>
							<comment type="block">/* create echo */</comment>

							<decl_stmt><decl><type><name>message_echo</name> <modifier>*</modifier></type><name>echo</name> <init>= <expr><call><name>salloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>message_echo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
							<expr_stmt><expr><name><name>echo</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <name>msg_item</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>echo</name><operator>-&gt;</operator><name>message_id</name></name> <operator>=</operator> <name>event_id</name></expr>;</expr_stmt>
							<expr_stmt><expr><name><name>echo</name><operator>-&gt;</operator><name>next_echo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

							<if_stmt><if>if <condition>(<expr><name><name>locks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>echo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
								<expr_stmt><expr><name><name>locks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>echo</name> <operator>=</operator> <name>echo</name></expr>;</expr_stmt></block_content></block></if>
							<else>else
							<block>{<block_content>
								<decl_stmt><decl><type><name>message_echo</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
								<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>locks</name><index>[<expr><name>k</name></expr>]</index></name><operator>.</operator><name>echo</name></expr>;</expr_stmt>

								<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next_echo</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
									<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_echo</name></name></expr>;</expr_stmt></block_content></block></while>

								<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_echo</name></name> <operator>=</operator> <name>echo</name></expr>;</expr_stmt>
							</block_content>}</block></else></if_stmt>
						</block_content>}</block></if></if_stmt></block_content></block></for>

				</block_content>}</block></if></if_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>next_message</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>messages</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>prev_message</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>ev</name><operator>-&gt;</operator><name>messages</name></name> <operator>=</operator> <name>msg_item</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<decl_stmt><decl><type><name>message_item</name> <modifier>*</modifier></type><name>p</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>messages</name></name></expr>;</expr_stmt>
				<while>while <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>next_message</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>next_message</name></name></expr>;</expr_stmt></block_content></block></while>

				<expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next_message</name></name> <operator>=</operator> <name>msg_item</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>msg_item</name><operator>-&gt;</operator><name>prev_message</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WATCH_PRE</name><parameter_list>(<parameter><type><name>t</name></type></parameter>, <parameter><type><name>et</name></type></parameter>, <parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>et = GetNowFloat() + (float8)t; c = 0; \
do \
{ \

#define WATCH_POST(t,et,c) \
if (GetNowFloat() &gt;= et) \
break; \
if (cycle++ % 100 == 0) \
CHECK_FOR_INTERRUPTS(); \
pg_usleep(10000L); \
} while(t != 0);</cpp:value></cpp:define>


<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.REGISTER (name IN VARCHAR2);
 *
 *  Registers the calling session to receive notification of alert name.
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_alert_register</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>timeout</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>register_event</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.REMOVE(name IN VARCHAR2);
 *
 *  Unregisters the calling session from receiving notification of alert name.
 *  Don't raise any exceptions.
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_alert_remove</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>alert_event</name> <modifier>*</modifier></type><name>ev</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ev_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>timeout</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>,<argument><expr><name>MAX_EVENTS</name></expr></argument>,<argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ev</name> <operator>=</operator> <call><name>find_event</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>ev</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>find_and_remove_message_item</name><argument_list>(<argument><expr><name>ev_id</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>,
							 <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>unregister_event</name><argument_list>(<argument><expr><name>ev_id</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.REMOVEALL;
 *
 *  Unregisters the calling session from notification of all alerts.
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_alert_removeall</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>timeout</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>,<argument><expr><name>MAX_EVENTS</name></expr></argument>,<argument><expr><name>MAX_LOCKS</name></expr></argument>,<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_EVENTS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
			<if_stmt><if>if <condition>(<expr><name><name>events</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>event_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>find_and_remove_message_item</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>,
								 <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>unregister_event</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			</block_content>}</block></if></if_stmt></block_content></block></for>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.WAITANY(name OUT VARCHAR2 ,message OUT VARCHAR2
 *                              ,status OUT INTEGER
 *                              ,timeout IN NUMBER DEFAULT MAXWAIT);
 *
 *  Waits for up to timeout seconds to be notified of any alerts for which
 *  the session is registered. If status = 0 then name and message contain
 *  alert information. If status = 1 then timeout seconds elapsed without
 *  notification of any alert.
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_alert_waitany</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>float8</name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>   <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttInMetadata</name>       <modifier>*</modifier></type><name>attinmeta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>   <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>       <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>str</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="string">"1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>btupdesc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>TDAYS</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name>  <operator>=</operator> <call><name>find_and_remove_message_item</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>sid</name></expr></argument>,
							   <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>btupdesc</name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>attinmeta</name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name><argument_list>(<argument><expr><name>btupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name>attinmeta</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.WAITONE(name IN VARCHAR2, message OUT VARCHAR2
 *                              ,status OUT INTEGER
 *                              ,timeout IN NUMBER DEFAULT MAXWAIT);
 *
 *  Waits for up to timeout seconds for notification of alert name. If status = 0
 *  then message contains alert information. If status = 1 then timeout
 *  seconds elapsed without notification.
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_alert_waitone</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>timeout</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>   <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttInMetadata</name>       <modifier>*</modifier></type><name>attinmeta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type>   <name>tuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type>       <name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>message_id</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>str</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>NULL</name></expr>,<expr><literal type="string">"1"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>event_name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>	<name>btupdesc</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"event name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Eventname may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <name>TDAYS</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>timeout</name> <operator>=</operator> <call><name>PG_GETARG_FLOAT8</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <call><name>find_event</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>message_id</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>find_and_remove_message_item</name><argument_list>(<argument><expr><name>message_id</name></expr></argument>, <argument><expr><name>sid</name></expr></argument>,
								  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>event_name</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>str</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"0"</literal></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>event_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>get_call_result_type</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>btupdesc</name> <operator>=</operator> <call><name>BlessTupleDesc</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>attinmeta</name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name><argument_list>(<argument><expr><name>btupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name>attinmeta</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.SET_DEFAULTS(sensitivity IN NUMBER);
 *
 *  The SET_DEFAULTS procedure is used to set session configurable settings
 *  used by the DBMS_ALERT package. Currently, the polling loop interval sleep time
 *  is the only session setting that can be modified using this procedure. The
 *  header for this procedure is,
 *
 */</comment>

<function><type><name>Datum</name></type>
<name>dbms_alert_set_defaults</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
		<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"feature not supported"</literal></expr></argument>)</argument_list></call><operator>,</operator>
		 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Sensitivity isn't supported."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="block">/*
 * This code was originally in plpgsql
 *
 */</comment>

<comment type="block">/*
CREATE OR REPLACE FUNCTION dbms_alert._defered_signal() RETURNS trigger AS $$
BEGIN
  PERFORM dbms_alert._signal(NEW.event, NEW.message);
  DELETE FROM ora_alerts WHERE oid=NEW.oid;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER VOLATILE;
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DatumGetItemPointer</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((ItemPointer) DatumGetPointer(X))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ItemPointerGetDatum</name><parameter_list>(<parameter><type><name>X</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>PointerGetDatum(X)</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>dbms_alert_defered_signal</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TriggerData</name> <modifier>*</modifier></type><name>trigdata</name> <init>= <expr><operator>(</operator><name>TriggerData</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>context</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>rettuple</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>relname</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>message</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>event_col</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>message_col</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>datum</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cycle</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>endtime</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float8</name></type> <name>timeout</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CALLED_AS_TRIGGER</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"not called by trigger manager"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TRIGGER_FIRED_BY_INSERT</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_event</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"not called on valid event"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><name>relname</name> <operator>=</operator> <call><name>SPI_getrelname</name><argument_list>(<argument><expr><name><name>trigdata</name><operator>-&gt;</operator><name>tg_relation</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">"ora_alerts"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"not called with valid relation"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>rettuple</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_trigtuple</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <name><name>trigdata</name><operator>-&gt;</operator><name>tg_relation</name><operator>-&gt;</operator><name>rd_att</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>SPI_ERROR_NOATTRIBUTE</name> <operator>==</operator> <operator>(</operator><name>event_col</name> <operator>=</operator> <call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"event"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"attribute event not found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>


	<if_stmt><if>if <condition>(<expr><name>SPI_ERROR_NOATTRIBUTE</name> <operator>==</operator> <operator>(</operator><name>message_col</name> <operator>=</operator> <call><name>SPI_fnumber</name><argument_list>(<argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><literal type="string">"message"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"attribute message not found"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>rettuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>event_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
    			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
        		 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"event name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Eventname may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>name</name> <operator>=</operator> <call><name>DatumGetTextP</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>datum</name> <operator>=</operator> <call><name>SPI_getbinval</name><argument_list>(<argument><expr><name>rettuple</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>message_col</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><name>message</name> <operator>=</operator> <call><name>DatumGetTextP</name><argument_list>(<argument><expr><name>datum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><call><name>WATCH_PRE</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ora_lock_shmem</name><argument_list>(<argument><expr><name>SHMEMMSGSZ</name></expr></argument>, <argument><expr><name>MAX_PIPES</name></expr></argument>, <argument><expr><name>MAX_EVENTS</name></expr></argument>, <argument><expr><name>MAX_LOCKS</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ItemPointer</name></type> <name>tid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name><name>argtypes</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>TIDOID</name></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">' '</literal></expr>}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>create_message</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>shmem_lockid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>tid</name> <operator>=</operator> <operator>&amp;</operator><name><name>rettuple</name><operator>-&gt;</operator><name>t_data</name><operator>-&gt;</operator><name>t_ctid</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>plan</name> <operator>=</operator> <call><name>SPI_prepare</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM ora_alerts WHERE ctid = $1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>argtypes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI_prepare failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>ItemPointerGetDatum</name><argument_list>(<argument><expr><name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>SPI_OK_DELETE</name> <operator>!=</operator> <call><name>SPI_execute_plan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TRIGGERED_ACTION_EXCEPTION</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can't execute sql"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>rettuple</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WATCH_POST</name><argument_list>(<argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>endtime</name></expr></argument>, <argument><expr><name>cycle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>LOCK_ERROR</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_NULL</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 *
 *  PROCEDURE DBMS_ALERT.SIGNAL(name IN VARCHAR2,message IN VARCHAR2);
 *
 *  Signals the occurrence of alert name and attaches message. (Sessions
 *  registered for alert name are notified only when the signaling transaction
 *  commits.)
 *
 */</comment>

<comment type="block">/*

CREATE OR REPLACE FUNCTION dbms_alert.signal(_event text, _message text) RETURNS void AS $$
BEGIN
  PERFORM 1 FROM pg_catalog.pg_class c
            WHERE pg_catalog.pg_table_is_visible(c.oid)
            AND c.relkind='r' AND c.relname = 'ora_alerts';
  IF NOT FOUND THEN
    CREATE TEMP TABLE ora_alerts(event text, message text) WITH OIDS;
    REVOKE ALL ON TABLE ora_alerts FROM PUBLIC;
    CREATE CONSTRAINT TRIGGER ora_alert_signal AFTER INSERT ON ora_alerts
      INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE dbms_alert._defered_signal();
  END IF;
  INSERT INTO ora_alerts(event, message) VALUES(_event, _message);
END;
$$ LANGUAGE plpgsql VOLATILE SECURITY DEFINER;
*/</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SPI_EXEC</name><parameter_list>(<parameter><type><name>cmd</name></type></parameter>,<parameter><type><name>_type_</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>if (SPI_OK_##_type_ != SPI_exec(cmd, 1)) \
		ereport(ERROR, \
    			(errcode(ERRCODE_INTERNAL_ERROR), \
        		 errmsg("SPI execute error"), \
			 errdetail("Can't execute %s.", cmd)));</cpp:value></cpp:define>

<function><type><name>Datum</name></type>
<name>dbms_alert_signal</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>plan</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name><name>argtypes</name><index>[]</index></name> <init>= <expr><block>{<expr><name>TEXTOID</name></expr>, <expr><name>TEXTOID</name></expr>}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name><name>nulls</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="char">' '</literal></expr>,<expr><literal type="char">' '</literal></expr>}</block></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"event name is NULL"</literal></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Eventname may not be NULL."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name><name>nulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'n'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>SPI_connect</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI_connect failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SPI_EXEC</name><argument_list>(<argument><expr><literal type="string">"SELECT 1 FROM pg_catalog.pg_class c "</literal>
                    <literal type="string">"WHERE pg_catalog.pg_table_is_visible(c.oid) "</literal>
                            <literal type="string">"AND c.relkind='r' AND c.relname = 'ora_alerts'"</literal></expr></argument>, <argument><expr><name>SELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>SPI_processed</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SPI_EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE TEMP TABLE ora_alerts(event text, message text)"</literal></expr></argument>, <argument><expr><name>UTILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SPI_EXEC</name><argument_list>(<argument><expr><literal type="string">"REVOKE ALL ON TABLE ora_alerts FROM PUBLIC"</literal></expr></argument>, <argument><expr><name>UTILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>SPI_EXEC</name><argument_list>(<argument><expr><literal type="string">"CREATE CONSTRAINT TRIGGER ora_alert_signal AFTER INSERT ON ora_alerts "</literal>
		<literal type="string">"INITIALLY DEFERRED FOR EACH ROW EXECUTE PROCEDURE dbms_alert.defered_signal()"</literal></expr></argument>, <argument><expr><name>UTILITY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>plan</name> <operator>=</operator> <call><name>SPI_prepare</name><argument_list>(
			<argument><expr><literal type="string">"INSERT INTO ora_alerts(event,message) VALUES($1, $2)"</literal></expr></argument>,
			<argument><expr><literal type="number">2</literal></expr></argument>,
			<argument><expr><name>argtypes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"SPI_prepare failed"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>SPI_OK_INSERT</name> <operator>!=</operator> <call><name>SPI_execute_plan</name><argument_list>(<argument><expr><name>plan</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
				<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"can't execute sql"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<expr_stmt><expr><call><name>SPI_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
