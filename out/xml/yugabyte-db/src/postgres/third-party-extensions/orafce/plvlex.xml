<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/yugabyte-db/src/postgres/third-party-extensions/orafce/plvlex.c"><comment type="block">/*
  This code implements one part of functonality of
  free available library PL/Vision. Please look www.quest.com

  Original author: Steven Feuerstein, 1996 - 2002
  PostgreSQL implementation author: Pavel Stehule, 2006-2018

  This module is under BSD Licence

  History:
    1.0. first public version 13. March 2006
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/date.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"plvlex.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlparse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"orafce.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"builtins.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <block>{
	<decl_stmt><decl><type><name>List</name>	<modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> 	<name>nnodes</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>	<name>cnode</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
}</block></struct></type> <name>tokensFctx</name>;</typedef>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>plvlex_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>extern</specifier> <name>int</name></type>      <name>orafce_sql_yyparse</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>orafce_sql_yyerror</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>orafce_sql_scanner_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>orafce_sql_scanner_finish</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>orafce_lexnode</name> <modifier>*</modifier></type><name>__node</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>__result</name></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>__len</name></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CSTRING</name><parameter_list>(<parameter><type><name>txt</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>( \
    __len = VARSIZE(txt) - VARHDRSZ, \
    __result = palloc(__len + 1), \
    memcpy(__result, VARDATA(txt), __len), \
    __result[__len] = '\0', \
    __result)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_TO_S</name><parameter_list>(<parameter><type><name>src</name></type></parameter>,<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(dest-&gt;col = (src-&gt;col ? pstrdup(src-&gt;col) : NULL))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_TO</name><parameter_list>(<parameter><type><name>src</name></type></parameter>,<parameter><type><name>dest</name></type></parameter>,<parameter><type><name>col</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(dest-&gt;col = src-&gt;col)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_FIELDS</name><parameter_list>(<parameter><type><name>src</name></type></parameter>,<parameter><type><name>dest</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>COPY_TO(src, dest, typenode), \
	COPY_TO_S(src,dest,str), \
	COPY_TO(src,dest,keycode), \
	COPY_TO(src,dest,lloc), \
	COPY_TO_S(src,dest,sep), \
	COPY_TO(src,dest,modificator), \
	COPY_TO(src,dest,classname)</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_NODE</name><parameter_list>(<parameter><type><name>src</name></type></parameter>)</parameter_list></cpp:macro>   \
  <cpp:value>( \
    __node = (orafce_lexnode*) palloc(sizeof(orafce_lexnode)),  \
    COPY_FIELDS(src,__node), \
    __node)</cpp:value></cpp:define>


<comment type="block">/* Finding triplet a.b --&gt; a */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IsType</name><parameter_list>(<parameter><type><name>node</name></type></parameter>, <parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(node-&gt;typenode == X_##type)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>APPEND_NODE</name><parameter_list>(<parameter><type><name>list</name></type></parameter>,<parameter><type><name>nd</name></type></parameter>)</parameter_list></cpp:macro>	\
	<cpp:value>if (nd) \
	{ \
		list = lappend(list, nd); \
		nd = NULL; \
	}</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>mod</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(a-&gt;modificator)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SF</name><parameter_list>(<parameter><type><name>a</name></type></parameter>)</parameter_list></cpp:macro>	<cpp:value>(a ? a : "")</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NEWNODE</name><parameter_list>(<parameter><type><name>type</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>( \
	__node = (orafce_lexnode *) palloc(sizeof(orafce_lexnode)), \
	__node-&gt;typenode = X_##type, \
	__node-&gt;modificator = NULL, \
	__node-&gt;sep = NULL, \
	__node-&gt;keycode = -1, \
	__node-&gt;classname = #type, \
	__node-&gt;lloc = 0, \
	__node )</cpp:value></cpp:define>



<function><type><specifier>static</specifier> <name>orafce_lexnode</name> <modifier>*</modifier></type>
<name>compose</name><parameter_list>(<parameter><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>sinfo</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>sinfo</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>NEWNODE</name><argument_list>(<argument><expr><name>IDENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>lloc</name></name> <operator>=</operator> <name><name>a</name><operator>-&gt;</operator><name>lloc</name></name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>SF</name><argument_list>(<argument><expr><call><name>mod</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dq"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"\"%s\"."</literal></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><name><name>a</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><call><name>SF</name><argument_list>(<argument><expr><call><name>mod</name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"dq"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>str</name></name> <operator>=</operator> <name><name>sinfo</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>filterList</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>skip_spaces</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>qnames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>cell</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isdot</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>a</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>dot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>cell</argument>, <argument>list</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>nd</name> <init>= <expr><operator>(</operator><name>orafce_lexnode</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>cell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>qnames</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>isdot</name> <operator>=</operator> <operator>(</operator><call><name>IsType</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>OTHERS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>nd</name><operator>-&gt;</operator><name>str</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>IsType</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>IDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>dot</name> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>compose</name><argument_list>(<argument><expr><name>a</name></expr></argument>, <argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>dot</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>isdot</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>dot</name> <operator>&amp;&amp;</operator> <name>a</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>dot</name> <operator>=</operator> <call><name>COPY_NODE</name><argument_list>(<argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><call><name>IsType</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>IDENT</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>a</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>a</name> <operator>=</operator> <call><name>COPY_NODE</name><argument_list>(<argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* clean buffered values */</comment>
		<expr_stmt><expr><call><name>APPEND_NODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>APPEND_NODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>skip_spaces</name> <operator>&amp;&amp;</operator> <call><name>IsType</name><argument_list>(<argument><expr><name>nd</name></expr></argument>, <argument><expr><name>WHITESPACE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>COPY_NODE</name><argument_list>(<argument><expr><name>nd</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* clean buffered values */</comment>
	<expr_stmt><expr><call><name>APPEND_NODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>APPEND_NODE</name><argument_list>(<argument><expr><name>result</name></expr></argument>,<argument><expr><name>dot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Datum</name></type>
<name>plvlex_tokens</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FuncCallContext</name>	   <modifier>*</modifier></type><name>funcctx</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type>			<name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>AttInMetadata</name>	   <modifier>*</modifier></type><name>attinmeta</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tokensFctx</name>		   <modifier>*</modifier></type><name>fctx</name></decl>;</decl_stmt>


	<if_stmt><if>if <condition>(<expr><call><name>SRF_IS_FIRSTCALL</name> <argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MemoryContext</name></type>  <name>oldcontext</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>lexems</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>skip_spaces</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>qnames</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>orafce_sql_scanner_init</name><argument_list>(<argument><expr><call><name>CSTRING</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>orafce_sql_yyparse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lexems</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>orafce_sql_yyerror</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"bogus input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><call><name>orafce_sql_scanner_finish</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_FIRSTCALL_INIT</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldcontext</name> <operator>=</operator> <call><name>MemoryContextSwitchTo</name> <argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>multi_call_memory_ctx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>fctx</name> <operator>=</operator> <operator>(</operator><name>tokensFctx</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><sizeof>sizeof <argument_list>(<argument><expr><name>tokensFctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name> <operator>=</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>fctx</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>filterList</name><argument_list>(<argument><expr><name>lexems</name></expr></argument>, <argument><expr><name>skip_spaces</name></expr></argument>, <argument><expr><name>qnames</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>nnodes</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>cnode</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">6</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name>  <index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name>  <index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">1024</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name>  <index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name>  <index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">16</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name>  <index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">255</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name>  <index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator> <call><name>palloc</name> <argument_list>(<argument><expr><literal type="number">255</literal> <operator>*</operator> <sizeof>sizeof <argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <literal type="number">120000</literal></expr></cpp:if>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

		<expr_stmt><expr><name>tupdesc</name> <operator>=</operator> <call><name>CreateTemplateTupleDesc</name> <argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<expr_stmt><expr><call><name>TupleDescInitEntry</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>,  <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"start_pos"</literal></expr></argument>, <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>,  <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="string">"token"</literal></expr></argument>,     <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>,  <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="string">"keycode"</literal></expr></argument>,   <argument><expr><name>INT4OID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>,  <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"class"</literal></expr></argument>,     <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>,  <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">"separator"</literal></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>TupleDescInitEntry</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>,  <argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">"mod"</literal></expr></argument>,       <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>attinmeta</name> <operator>=</operator> <call><name>TupleDescGetAttInMetadata</name> <argument_list>(<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>funcctx</name> <operator>-&gt;</operator> <name>attinmeta</name></name> <operator>=</operator> <name>attinmeta</name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name> <argument_list>(<argument><expr><name>oldcontext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>


	<expr_stmt><expr><name>funcctx</name> <operator>=</operator> <call><name>SRF_PERCALL_SETUP</name> <argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fctx</name> <operator>=</operator> <operator>(</operator><name>tokensFctx</name><operator>*</operator><operator>)</operator> <name><name>funcctx</name><operator>-&gt;</operator><name>user_fctx</name></name></expr>;</expr_stmt>

	<while>while <condition>(<expr><name><name>fctx</name><operator>-&gt;</operator><name>cnode</name></name> <operator>&lt;</operator> <name><name>fctx</name><operator>-&gt;</operator><name>nnodes</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>result</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>back_vals</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>orafce_lexnode</name> <modifier>*</modifier></type><name>nd</name> <init>= <expr><operator>(</operator><name>orafce_lexnode</name><operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>, <argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>cnode</name></name><operator>++</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>values</name> <operator>=</operator> <name><name>fctx</name><operator>-&gt;</operator><name>values</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>back_vals</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>back_vals</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>back_vals</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,    <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>nd</name><operator>-&gt;</operator><name>lloc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>SF</name><argument_list>(<argument><expr><name><name>nd</name><operator>-&gt;</operator><name>str</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,    <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name><name>nd</name><operator>-&gt;</operator><name>keycode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,    <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>nd</name><operator>-&gt;</operator><name>classname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>,   <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>SF</name><argument_list>(<argument><expr><name><name>nd</name><operator>-&gt;</operator><name>sep</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>,    <argument><expr><literal type="number">48</literal></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>SF</name><argument_list>(<argument><expr><name><name>nd</name><operator>-&gt;</operator><name>modificator</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>nd</name><operator>-&gt;</operator><name>keycode</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nd</name><operator>-&gt;</operator><name>sep</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>nd</name><operator>-&gt;</operator><name>modificator</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>tuple</name> <operator>=</operator> <call><name>BuildTupleFromCStrings</name><argument_list>(<argument><expr><name><name>funcctx</name><operator>-&gt;</operator><name>attinmeta</name></name></expr></argument>, <argument><expr><name><name>fctx</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>HeapTupleGetDatum</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name><name>back_vals</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>=</operator> <name><name>back_vals</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>back_vals</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SRF_RETURN_NEXT</name> <argument_list>(<argument><expr><name>funcctx</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SRF_RETURN_DONE</name> <argument_list>(<argument><expr><name>funcctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
