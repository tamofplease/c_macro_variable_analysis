<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/vendor/safestringlib/safeclib/safe_mem_constraint.c"><comment type="block">/*------------------------------------------------------------------
 * safe_mem_constraint.c
 *
 * October 2008, Bo Berry
 * 2012, Jonathan Toppins &lt;jtoppins@users.sourceforge.net&gt;
 *
 * Copyright (c) 2008-2012 Cisco Systems
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safeclib_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_mem_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_mem_lib.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>constraint_handler_t</name></type> <name>mem_handler</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>


<comment type="block" format="doxygen">/**
 * NAME
 *    set_mem_constraint_handler_s
 *
 * SYNOPSIS
 *    #include "safe_mem_lib.h"
 *    constraint_handler_t
 *    set_mem_constraint_handler_straint_handler_t handler)
 *
 * DESCRIPTION
 *    The set_mem_constraint_handler_s function sets the runtime-constraint
 *    handler to be handler. The runtime-constraint handler is the function to
 *    be called when a library function detects a runtime-constraint
 *   order:
 *        1.    A pointer to a character string describing the
 *              runtime-constraint violation.
 *        2.    A null pointer or a pointer to an implementation defined
 *              object.
 *        3.    If the function calling the handler has a return type declared
 *              as errno_t, the return value of the function is passed.
 *              Otherwise, a positive value of type errno_t is passed.
 *    The implementation has a default constraint handler that is used if no
 *    calls to the set_constraint_handler_s function have been made. The
 *    behavior of the default handler is implementation-defined, and it may
 *    cause the program to exit or abort.  If the handler argument to
 *    set_constraint_handler_s is a null pointer, the implementation default
 *    handler becomes the current constraint handler.
 *
 * SPECIFIED IN
 *    ISO/IEC JTC1 SC22 WG14 N1172, Programming languages, environments
 *    and system software interfaces, Extensions to the C Library,
 *    Part I: Bounds-checking interfaces
 *
 * INPUT PARAMETERS
 *   *msg            Pointer to the message describing the error
 *
 *   *ptr            Pointer to aassociated data.  Can be NULL.
 *
 *    error          The error code encountered.
 *
 * OUTPUT PARAMETERS
 *    none
 *
 * RETURN VALUE
 *    none
 *
 * ALSO SEE
 *    set_str_constraint_handler_s()
 */</comment>
<function><type><name>constraint_handler_t</name></type>
<name>set_mem_constraint_handler_s</name> <parameter_list>(<parameter><decl><type><name>constraint_handler_t</name></type> <name>handler</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>constraint_handler_t</name></type> <name>prev_handler</name> <init>= <expr><name>mem_handler</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>handler</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>mem_handler</name> <operator>=</operator> <name>sl_default_handler</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>mem_handler</name> <operator>=</operator> <name>handler</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>prev_handler</name></expr>;</return>
</block_content>}</block></function>
<macro><name>EXPORT_SYMBOL</name><argument_list>(<argument>set_mem_constraint_handler_s</argument>)</argument_list></macro>


<comment type="block" format="doxygen">/**
 * NAME
 *    invoke_safe_mem_constraint_handler
 *
 * SYNOPSIS
 *    #include "safe_mem_constraint.h"
 *    void
 *    invoke_safe_mem_constraint_handler(const char *msg,
 *                                void *ptr,
 *                                errno_t error)
 *
 * DESCRIPTION
 *    Invokes the currently set constraint handler or the default.
 *
 * INPUT PARAMETERS
 *   *msg            Pointer to the message describing the error
 *
 *   *ptr            Pointer to aassociated data.  Can be NULL.
 *
 *    error          The error code encountered.
 *
 * OUTPUT PARAMETERS
 *    none
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>invoke_safe_mem_constraint_handler</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>,
                                    <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>,
                                    <parameter><decl><type><name>errno_t</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>mem_handler</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mem_handler</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sl_default_handler</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
