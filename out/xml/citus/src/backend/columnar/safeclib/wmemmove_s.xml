<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/columnar/safeclib/wmemmove_s.c"><comment type="block">/*------------------------------------------------------------------
 * wmemmove_s.c
 *
 * August 2014, D Wheeler
 *
 * Copyright (c) 2014 Intel Corp
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safeclib_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_mem_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem_primitives_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_mem_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;wchar.h&gt;</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * NAME
 *    wmemmove_s
 *
 * SYNOPSIS
 *    #include "safe_mem_lib.h"
 *    errno_t
 *    wmemmove_s(wchar_t* dest, rsize_t dmax,
 *              const wchar_t* src, size_t smax)
 *
 * DESCRIPTION
 *    The wmemmove_s function copies smax wide characters from the region pointed
 *    to by src into the region pointed to by dest. This copying takes place
 *    as if the smax wide characters from the region pointed to by src are first copied
 *    into a temporary array of smax bytes that does not overlap the region
 *    pointed to by dest or src, and then the smax bytes from the temporary
 *    array are copied into the object region to by dest.
 *
 * SPECIFIED IN
 *    ISO/IEC TR 24731, Programming languages, environments
 *    and system software interfaces, Extensions to the C Library,
 *    Part I: Bounds-checking interfaces
 *
 * INPUT PARAMETERS
 *    dest       pointer to the memory that will be replaced by src.
 *
 *    dmax       maximum number of resulting wide characters in dest
 *
 *    src        pointer to the memory that will be copied
 *                to dest
 *
 *    smax       maximum number wide characters of src that can be copied
 *
 *  OUTPUT PARAMETERS
 *    dest      is updated
 *
 * RUNTIME CONSTRAINTS
 *    Neither dest nor src shall be a null pointer.
 *    Neither dmax nor smax shall be 0.
 *    dmax shall not be greater than RSIZE_MAX_MEM/sizeof(wchar_t).
 *    smax shall not be greater than dmax.
 *    If there is a runtime-constraint violation, the wmemmove_s function
 *    stores zeros in the first dmax characters of the region pointed to
 *    by dest if dest is not a null pointer and dmax is not greater
 *    than RSIZE_MAX_MEM/sizeof(wchar_t).
 *
 * RETURN VALUE
 *    EOK        successful operation
 *    ESNULLP    NULL pointer
 *    ESZEROL    zero length
 *    ESLEMAX    length exceeds max limit
 *
 * ALSO SEE
 *    memmove16_s(), memmove32_s(), memcpy_s(), memcpy16_s() memcpy32_s()
 *    wmemcpy_s()
 *
 */</comment>
<function><type><name>errno_t</name></type>
<name>wmemmove_s</name><parameter_list>(<parameter><decl><type><name>wchar_t</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>wchar_t</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>smax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>wchar_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>wchar_t</name>  <modifier>*</modifier></type><name>sp</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dp</name><operator>=</operator> <name>dest</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>sp</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_mem_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"wmemmove_s: dest is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_mem_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"wmemmove_s: dmax is 0"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name>RSIZE_MAX_MEM</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_mem_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"wmemmove_s: dmax exceeds max"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>smax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mem_prim_set</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>dmax</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invoke_safe_mem_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"wmemmove_s: smax is 0"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>smax</name> <operator>&gt;</operator> <name>dmax</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mem_prim_set</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>dmax</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invoke_safe_mem_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"wmemmove_s: smax exceeds max"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>sp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>mem_prim_set</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>dmax</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>invoke_safe_mem_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"wmemmove_s: src is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
     * now perform the copy
     */</comment>
    <expr_stmt><expr><call><name>mem_prim_move</name><argument_list>(<argument><expr><name>dp</name></expr></argument>, <argument><expr><name>sp</name></expr></argument>, <argument><expr><name>smax</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>wchar_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><operator>(</operator><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>EOK</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<macro><name>EXPORT_SYMBOL</name><argument_list>(<argument>wmemmove_s</argument>)</argument_list></macro>
</unit>
