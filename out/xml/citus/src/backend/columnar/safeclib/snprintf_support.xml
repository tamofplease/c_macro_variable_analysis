<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/columnar/safeclib/snprintf_support.c"><comment type="block">/*------------------------------------------------------------------
 * snprintf_support.c
 *
 * August 2014, D Wheeler
 *
 * Copyright (c) 2014 by Intel Corp
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safeclib_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"snprintf_s.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_CHAR</name></cpp:macro>    <cpp:value>'c'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_WCHAR</name></cpp:macro>   <cpp:value>'C'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_SHORT</name></cpp:macro>   <cpp:value>'h'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_INT</name></cpp:macro>		<cpp:value>'d'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_LONG</name></cpp:macro>	<cpp:value>'l'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_STRING</name></cpp:macro>	<cpp:value>'s'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_WSTRING</name></cpp:macro>	<cpp:value>'S'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_DOUBLE</name></cpp:macro>	<cpp:value>'g'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_LDOUBLE</name></cpp:macro>	<cpp:value>'G'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_VOID</name></cpp:macro>    <cpp:value>'p'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PCHAR</name></cpp:macro>	<cpp:value>'1'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PSHORT</name></cpp:macro>	<cpp:value>'2'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PINT</name></cpp:macro>	<cpp:value>'3'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FMT_PLONG</name></cpp:macro>	<cpp:value>'4'</cpp:value></cpp:define>



<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_FORMAT_ELEMENTS</name></cpp:macro>    <cpp:value>16</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CHK_FORMAT</name><parameter_list>(<parameter><type><name>X</name></type></parameter>,<parameter><type><name>Y</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>(((X)==(Y))?1:0)</cpp:value></cpp:define>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wmissing-prototypes"</cpp:literal></cpp:pragma>

<function><type><name>unsigned</name> <name>int</name></type>
<name>parse_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>pformatList</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>maxFormats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>numFormats</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		  <name>lmod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>RSIZE_MAX_STR</name> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name>numFormats</name> <operator>&lt;</operator> <name>maxFormats</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'%'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name>start</name> <operator>=</operator> <name>index</name></expr>;</expr_stmt> <comment type="line">// remember where the format string started</comment>
			<comment type="line">// Check for flags</comment>
			<switch>switch<condition>( <expr><name><name>format</name><index>[<expr><operator>++</operator><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'\0'</literal></expr>:</case> <continue>continue;</continue> <comment type="line">// skip - end of format string</comment>
			<case>case <expr><literal type="char">'%'</literal></expr> :</case> <continue>continue;</continue> <comment type="line">// skip - actually a percent character</comment>
			<case>case <expr><literal type="char">'#'</literal></expr> :</case> <comment type="line">// convert to alternate form</comment>
			<case>case <expr><literal type="char">'0'</literal></expr> :</case> <comment type="line">// zero pad</comment>
			<case>case <expr><literal type="char">'-'</literal></expr> :</case> <comment type="line">// left adjust</comment>
			<case>case <expr><literal type="char">' '</literal></expr> :</case> <comment type="line">// pad with spaces</comment>
			<case>case <expr><literal type="char">'+'</literal></expr> :</case> <comment type="line">// force a sign be used</comment>
				<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the flag character</comment>
				<break>break;</break>
			</block_content>}</block></switch>
			<comment type="line">// check for and skip the optional field width</comment>
			<while>while <condition>( <expr><name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></while>
			<comment type="line">// Check for an skip the optional precision</comment>
			<if_stmt><if>if <condition>( <expr><name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the period</comment>
				<while>while <condition>( <expr><name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>format</name><index>[<expr><name>index</name></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
				</block_content>}</block></while>
			</block_content>}</block></if></if_stmt>
			<comment type="line">// Check for and skip the optional length modifiers</comment>
			<expr_stmt><expr><name>lmod</name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
			<switch>switch<condition>( <expr><name><name>format</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'h'</literal></expr> :</case> <if_stmt><if>if <condition>( <expr><name><name>format</name><index>[<expr><operator>++</operator><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
				           <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt> <comment type="line">//also recognize the 'hh' modifier</comment>
				           <expr_stmt><expr><name>lmod</name> <operator>=</operator> <literal type="char">'H'</literal></expr>;</expr_stmt> <comment type="line">// for char</comment>
			           </block_content>}</block></if> <else>else <block>{<block_content>
			               <expr_stmt><expr><name>lmod</name> <operator>=</operator> <literal type="char">'h'</literal></expr>;</expr_stmt> <comment type="line">// for short</comment>
			           </block_content>}</block></else></if_stmt>
					   <break>break;</break>
			<case>case <expr><literal type="char">'l'</literal></expr> :</case> <if_stmt><if>if <condition>( <expr><name><name>format</name><index>[<expr><operator>++</operator><name>index</name></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
				           <expr_stmt><expr><operator>++</operator><name>index</name></expr>;</expr_stmt> <comment type="line">//also recognize the 'll' modifier</comment>
				           <expr_stmt><expr><name>lmod</name> <operator>=</operator> <literal type="char">'d'</literal></expr>;</expr_stmt> <comment type="line">// for long long</comment>
			           </block_content>}</block></if> <else>else <block>{<block_content>
			               <expr_stmt><expr><name>lmod</name> <operator>=</operator> <literal type="char">'l'</literal></expr>;</expr_stmt> <comment type="line">// for long</comment>
			           </block_content>}</block></else></if_stmt>
			           <break>break;</break>
			<case>case <expr><literal type="char">'L'</literal></expr> :</case> <expr_stmt><expr><name>lmod</name> <operator>=</operator> <literal type="char">'L'</literal></expr>;</expr_stmt> <break>break;</break>
			<case>case <expr><literal type="char">'j'</literal></expr> :</case>
			<case>case <expr><literal type="char">'z'</literal></expr> :</case>
			<case>case <expr><literal type="char">'t'</literal></expr> :</case> <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
			           <break>break;</break>
			</block_content>}</block></switch>

			<comment type="line">// Recognize and record the actual modifier</comment>
			<switch>switch<condition>( <expr><name><name>format</name><index>[<expr><name>index</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'c'</literal></expr> :</case>
				 <if_stmt><if>if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_WCHAR</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <else>else <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_CHAR</name></expr>;</expr_stmt>
				 </block_content>}</block></else></if_stmt>
				 <expr_stmt><expr><name>numFormats</name><operator>++</operator></expr>;</expr_stmt>
				 <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
				 <break>break;</break>

			<case>case <expr><literal type="char">'d'</literal></expr> :</case> <case>case <expr><literal type="char">'i'</literal></expr> :</case> <comment type="line">// signed</comment>
			<case>case <expr><literal type="char">'o'</literal></expr> :</case> <case>case <expr><literal type="char">'u'</literal></expr> :</case> <comment type="line">// unsigned</comment>
			<case>case <expr><literal type="char">'x'</literal></expr> :</case> <case>case <expr><literal type="char">'X'</literal></expr> :</case> <comment type="line">// unsigned</comment>
				 <if_stmt><if>if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_CHAR</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
				 	 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_LONG</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_SHORT</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <else>else<block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_INT</name></expr>;</expr_stmt>
				 </block_content>}</block></else></if_stmt>
				 <expr_stmt><expr><name>numFormats</name><operator>++</operator></expr>;</expr_stmt>
				 <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
				 <break>break;</break>

			<case>case <expr><literal type="char">'e'</literal></expr> :</case> <case>case <expr><literal type="char">'E'</literal></expr> :</case>
			<case>case <expr><literal type="char">'f'</literal></expr> :</case> <case>case <expr><literal type="char">'F'</literal></expr> :</case>
			<case>case <expr><literal type="char">'g'</literal></expr> :</case> <case>case <expr><literal type="char">'G'</literal></expr> :</case>
			<case>case <expr><literal type="char">'a'</literal></expr> :</case> <case>case <expr><literal type="char">'A'</literal></expr> :</case>
				 <if_stmt><if>if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_LDOUBLE</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <else>else<block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_DOUBLE</name></expr>;</expr_stmt>
				 </block_content>}</block></else></if_stmt>
				 <expr_stmt><expr><name>numFormats</name><operator>++</operator></expr>;</expr_stmt>
				 <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
				 <break>break;</break>

			<case>case <expr><literal type="char">'s'</literal></expr> :</case>
				 <if_stmt><if>if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name>lmod</name> <operator>==</operator> <literal type="char">'L'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_WSTRING</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <else>else <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_STRING</name></expr>;</expr_stmt>
				 </block_content>}</block></else></if_stmt>
				 <expr_stmt><expr><name>numFormats</name><operator>++</operator></expr>;</expr_stmt>
				 <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
				 <break>break;</break>

			<case>case <expr><literal type="char">'p'</literal></expr> :</case>
				 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_VOID</name></expr>;</expr_stmt>
				 <expr_stmt><expr><name>numFormats</name><operator>++</operator></expr>;</expr_stmt>
				 <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
				 <break>break;</break>

			<case>case <expr><literal type="char">'n'</literal></expr> :</case>
				 <if_stmt><if>if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'H'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_PCHAR</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'l'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_PLONG</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <if type="elseif">else if <condition>( <expr><name>lmod</name> <operator>==</operator> <literal type="char">'h'</literal></expr>)</condition> <block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_PSHORT</name></expr>;</expr_stmt> <comment type="line">// store the format character</comment>
				 </block_content>}</block></if> <else>else<block>{<block_content>
					 <expr_stmt><expr><name><name>pformatList</name><index>[<expr><name>numFormats</name></expr>]</index></name> <operator>=</operator> <name>FMT_PINT</name></expr>;</expr_stmt>
				 </block_content>}</block></else></if_stmt>
				 <expr_stmt><expr><name>numFormats</name><operator>++</operator></expr>;</expr_stmt>
				 <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
				 <break>break;</break>
			<case>case <expr><literal type="char">'m'</literal></expr> :</case>
			     <comment type="line">// Does not represent an argument in the call stack</comment>
			     <expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// skip the format character</comment>
			     <continue>continue;</continue>
			<default>default:</default>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to recognize format string ["</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<for>for <control>(<init>;</init><condition><expr><name>start</name><operator>&lt;</operator><name>index</name></expr>;</condition> <incr><expr><name>start</name><operator>++</operator></expr></incr>)</control> <block>{<block_content> <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name><name>format</name><index>[<expr><name>start</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></for>
				<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></switch>
		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt> <comment type="line">// move past this character</comment>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>numFormats</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>check_integer_format</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>format</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>retValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt> <comment type="line">// default failure</comment>
	<switch>switch<condition>( <expr><name>format</name></expr>)</condition> <block>{<block_content>
		<case>case <expr><name>FMT_CHAR</name></expr>  :</case>
		<case>case <expr><name>FMT_SHORT</name></expr> :</case>
		<case>case <expr><name>FMT_INT</name></expr>   :</case>
			<expr_stmt><expr><name>retValue</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
	</block_content>}</block></switch>
	<return>return <expr><name>retValue</name></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>int</name></type> <name>snprintf_s_i</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>pformatList</name><index>[<expr><name>MAX_FORMAT_ELEMENTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Determine the number of format options in the format string</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>nfo</name> <init>= <expr><call><name>parse_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pformatList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_FORMAT_ELEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check that there are not too many format options</comment>
	<if_stmt><if>if <condition>( <expr><name>nfo</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESBADFMT</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Check that the format is for an integer type</comment>
	<if_stmt><if>if <condition>( <expr><call><name>check_integer_format</name><argument_list>(<argument><expr><name><name>pformatList</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESFMTTYP</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dmax</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>



<function><type><specifier>inline</specifier> <name>int</name></type> <name>snprintf_s_l</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>pformatList</name><index>[<expr><name>MAX_FORMAT_ELEMENTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Determine the number of format options in the format string</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>nfo</name> <init>= <expr><call><name>parse_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pformatList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_FORMAT_ELEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check that there are not too many format options</comment>
	<if_stmt><if>if <condition>( <expr><name>nfo</name> <operator>!=</operator> <literal type="number">1</literal></expr> )</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESBADFMT</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Check that the format is for an long type</comment>
	<if_stmt><if>if <condition>( <expr><call><name>CHK_FORMAT</name><argument_list>(<argument><expr><name>FMT_LONG</name></expr></argument>, <argument><expr><name><name>pformatList</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESFMTTYP</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dmax</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>int</name></type> <name>snprintf_s_si</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>pformatList</name><index>[<expr><name>MAX_FORMAT_ELEMENTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Determine the number of format options in the format string</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>nfo</name> <init>= <expr><call><name>parse_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pformatList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_FORMAT_ELEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check that there are not too many format options</comment>
	<if_stmt><if>if <condition>( <expr><name>nfo</name> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESBADFMT</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Check first format is of string type</comment>
	<if_stmt><if>if <condition>( <expr><call><name>CHK_FORMAT</name><argument_list>(<argument><expr><name>FMT_STRING</name></expr></argument>, <argument><expr><name><name>pformatList</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESFMTTYP</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="line">// Check that the format is for an integer type</comment>
	<if_stmt><if>if <condition>( <expr><call><name>check_integer_format</name><argument_list>(<argument><expr><name><name>pformatList</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESFMTTYP</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dmax</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>inline</specifier> <name>int</name></type> <name>snprintf_s_sl</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>format</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name></decl></parameter>, <parameter><decl><type><name>long</name></type> <name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>pformatList</name><index>[<expr><name>MAX_FORMAT_ELEMENTS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="line">// Determine the number of format options in the format string</comment>
	<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type>  <name>nfo</name> <init>= <expr><call><name>parse_format</name><argument_list>(<argument><expr><name>format</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pformatList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>MAX_FORMAT_ELEMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="line">// Check that there are not too many format options</comment>
	<if_stmt><if>if <condition>( <expr><name>nfo</name> <operator>!=</operator> <literal type="number">2</literal></expr> )</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESBADFMT</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<comment type="line">// Check first format is of string type</comment>
	<if_stmt><if>if <condition>( <expr><call><name>CHK_FORMAT</name><argument_list>(<argument><expr><name>FMT_STRING</name></expr></argument>, <argument><expr><name><name>pformatList</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESFMTTYP</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

	<comment type="line">// Check that the format is for an integer type</comment>
	<if_stmt><if>if <condition>( <expr><call><name>CHK_FORMAT</name><argument_list>(<argument><expr><name>FMT_LONG</name></expr></argument>, <argument><expr><name><name>pformatList</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>dest</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
			<return>return <expr><call><name>SNPRFNEGATE</name><argument_list>(<argument><expr><name>ESFMTTYP</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>

	<return>return <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dmax</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
