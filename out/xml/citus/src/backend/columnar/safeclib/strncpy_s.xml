<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/columnar/safeclib/strncpy_s.c"><comment type="block">/*------------------------------------------------------------------
 * strncpy_s.c
 *
 * October 2008, Bo Berry
 *
 * Copyright (c) 2008-2011 by Cisco Systems, Inc
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safeclib_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_lib.h"</cpp:file></cpp:include>


<comment type="block">/*
 * NAME
 *    strncpy_s
 *
 * SYNOPSIS
 *    #include "safe_str_lib.h"
 *    errno_t
 *    strncpy_s(char *dest, rsize_t dmax, const char *src, rsize_t slen)
 *
 * DESCRIPTION
 *    The strncpy_s function copies not more than slen successive characters
 *    (characters that follow a null character are not copied) from the
 *    array pointed to by src to the array pointed to by dest. If no null
 *    character was copied from src, then dest[n] is set to a null character.
 *
 *    All elements following the terminating null character (if any)
 *    written by strncpy_s in the array of dmax characters pointed to
 *    by dest take on the null value when strncpy_s returns.
 *
 * Specicified in:
 *    ISO/IEC TR 24731-1, Programming languages, environments
 *    and system software interfaces, Extensions to the C Library,
 *    Part I: Bounds-checking interfaces
 *
 * INPUT PARAMETERS
 *    dest      pointer to string that will be replaced by src.
 *              The resulting string is null terminated.
 *
 *    dmax      restricted maximum length of the resulting dest,
 *              including the null
 *
 *    src       pointer to the string that will be copied
 *              to string dest
 *
 *    slen      the maximum number of characters to copy from src
 *
 * OUTPUT PARAMETERS
 *    dest      updated with src string
 *
 * RUNTIME CONSTRAINTS
 *    Neither dmax nor slen shall be equal to zero.
 *    Neither dmax nor slen shall be equal zero.
 *    Neither dmax nor slen shall be greater than RSIZE_MAX_STR.
 *    If slen is either greater than or equal to dmax, then dmax
 *     should be more than strnlen_s(src,dmax)
 *    Copying shall not take place between objects that overlap.
 *    If there is a runtime-constraint violation, then if dest
 *       is not a null pointer and dmax greater than RSIZE_MAX_STR,
 *       then strncpy_s nulls dest.
 *
 * RETURN VALUE
 *    EOK        successful operation, the characters in src were copied
 *                  to dest and the result is null terminated.
 *    ESNULLP    NULL pointer
 *    ESZEROL    zero length
 *    ESLEMAX    length exceeds max limit
 *    ESOVRLP    strings overlap
 *    ESNOSPC    not enough space to copy src
 *
 * ALSO SEE
 *    strcat_s(), strncat_s(), strcpy_s()
 *-
 */</comment>
<function><type><name>errno_t</name></type>
<name>strncpy_s</name> <parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>slen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>rsize_t</name></type> <name>orig_dmax</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>orig_dest</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>overlap_bumper</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strncpy_s: dest is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strncpy_s: dmax is 0"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>&gt;</operator> <name>RSIZE_MAX_STR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strncpy_s: dmax exceeds max"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* hold base in case src was not copied */</comment>
    <expr_stmt><expr><name>orig_dmax</name> <operator>=</operator> <name>dmax</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>orig_dest</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>orig_dest</name></expr></argument>, <argument><expr><name>orig_dmax</name></expr></argument>, <argument><expr><literal type="string">"strncpy_s: "</literal>
                     <literal type="string">"src is null"</literal></expr></argument>,
                     <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>orig_dest</name></expr></argument>, <argument><expr><name>orig_dmax</name></expr></argument>, <argument><expr><literal type="string">"strncpy_s: "</literal>
                     <literal type="string">"slen is zero"</literal></expr></argument>,
                     <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>&gt;</operator> <name>RSIZE_MAX_STR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>orig_dest</name></expr></argument>, <argument><expr><name>orig_dmax</name></expr></argument>, <argument><expr><literal type="string">"strncpy_s: "</literal>
                     <literal type="string">"slen exceeds max"</literal></expr></argument>,
                     <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>


   <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>&lt;</operator> <name>src</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>overlap_bumper</name> <operator>=</operator> <name>src</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>dmax</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>overlap_bumper</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>orig_dest</name></expr></argument>, <argument><expr><name>orig_dmax</name></expr></argument>, <argument><expr><literal type="string">"strncpy_s: "</literal>
                        <literal type="string">"overlapping objects"</literal></expr></argument>,
                        <argument><expr><name>ESOVRLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESOVRLP</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/*
                 * Copying truncated to slen chars.  Note that the TR says to
                 * copy slen chars plus the null char.  We null the slack.
                 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SAFECLIB_STR_NULL_SLACK</name></cpp:ifdef>
                <while>while <condition>(<expr><name>dmax</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>EOK</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SAFECLIB_STR_NULL_SLACK</name></cpp:ifdef>
                <comment type="block">/* null slack */</comment>
                <while>while <condition>(<expr><name>dmax</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>EOK</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>slen</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>overlap_bumper</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>dmax</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>overlap_bumper</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>orig_dest</name></expr></argument>, <argument><expr><name>orig_dmax</name></expr></argument>, <argument><expr><literal type="string">"strncpy_s: "</literal>
                        <literal type="string">"overlapping objects"</literal></expr></argument>,
                        <argument><expr><name>ESOVRLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESOVRLP</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

	    <if_stmt><if>if <condition>(<expr><name>slen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <comment type="block">/*
                 * Copying truncated to slen chars.  Note that the TR says to
                 * copy slen chars plus the null char.  We null the slack.
                 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SAFECLIB_STR_NULL_SLACK</name></cpp:ifdef>
                <while>while <condition>(<expr><name>dmax</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
                <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>EOK</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <operator>*</operator><name>src</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SAFECLIB_STR_NULL_SLACK</name></cpp:ifdef>
                <comment type="block">/* null slack */</comment>
                <while>while <condition>(<expr><name>dmax</name></expr>)</condition> <block>{<block_content> <expr_stmt><expr><operator>*</operator><name>dest</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt> <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt> <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt> </block_content>}</block></while>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>EOK</name></expr></argument>)</argument_list></call></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>slen</name><operator>--</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <comment type="block">/*
     * the entire src was not copied, so zero the string
     */</comment>
    <expr_stmt><expr><call><name>handle_error</name><argument_list>(<argument><expr><name>orig_dest</name></expr></argument>, <argument><expr><name>orig_dmax</name></expr></argument>, <argument><expr><literal type="string">"strncpy_s: not enough "</literal>
                 <literal type="string">"space for src"</literal></expr></argument>,
                 <argument><expr><name>ESNOSPC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><call><name>RCNEGATE</name><argument_list>(<argument><expr><name>ESNOSPC</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<macro><name>EXPORT_SYMBOL</name><argument_list>(<argument>strncpy_s</argument>)</argument_list></macro>
</unit>
