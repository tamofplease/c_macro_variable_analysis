<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/columnar/write_state_management.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"citus_version.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/multixact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/rewriteheap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tsmapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heaptoast.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/catalog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/plancat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufpage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/bufmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/predicate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/procarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/pg_rusage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar_customscan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar_tableam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar_version_compat.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Mapping from relfilenode to WriteStateMapEntry. This keeps write state for
 * each relation.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>WriteStateMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* memory context for allocating WriteStateMap &amp; all write states */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContext</name></type> <name>WriteStateContext</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Each member of the writeStateStack in WriteStateMapEntry. This means that
 * we did some inserts in the subtransaction subXid, and the state of those
 * inserts is stored at writeState. Those writes can be flushed or unflushed.
 */</comment>
<typedef>typedef <type><struct>struct <name>SubXidWriteState</name>
<block>{
	<decl_stmt><decl><type><name>SubTransactionId</name></type> <name>subXid</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ColumnarWriteState</name> <modifier>*</modifier></type><name>writeState</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>SubXidWriteState</name></name> <modifier>*</modifier></type><name>next</name></decl>;</decl_stmt>
}</block></struct></type> <name>SubXidWriteState</name>;</typedef>


<comment type="block">/*
 * An entry in WriteStateMap.
 */</comment>
<typedef>typedef <type><struct>struct <name>WriteStateMapEntry</name>
<block>{
	<comment type="block">/* key of the entry */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relfilenode</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If a table is dropped, we set dropped to true and set dropSubXid to the
	 * id of the subtransaction in which the drop happened.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>dropped</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SubTransactionId</name></type> <name>dropSubXid</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Stack of SubXidWriteState where first element is top of the stack. When
	 * inserts happen, we look at top of the stack. If top of stack belongs to
	 * current subtransaction, we forward writes to its writeState. Otherwise,
	 * we create a new stack entry for current subtransaction and push it to
	 * the stack, and forward writes to that.
	 */</comment>
	<decl_stmt><decl><type><name>SubXidWriteState</name> <modifier>*</modifier></type><name>writeStateStack</name></decl>;</decl_stmt>
}</block></struct></type> <name>WriteStateMapEntry</name>;</typedef>


<comment type="block">/*
 * Memory context reset callback so we reset WriteStateMap to NULL at the end
 * of transaction. WriteStateMap is allocated in &amp; WriteStateMap, so its
 * leaked reference can cause memory issues.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>MemoryContextCallback</name></type> <name>cleanupCallback</name></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CleanupWriteStateMap</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>WriteStateMap</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>WriteStateContext</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>ColumnarWriteState</name> <modifier>*</modifier></type>
<name>columnar_init_write_state</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl></parameter>,
						  <parameter><decl><type><name>Oid</name></type> <name>tupSlotRelationId</name></decl></parameter>,
						  <parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * If this is the first call in current transaction, allocate the hash
	 * table.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>WriteStateMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>WriteStateContext</name> <operator>=</operator>
			<call><name>AllocSetContextCreate</name><argument_list>(
				<argument><expr><name>TopTransactionContext</name></expr></argument>,
				<argument><expr><literal type="string">"Column Store Write State Management Context"</literal></expr></argument>,
				<argument><expr><name>ALLOCSET_DEFAULT_SIZES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type> <name>hashFlags</name> <init>= <expr><operator>(</operator><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_CONTEXT</name><operator>)</operator></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>oid_hash</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>WriteStateMapEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>WriteStateContext</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>WriteStateMap</name> <operator>=</operator> <call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"column store write state map"</literal></expr></argument>,
									<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>hashFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>cleanupCallback</name><operator>.</operator><name>arg</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cleanupCallback</name><operator>.</operator><name>func</name></name> <operator>=</operator> <operator>&amp;</operator><name>CleanupWriteStateMap</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cleanupCallback</name><operator>.</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextRegisterResetCallback</name><argument_list>(<argument><expr><name>WriteStateContext</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cleanupCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>WriteStateMapEntry</name> <modifier>*</modifier></type><name>hashEntry</name> <init>= <expr><call><name>hash_search</name><argument_list>(<argument><expr><name>WriteStateMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name><operator>.</operator><name>relNode</name></name></expr></argument>,
												<argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>hashEntry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>hashEntry</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name><name>hashEntry</name><operator>-&gt;</operator><name>dropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If top of stack belongs to the current subtransaction, return its
	 * writeState, ...
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>hashEntry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SubXidWriteState</name> <modifier>*</modifier></type><name>stackHead</name> <init>= <expr><name><name>hashEntry</name><operator>-&gt;</operator><name>writeStateStack</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>stackHead</name><operator>-&gt;</operator><name>subXid</name></name> <operator>==</operator> <name>currentSubXid</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name><name>stackHead</name><operator>-&gt;</operator><name>writeState</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * ... otherwise we need to create a new stack entry for the current
	 * subtransaction.
	 */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>WriteStateContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ColumnarOptions</name></type> <name>columnarOptions</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * In case of a table rewrite, we need to fetch table options based on the
	 * relation id of the source tuple slot.
	 *
	 * For this reason, we always pass tupSlotRelationId here; which should be
	 * same as the target table if the write operation is not related to a table
	 * rewrite etc.
	 */</comment>
	<expr_stmt><expr><call><name>ReadColumnarOptions</name><argument_list>(<argument><expr><name>tupSlotRelationId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>columnarOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SubXidWriteState</name> <modifier>*</modifier></type><name>stackEntry</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SubXidWriteState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>stackEntry</name><operator>-&gt;</operator><name>writeState</name></name> <operator>=</operator> <call><name>ColumnarBeginWrite</name><argument_list>(<argument><expr><name><name>relation</name><operator>-&gt;</operator><name>rd_node</name></name></expr></argument>,
												<argument><expr><name>columnarOptions</name></expr></argument>,
												<argument><expr><name>tupdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stackEntry</name><operator>-&gt;</operator><name>subXid</name></name> <operator>=</operator> <name>currentSubXid</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stackEntry</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>hashEntry</name><operator>-&gt;</operator><name>writeStateStack</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hashEntry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>=</operator> <name>stackEntry</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>stackEntry</name><operator>-&gt;</operator><name>writeState</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Flushes pending writes for given relfilenode in the given subtransaction.
 */</comment>
<function><type><name>void</name></type>
<name>FlushWriteStateForRelfilenode</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relfilenode</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>WriteStateMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>WriteStateMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>hash_search</name><argument_list>(<argument><expr><name>WriteStateMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relfilenode</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>entry</name> <operator>||</operator> <operator>!</operator><name><name>entry</name><operator>-&gt;</operator><name>dropped</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SubXidWriteState</name> <modifier>*</modifier></type><name>stackEntry</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stackEntry</name><operator>-&gt;</operator><name>subXid</name></name> <operator>==</operator> <name>currentSubXid</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ColumnarFlushPendingWrites</name><argument_list>(<argument><expr><name><name>stackEntry</name><operator>-&gt;</operator><name>writeState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Helper function for FlushWriteStateForAllRels and DiscardWriteStateForAllRels.
 * Pops all of write states for current subtransaction, and depending on "commit"
 * either flushes them or discards them. This also takes into account dropped
 * tables, and either propagates the dropped flag to parent subtransaction or
 * rolls back abort.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PopWriteStateForAllRels</name><parameter_list>(<parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubXid</name></decl></parameter>,
						<parameter><decl><type><name>bool</name></type> <name>commit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WriteStateMapEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>WriteStateMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>WriteStateMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * If the table has been dropped in current subtransaction, either
		 * commit the drop or roll it back.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>dropped</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>dropSubXid</name></name> <operator>==</operator> <name>currentSubXid</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* elevate drop to the upper subtransaction */</comment>
					<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>dropSubXid</name></name> <operator>=</operator> <name>parentSubXid</name></expr>;</expr_stmt>
				</block_content>}</block></if>
				<else>else
				<block>{<block_content>
					<comment type="block">/* abort the drop */</comment>
					<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
				</block_content>}</block></else></if_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>

		<comment type="block">/*
		 * Otherwise, commit or discard pending writes.
		 */</comment>
		<else>else
		<block>{<block_content>
			<decl_stmt><decl><type><name>SubXidWriteState</name> <modifier>*</modifier></type><name>stackHead</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name><name>stackHead</name><operator>-&gt;</operator><name>subXid</name></name> <operator>==</operator> <name>currentSubXid</name></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>commit</name></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><call><name>ColumnarEndWrite</name><argument_list>(<argument><expr><name><name>stackHead</name><operator>-&gt;</operator><name>writeState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>=</operator> <name><name>stackHead</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
 * Called when current subtransaction is committed.
 */</comment>
<function><type><name>void</name></type>
<name>FlushWriteStateForAllRels</name><parameter_list>(<parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PopWriteStateForAllRels</name><argument_list>(<argument><expr><name>currentSubXid</name></expr></argument>, <argument><expr><name>parentSubXid</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Called when current subtransaction is aborted.
 */</comment>
<function><type><name>void</name></type>
<name>DiscardWriteStateForAllRels</name><parameter_list>(<parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>parentSubXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PopWriteStateForAllRels</name><argument_list>(<argument><expr><name>currentSubXid</name></expr></argument>, <argument><expr><name>parentSubXid</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Called when the given relfilenode is dropped.
 */</comment>
<function><type><name>void</name></type>
<name>MarkRelfilenodeDropped</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relfilenode</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>WriteStateMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>WriteStateMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>hash_search</name><argument_list>(<argument><expr><name>WriteStateMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relfilenode</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>,
											<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name> <operator>||</operator> <name><name>entry</name><operator>-&gt;</operator><name>dropped</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>dropped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>dropSubXid</name></name> <operator>=</operator> <name>currentSubXid</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Called when the given relfilenode is dropped in non-transactional TRUNCATE.
 */</comment>
<function><type><name>void</name></type>
<name>NonTransactionDropWriteState</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relfilenode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>WriteStateMap</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>WriteStateMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relfilenode</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Returns true if there are any pending writes in upper transactions.
 */</comment>
<function><type><name>bool</name></type>
<name>PendingWritesInUpperTransactions</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relfilenode</name></decl></parameter>, <parameter><decl><type><name>SubTransactionId</name></type> <name>currentSubXid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>WriteStateMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>WriteStateMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>hash_search</name><argument_list>(<argument><expr><name>WriteStateMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relfilenode</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>entry</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SubXidWriteState</name> <modifier>*</modifier></type><name>stackEntry</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>writeStateStack</name></name></expr></init></decl>;</decl_stmt>

		<while>while <condition>(<expr><name>stackEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>stackEntry</name><operator>-&gt;</operator><name>subXid</name></name> <operator>!=</operator> <name>currentSubXid</name> <operator>&amp;&amp;</operator>
				<call><name>ContainsPendingWrites</name><argument_list>(<argument><expr><name><name>stackEntry</name><operator>-&gt;</operator><name>writeState</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name>stackEntry</name> <operator>=</operator> <name><name>stackEntry</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
		</block_content>}</block></while>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetWriteContextForDebug exposes WriteStateContext for debugging
 * purposes.
 */</comment>
<function><type><specifier>extern</specifier> <name>MemoryContext</name></type>
<name>GetWriteContextForDebug</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>WriteStateContext</name></expr>;</return>
</block_content>}</block></function>
</unit>
