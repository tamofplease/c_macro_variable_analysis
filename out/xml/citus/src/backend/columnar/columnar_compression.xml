<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/columnar/columnar_compression.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * columnar_compression.c
 *
 * This file contains compression/decompression functions definitions
 * used for columnar.
 *
 * Copyright (c) 2016, Citus Data, Inc.
 *
 * $Id$
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"citus_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/pg_lzcompress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar_compression.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CITUS_LIBLZ4</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;lz4.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBZSTD</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zstd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
 *	The information at the start of the compressed data. This decription is taken
 *	from pg_lzcompress in pre-9.5 version of PostgreSQL.
 */</comment>
<typedef>typedef <type><struct>struct <name>ColumnarCompressHeader</name>
<block>{
	<decl_stmt><decl><type><name>int32</name></type> <name>vl_len_</name></decl>;</decl_stmt>              <comment type="block">/* varlena header (do not touch directly!) */</comment>
	<decl_stmt><decl><type><name>int32</name></type> <name>rawsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>ColumnarCompressHeader</name>;</typedef>

<comment type="block">/*
 * Utilities for manipulation of header information for compressed data
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLUMNAR_COMPRESS_HDRSZ</name></cpp:macro> <cpp:value>((int32) sizeof(ColumnarCompressHeader))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLUMNAR_COMPRESS_RAWSIZE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ColumnarCompressHeader *) (ptr))-&gt;rawsize)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLUMNAR_COMPRESS_RAWDATA</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((char *) (ptr)) + COLUMNAR_COMPRESS_HDRSZ)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COLUMNAR_COMPRESS_SET_RAWSIZE</name><parameter_list>(<parameter><type><name>ptr</name></type></parameter>, \
									  <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((ColumnarCompressHeader *) (ptr))-&gt;rawsize = \
												(len))</cpp:value></cpp:define>


<comment type="block">/*
 * CompressBuffer compresses the given buffer with the given compression type
 * outputBuffer enlarged to contain compressed data. The function returns true
 * if compression is done, returns false if compression is not done.
 * outputBuffer is valid only if the function returns true.
 */</comment>
<function><type><name>bool</name></type>
<name>CompressBuffer</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>inputBuffer</name></decl></parameter>,
			   <parameter><decl><type><name>StringInfo</name></type> <name>outputBuffer</name></decl></parameter>,
			   <parameter><decl><type><name>CompressionType</name></type> <name>compressionType</name></decl></parameter>,
			   <parameter><decl><type><name>int</name></type> <name>compressionLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>compressionType</name></expr>)</condition>
	<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CITUS_LIBLZ4</name></expr></cpp:if>
		<case>case <expr><name>COMPRESSION_LZ4</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>maximumLength</name> <init>= <expr><call><name>LZ4_compressBound</name><argument_list>(<argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>outputBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>outputBuffer</name></expr></argument>, <argument><expr><name>maximumLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>compressedSize</name> <init>= <expr><call><name>LZ4_compress_default</name><argument_list>(<argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
													  <argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
													  <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>maximumLength</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>compressedSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>,
					 <argument><expr><literal type="string">"failure in LZ4_compress_default, input size=%d, output size=%d"</literal></expr></argument>,
					 <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>maximumLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><literal type="string">"compressed %d bytes to %d bytes"</literal></expr></argument>, <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
				 <argument><expr><name>compressedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>compressedSize</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBZSTD</name></expr></cpp:if>
		<case>case <expr><name>COMPRESSION_ZSTD</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>maximumLength</name> <init>= <expr><call><name>ZSTD_compressBound</name><argument_list>(<argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>outputBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>outputBuffer</name></expr></argument>, <argument><expr><name>maximumLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>size_t</name></type> <name>compressedSize</name> <init>= <expr><call><name>ZSTD_compress</name><argument_list>(<argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
												  <argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>maxlen</name></name></expr></argument>,
												  <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
												  <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
												  <argument><expr><name>compressionLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>compressedSize</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"zstd compression failed"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								  <operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(<argument><expr><name>compressedSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>compressedSize</name></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<case>case <expr><name>COMPRESSION_PG_LZ</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint64</name></type> <name>maximumLength</name> <init>= <expr><call><name>PGLZ_MAX_OUTPUT</name><argument_list>(<argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>+</operator>
								   <name>COLUMNAR_COMPRESS_HDRSZ</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>compressionResult</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>outputBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>outputBuffer</name></expr></argument>, <argument><expr><name>maximumLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int32</name></type> <name>compressedByteCount</name> <init>= <expr><call><name>pglz_compress</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>inputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
													  <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
													  <argument><expr><call><name>COLUMNAR_COMPRESS_RAWDATA</name><argument_list>(
														  <argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
													  <argument><expr><name>PGLZ_strategy_always</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>compressedByteCount</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>COLUMNAR_COMPRESS_SET_RAWSIZE</name><argument_list>(<argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>inputBuffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>SET_VARSIZE_COMPRESSED</name><argument_list>(<argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
									   <argument><expr><name>compressedByteCount</name> <operator>+</operator> <name>COLUMNAR_COMPRESS_HDRSZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>compressionResult</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>compressionResult</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>outputBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><name>compressionResult</name></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
 * DecompressBuffer decompresses the given buffer with the given compression
 * type. This function returns the buffer as-is when no compression is applied.
 */</comment>
<function><type><name>StringInfo</name></type>
<name>DecompressBuffer</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>,
				 <parameter><decl><type><name>CompressionType</name></type> <name>compressionType</name></decl></parameter>,
				 <parameter><decl><type><name>uint64</name></type> <name>decompressedSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>compressionType</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>COMPRESSION_NONE</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><name>buffer</name></expr>;</return>
		</block_content>}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CITUS_LIBLZ4</name></expr></cpp:if>
		<case>case <expr><name>COMPRESSION_LZ4</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>StringInfo</name></type> <name>decompressedBuffer</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>decompressedBuffer</name></expr></argument>, <argument><expr><name>decompressedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>int</name></type> <name>lz4DecompressSize</name> <init>= <expr><call><name>LZ4_decompress_safe</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
														<argument><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
														<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
														<argument><expr><name>decompressedSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>lz4DecompressSize</name> <operator>!=</operator> <name>decompressedSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot decompress the buffer"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Expected %lu bytes, but received %d bytes"</literal></expr></argument>,
										  <argument><expr><name>decompressedSize</name></expr></argument>, <argument><expr><name>lz4DecompressSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>decompressedSize</name></expr>;</expr_stmt>

			<return>return <expr><name>decompressedBuffer</name></expr>;</return>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBZSTD</name></expr></cpp:if>
		<case>case <expr><name>COMPRESSION_ZSTD</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>StringInfo</name></type> <name>decompressedBuffer</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>enlargeStringInfo</name><argument_list>(<argument><expr><name>decompressedBuffer</name></expr></argument>, <argument><expr><name>decompressedSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>size_t</name></type> <name>zstdDecompressSize</name> <init>= <expr><call><name>ZSTD_decompress</name><argument_list>(<argument><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
														<argument><expr><name>decompressedSize</name></expr></argument>,
														<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
														<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><call><name>ZSTD_isError</name><argument_list>(<argument><expr><name>zstdDecompressSize</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"zstd decompression failed"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<operator>(</operator><call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>ZSTD_getErrorName</name><argument_list>(
											   <argument><expr><name>zstdDecompressSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>zstdDecompressSize</name> <operator>!=</operator> <name>decompressedSize</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected decompressed size"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Expected %ld, received %ld"</literal></expr></argument>, <argument><expr><name>decompressedSize</name></expr></argument>,
										  <argument><expr><name>zstdDecompressSize</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>decompressedSize</name></expr>;</expr_stmt>

			<return>return <expr><name>decompressedBuffer</name></expr>;</return>
		</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

		<case>case <expr><name>COMPRESSION_PG_LZ</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type> <name>compressedDataSize</name> <init>= <expr><call><name>VARSIZE</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>COLUMNAR_COMPRESS_HDRSZ</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32</name></type> <name>decompressedDataSize</name> <init>= <expr><call><name>COLUMNAR_COMPRESS_RAWSIZE</name><argument_list>(<argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>compressedDataSize</name> <operator>+</operator> <name>COLUMNAR_COMPRESS_HDRSZ</name> <operator>!=</operator> <name><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot decompress the buffer"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Expected %u bytes, but received %u bytes"</literal></expr></argument>,
										  <argument><expr><name>compressedDataSize</name></expr></argument>, <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>decompressedData</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>decompressedDataSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>int32</name></type> <name>decompressedByteCount</name> <init>= <expr><call><name>pglz_decompress</name><argument_list>(<argument><expr><call><name>COLUMNAR_COMPRESS_RAWDATA</name><argument_list>(
															  <argument><expr><name><name>buffer</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>,
														  <argument><expr><name>compressedDataSize</name></expr></argument>,
														  <argument><expr><name>decompressedData</name></expr></argument>,
														  <argument><expr><name>decompressedDataSize</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>decompressedByteCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot decompress the buffer"</literal></expr></argument>)</argument_list></call><operator>,</operator>
								<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"compressed data is corrupted"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>StringInfo</name></type> <name>decompressedBuffer</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StringInfoData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>decompressedData</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>decompressedDataSize</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>decompressedBuffer</name><operator>-&gt;</operator><name>maxlen</name></name> <operator>=</operator> <name>decompressedDataSize</name></expr>;</expr_stmt>

			<return>return <expr><name>decompressedBuffer</name></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unexpected compression type: %d"</literal></expr></argument>, <argument><expr><name>compressionType</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
