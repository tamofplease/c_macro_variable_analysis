<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/columnar/columnar.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * columnar.c
 *
 * This file contains...
 *
 * Copyright (c) 2016, Citus Data, Inc.
 *
 * $Id$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/rel.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"citus_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar_tableam.h"</cpp:file></cpp:include>

<comment type="block">/* Default values for option parameters */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_STRIPE_ROW_COUNT</name></cpp:macro> <cpp:value>150000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_CHUNK_ROW_COUNT</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBZSTD</name></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_COMPRESSION_TYPE</name></cpp:macro> <cpp:value>COMPRESSION_ZSTD</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>HAVE_CITUS_LIBLZ4</name></expr></cpp:elif>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_COMPRESSION_TYPE</name></cpp:macro> <cpp:value>COMPRESSION_LZ4</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_COMPRESSION_TYPE</name></cpp:macro> <cpp:value>COMPRESSION_PG_LZ</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<decl_stmt><decl><type><name>int</name></type> <name>columnar_compression</name> <init>= <expr><name>DEFAULT_COMPRESSION_TYPE</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columnar_stripe_row_limit</name> <init>= <expr><name>DEFAULT_STRIPE_ROW_COUNT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columnar_chunk_group_row_limit</name> <init>= <expr><name>DEFAULT_CHUNK_ROW_COUNT</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>columnar_compression_level</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>columnar_compression_options</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>COMPRESSION_NONE</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"pglz"</literal></expr>, <expr><name>COMPRESSION_PG_LZ</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_CITUS_LIBLZ4</name></expr></cpp:if>
	<expr><block>{ <expr><literal type="string">"lz4"</literal></expr>, <expr><name>COMPRESSION_LZ4</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_LIBZSTD</name></expr></cpp:if>
	<expr><block>{ <expr><literal type="string">"zstd"</literal></expr>, <expr><name>COMPRESSION_ZSTD</name></expr>, <expr><name>false</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>void</name></type>
<name>columnar_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>columnar_init_gucs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>columnar_tableam_init</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>columnar_init_gucs</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(<argument><expr><literal type="string">"columnar.compression"</literal></expr></argument>,
							 <argument><expr><literal type="string">"Compression type for columnar."</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><operator>&amp;</operator><name>columnar_compression</name></expr></argument>,
							 <argument><expr><name>DEFAULT_COMPRESSION_TYPE</name></expr></argument>,
							 <argument><expr><name>columnar_compression_options</name></expr></argument>,
							 <argument><expr><name>PGC_USERSET</name></expr></argument>,
							 <argument><expr><literal type="number">0</literal></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"columnar.compression_level"</literal></expr></argument>,
							<argument><expr><literal type="string">"Compression level to be used with zstd."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>columnar_compression_level</name></expr></argument>,
							<argument><expr><literal type="number">3</literal></expr></argument>,
							<argument><expr><name>COMPRESSION_LEVEL_MIN</name></expr></argument>,
							<argument><expr><name>COMPRESSION_LEVEL_MAX</name></expr></argument>,
							<argument><expr><name>PGC_USERSET</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"columnar.stripe_row_limit"</literal></expr></argument>,
							<argument><expr><literal type="string">"Maximum number of tuples per stripe."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>columnar_stripe_row_limit</name></expr></argument>,
							<argument><expr><name>DEFAULT_STRIPE_ROW_COUNT</name></expr></argument>,
							<argument><expr><name>STRIPE_ROW_COUNT_MINIMUM</name></expr></argument>,
							<argument><expr><name>STRIPE_ROW_COUNT_MAXIMUM</name></expr></argument>,
							<argument><expr><name>PGC_USERSET</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(<argument><expr><literal type="string">"columnar.chunk_group_row_limit"</literal></expr></argument>,
							<argument><expr><literal type="string">"Maximum number of rows per chunk."</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>columnar_chunk_group_row_limit</name></expr></argument>,
							<argument><expr><name>DEFAULT_CHUNK_ROW_COUNT</name></expr></argument>,
							<argument><expr><name>CHUNK_ROW_COUNT_MINIMUM</name></expr></argument>,
							<argument><expr><name>CHUNK_ROW_COUNT_MAXIMUM</name></expr></argument>,
							<argument><expr><name>PGC_USERSET</name></expr></argument>,
							<argument><expr><literal type="number">0</literal></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>,
							<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ParseCompressionType converts a string to a compression type.
 * For compression algorithms that are invalid or not compiled, it
 * returns COMPRESSION_TYPE_INVALID.
 */</comment>
<function><type><name>CompressionType</name></type>
<name>ParseCompressionType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressionTypeString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>compressionTypeString</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>compressionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
		 <condition><expr><name><name>columnar_compression_options</name><index>[<expr><name>compressionIndex</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>compressionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>compressionName</name> <init>= <expr><name><name>columnar_compression_options</name><index>[<expr><name>compressionIndex</name></expr>]</index></name><operator>.</operator><name>name</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>compressionTypeString</name></expr></argument>, <argument><expr><name>compressionName</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name><name>columnar_compression_options</name><index>[<expr><name>compressionIndex</name></expr>]</index></name><operator>.</operator><name>val</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>COMPRESSION_TYPE_INVALID</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CompressionTypeStr returns string representation of a compression type.
 * For compression algorithms that are invalid or not compiled, it
 * returns NULL.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>CompressionTypeStr</name><parameter_list>(<parameter><decl><type><name>CompressionType</name></type> <name>requestedType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>compressionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init>
		 <condition><expr><name><name>columnar_compression_options</name><index>[<expr><name>compressionIndex</name></expr>]</index></name><operator>.</operator><name>name</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>compressionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CompressionType</name></type> <name>compressionType</name> <init>=
			<expr><name><name>columnar_compression_options</name><index>[<expr><name>compressionIndex</name></expr>]</index></name><operator>.</operator><name>val</name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>compressionType</name> <operator>==</operator> <name>requestedType</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name><name>columnar_compression_options</name><index>[<expr><name>compressionIndex</name></expr>]</index></name><operator>.</operator><name>name</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
