<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/array_type.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * array_type.c
 *
 * Utility functions for dealing with array types.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/array_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * DeconstructArrayObject takes in a single dimensional array, and deserializes
 * this array's members into an array of datum objects. The function then
 * returns this datum array.
 */</comment>
<function><type><name>Datum</name> <modifier>*</modifier></type>
<name>DeconstructArrayObject</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arrayObject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>datumArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>datumArrayNulls</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>datumArrayLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>typeByVal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>typeAlign</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>typeLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>arrayHasNull</name> <init>= <expr><call><name>ARR_HASNULL</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>arrayHasNull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"worker array object cannot contain null values"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>typeId</name> <init>= <expr><call><name>ARR_ELEMTYPE</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeByVal</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeAlign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>, <argument><expr><name>typeId</name></expr></argument>, <argument><expr><name>typeLength</name></expr></argument>, <argument><expr><name>typeByVal</name></expr></argument>, <argument><expr><name>typeAlign</name></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>datumArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datumArrayNulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>datumArrayLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>datumArray</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ArrayObjectCount takes in a single dimensional array, and returns the number
 * of elements in this array.
 */</comment>
<function><type><name>int32</name></type>
<name>ArrayObjectCount</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arrayObject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>dimensionCount</name> <init>= <expr><call><name>ARR_NDIM</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name> <modifier>*</modifier></type><name>dimensionLengthArray</name> <init>= <expr><call><name>ARR_DIMS</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dimensionCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* we currently allow split point arrays to have only one subarray */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>dimensionCount</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>arrayLength</name> <init>= <expr><call><name>ArrayGetNItems</name><argument_list>(<argument><expr><name>dimensionCount</name></expr></argument>, <argument><expr><name>dimensionLengthArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>arrayLength</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_ARRAY_SUBSCRIPT_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"worker array object cannot be empty"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>arrayLength</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DatumArrayToArrayType converts the provided Datum array (of the specified
 * length and type) into an ArrayType suitable for returning from a UDF.
 */</comment>
<function><type><name>ArrayType</name> <modifier>*</modifier></type>
<name>DatumArrayToArrayType</name><parameter_list>(<parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>datumArray</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>datumCount</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>datumTypeId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int16</name></type> <name>typeLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>typeByValue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>typeAlignment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><name>datumTypeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeByValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeAlignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arrayObject</name> <init>= <expr><call><name>construct_array</name><argument_list>(<argument><expr><name>datumArray</name></expr></argument>, <argument><expr><name>datumCount</name></expr></argument>, <argument><expr><name>datumTypeId</name></expr></argument>,
											 <argument><expr><name>typeLength</name></expr></argument>, <argument><expr><name>typeByValue</name></expr></argument>, <argument><expr><name>typeAlignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>arrayObject</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Converts ArrayType to List.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>IntegerArrayTypeToList</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arrayObject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>datumObjectArray</name> <init>= <expr><call><name>DeconstructArrayObject</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>arrayObjectCount</name> <init>= <expr><call><name>ArrayObjectCount</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>arrayObjectCount</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int32</name></type> <name>intObject</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>datumObjectArray</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name>intObject</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Converts Text ArrayType to Integer List.
 */</comment>
<function><type><specifier>extern</specifier> <name>List</name> <modifier>*</modifier></type>
<name>TextArrayTypeToIntegerList</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>arrayObject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>list</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>datumObjectArray</name> <init>= <expr><call><name>DeconstructArrayObject</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>arrayObjectCount</name> <init>= <expr><call><name>ArrayObjectCount</name><argument_list>(<argument><expr><name>arrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name>arrayObjectCount</name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>intAsStr</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><call><name>DatumGetTextP</name><argument_list>(<argument><expr><name><name>datumObjectArray</name><index>[<expr><name>index</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>list</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><call><name>pg_strtoint32</name><argument_list>(<argument><expr><name>intAsStr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>list</name></expr>;</return>
</block_content>}</block></function>
</unit>
