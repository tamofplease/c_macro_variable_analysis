<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/citus_copyfuncs.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * citus_copyfuncs.c
 *    Citus specific node copy functions
 *
 * Portions Copyright (c) 1996-2014, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 * Portions Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_nodefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>


<comment type="block">/*
 * Macros to simplify copying of different kinds of fields.  Use these
 * wherever possible to reduce the chance for silly typos.  Note that these
 * hard-wire the convention that the local variables in a Copy routine are
 * named 'newnode' and 'from'.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>CitusSetTag</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CitusNode</name> <modifier>*</modifier></type><name>citus_node</name> <init>= <expr><operator>(</operator><name>CitusNode</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>citus_node</name><operator>-&gt;</operator><name>citus_tag</name></name> <operator>=</operator> <name>tag</name></expr>;</expr_stmt>
	<return>return <expr><name>node</name></expr>;</return>
</block_content>}</block></function>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DECLARE_FROM_AND_NEW_NODE</name><parameter_list>(<parameter><type><name>nodeTypeName</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>nodeTypeName *newnode = \
		(nodeTypeName *) CitusSetTag((Node *) target_node, T_ ## nodeTypeName); \
	nodeTypeName *from = (nodeTypeName *) source_node</cpp:value></cpp:define>

<comment type="block">/* Copy a simple scalar field (int, float, bool, enum, etc) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SCALAR_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = from-&gt;fldname)</cpp:value></cpp:define>

<comment type="block">/* Copy a field that is a pointer to some kind of Node or Node tree */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_NODE_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = copyObject(from-&gt;fldname))</cpp:value></cpp:define>

<comment type="block">/* Copy a field that is a pointer to a C string, or perhaps NULL */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STRING_FIELD</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>(newnode-&gt;fldname = from-&gt;fldname ? pstrdup(from-&gt;fldname) : (char *) NULL)</cpp:value></cpp:define>

<comment type="block">/* Copy a node array. Target array is also allocated. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_NODE_ARRAY</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		int i = 0; \
		newnode-&gt;fldname = (type **) palloc(count * sizeof(type *)); \
		for (i = 0; i &lt; count; ++i) \
		{ \
			newnode-&gt;fldname[i] = copyObject(from-&gt;fldname[i]); \
		} \
	} \
	while (0)</cpp:value></cpp:define>

<comment type="block">/* Copy a scalar array. Target array is also allocated. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_SCALAR_ARRAY</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>, <parameter><type><name>type</name></type></parameter>, <parameter><type><name>count</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		int i = 0; \
		newnode-&gt;fldname = (type *) palloc(count * sizeof(type)); \
		for (i = 0; i &lt; count; ++i) \
		{ \
			newnode-&gt;fldname[i] = from-&gt;fldname[i]; \
		} \
	} \
	while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_STRING_LIST</name><parameter_list>(<parameter><type><name>fldname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		char *curString = NULL; \
		List *newList = NIL; \
		foreach_ptr(curString, from-&gt;fldname) { \
			char *newString = curString ? pstrdup(curString) : (char *) NULL; \
			newList = lappend(newList, newString); \
		} \
		newnode-&gt;fldname = newList; \
	} \
	while (0)</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CopyTaskQuery</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>copyJobInfo</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>taskList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dependentJobList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subqueryPushdown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>requiresCoordinatorEvaluation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>deferredPruning</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partitionKeyValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>localPlannedStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parametersInJobQueryResolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeJob</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>Job</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>copyJobInfo</name><argument_list>(<argument><expr><name>newnode</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeDistributedPlan</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>DistributedPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>planId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>modLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>expectResults</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>workerJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>combineQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>queryId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relationIdList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>targetRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>insertSelectQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>selectPlanForInsertSelect</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>insertSelectMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>intermediateResultIdPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>subPlanList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>usedSubPlanNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fastPathRouterPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>numberOfTimesExecuted</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>planningError</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeDistributedSubPlan</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>DistributedSubPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>subPlanId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>plan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeUsedDistributedSubPlan</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>UsedDistributedSubPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>subPlanId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>accessType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeShardInterval</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>ShardInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>storageType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>valueTypeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>valueTypeLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>valueByVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>minValueExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>maxValueExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>minValueExists</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>minValue</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>minValue</name></name></expr></argument>,
									  <argument><expr><name><name>from</name><operator>-&gt;</operator><name>valueByVal</name></name></expr></argument>,
									  <argument><expr><name><name>from</name><operator>-&gt;</operator><name>valueTypeLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>maxValueExists</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>newnode</name><operator>-&gt;</operator><name>maxValue</name></name> <operator>=</operator> <call><name>datumCopy</name><argument_list>(<argument><expr><name><name>from</name><operator>-&gt;</operator><name>maxValue</name></name></expr></argument>,
									  <argument><expr><name><name>from</name><operator>-&gt;</operator><name>valueByVal</name></name></expr></argument>,
									  <argument><expr><name><name>from</name><operator>-&gt;</operator><name>valueTypeLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeMapMergeJob</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>MapMergeJob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>copyJobInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newnode</name><operator>-&gt;</operator><name>job</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>from</name><operator>-&gt;</operator><name>job</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partitionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>partitionColumn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partitionCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>sortedShardIntervalArrayLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>arrayLength</name> <init>= <expr><name><name>from</name><operator>-&gt;</operator><name>sortedShardIntervalArrayLength</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* now build &amp; read sortedShardIntervalArray */</comment>
	<expr_stmt><expr><call><name>COPY_NODE_ARRAY</name><argument_list>(<argument><expr><name>sortedShardIntervalArray</name></expr></argument>, <argument><expr><name>ShardInterval</name></expr></argument>, <argument><expr><name>arrayLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>mapTaskList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>mergeTaskList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeShardPlacement</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>ShardPlacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>placementId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partitionMethod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>colocationGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>representativeValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeGroupShardPlacement</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>GroupShardPlacement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>placementId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeRelationShard</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>RelationShard</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeRelationRowLock</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>RelationRowLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>rowLockStrength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>CopyTaskQuery</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>newnode</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>from</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name><name>taskQuery</name><operator>.</operator><name>queryType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<switch>switch <condition>(<expr><name><name>from</name><operator>-&gt;</operator><name>taskQuery</name><operator>.</operator><name>queryType</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>TASK_QUERY_TEXT</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name><name>taskQuery</name><operator>.</operator><name>data</name><operator>.</operator><name>queryStringLazy</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>TASK_QUERY_OBJECT</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name><name>taskQuery</name><operator>.</operator><name>data</name><operator>.</operator><name>jobQueryReferenceForLazyDeparsing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>TASK_QUERY_TEXT_LIST</name></expr>:</case>
		<block>{<block_content>
			<expr_stmt><expr><call><name>COPY_STRING_LIST</name><argument_list>(<argument><expr><name><name>taskQuery</name><operator>.</operator><name>data</name><operator>.</operator><name>queryStringList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeTask</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>Task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>taskType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>taskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CopyTaskQuery</name><argument_list>(<argument><expr><name>newnode</name></expr></argument>, <argument><expr><name>from</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>anchorDistributedTableId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>anchorShardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>taskPlacementList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>dependentTaskList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partitionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>upstreamTaskId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>shardInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>assignmentConstrained</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>replicationModel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>modifyWithSubquery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relationShardList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>relationRowLockList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>rowValuesLists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>partiallyLocalOrRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>parametersInQueryStringResolved</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>tupleDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>queryCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>totalReceivedTupleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fetchedExplainAnalyzePlacementIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>fetchedExplainAnalyzePlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>fetchedExplainAnalyzeExecutionDuration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>isLocalTableModification</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>cannotBeExecutedInTransction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeLocalPlannedStatement</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>LocalPlannedStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>localGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_NODE_FIELD</name><argument_list>(<argument><expr><name>localPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>CopyNodeDeferredErrorMessage</name><parameter_list>(<parameter><decl><type><name>COPYFUNC_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DECLARE_FROM_AND_NEW_NODE</name><argument_list>(<argument><expr><name>DeferredErrorMessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_SCALAR_FIELD</name><argument_list>(<argument><expr><name>linenumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>COPY_STRING_FIELD</name><argument_list>(<argument><expr><name>functionname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
