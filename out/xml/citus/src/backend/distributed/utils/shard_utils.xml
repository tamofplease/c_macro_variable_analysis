<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/shard_utils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shard_utils.c
 *
 * This file contains functions to perform useful operations on shards.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgrprotos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/coordinator_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/relay_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_utils.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetLargestShardId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * GetTableLocalShardOid returns the oid of the shard from the given distributed
 * relation with the shardId.
 */</comment>
<function><type><name>Oid</name></type>
<name>GetTableLocalShardOid</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>citusTableOid</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>shardId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>citusTableName</name> <init>= <expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name>citusTableOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>citusTableName</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* construct shard relation name */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shardRelationName</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>citusTableName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AppendShardIdToName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shardRelationName</name></expr></argument>, <argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>citusTableSchemaOid</name> <init>= <expr><call><name>get_rel_namespace</name><argument_list>(<argument><expr><name>citusTableOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>shardRelationOid</name> <init>= <expr><call><name>get_relname_relid</name><argument_list>(<argument><expr><name>shardRelationName</name></expr></argument>, <argument><expr><name>citusTableSchemaOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>shardRelationOid</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetLongestShardName is a utility function that returns the name of the shard of a
 * table that has the longest name in terms of number of characters.
 *
 * Both the Oid and name of the table are required so we can create longest shard names
 * after a RENAME.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetLongestShardName</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>citusTableOid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>finalRelationName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>longestShardName</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>finalRelationName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardInterval</name> <init>= <expr><call><name>LoadShardIntervalWithLongestShardName</name><argument_list>(<argument><expr><name>citusTableOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AppendShardIdToName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>longestShardName</name></expr></argument>, <argument><expr><name><name>shardInterval</name><operator>-&gt;</operator><name>shardId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>longestShardName</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetLongestShardNameForLocalPartition is a utility function that creates a hypothetical shard
 * name for a partition table that is not distributed yet.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>GetLongestShardNameForLocalPartition</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>parentTableOid</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partitionRelationName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>longestShardName</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>partitionRelationName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type><name>cacheEntry</name> <init>= <expr><call><name>GetCitusTableCacheEntry</name><argument_list>(<argument><expr><name>parentTableOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>shardIntervalCount</name> <init>= <expr><name><name>cacheEntry</name><operator>-&gt;</operator><name>shardIntervalArrayLength</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>newShardId</name> <init>= <expr><call><name>GetLargestShardId</name><argument_list>()</argument_list></call> <operator>+</operator> <name>shardIntervalCount</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AppendShardIdToName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>longestShardName</name></expr></argument>, <argument><expr><name>newShardId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>longestShardName</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetLargestShardId returns the biggest shard id, and returns a 10^6 in case of failure
 * to get the last value from the sequence.
 */</comment>
<function><type><name>int</name></type>
<name>GetLargestShardId</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>savedUserId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>savedSecurityContext</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>savedUserId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><call><name>CitusExtensionOwner</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>sequenceName</name> <init>= <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>SHARDID_SEQUENCE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>sequenceId</name> <init>= <expr><call><name>ResolveRelationId</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>sequenceIdDatum</name> <init>= <expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>sequenceId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>volatile</specifier> <name>int64</name></type> <name>largestShardId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * pg_sequence_last_value() returns NULL if the sequence value is not yet used.
	 * DirectFunctionCall1() gives an ERROR message on NULL return values, and that's why we
	 * need a PG_TRY block.
	 */</comment>
	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>lastShardIdDatum</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>pg_sequence_last_value</name></expr></argument>,
													 <argument><expr><name>sequenceIdDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>largestShardId</name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>lastShardIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<comment type="block">/* assume that we have a shardId with 7 digits */</comment>
		<expr_stmt><expr><name>largestShardId</name> <operator>=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>savedUserId</name></expr></argument>, <argument><expr><name>savedSecurityContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>largestShardId</name></expr>;</return>
</block_content>}</block></function>
</unit>
