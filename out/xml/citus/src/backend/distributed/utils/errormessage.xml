<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/utils/errormessage.c"><comment type="block">/*
 * errormessage.c
 *	  Error handling related support functionality.
 *
 * Copyright (c) Citus Data, Inc.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/sha2.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/errormessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<comment type="block">/*
 * DeferredErrorInternal is a helper function for DeferredError().
 */</comment>
<function><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type>
<name>DeferredErrorInternal</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>detail</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hint</name></decl></parameter>,
					  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>linenumber</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionname</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>CitusMakeNode</name><argument_list>(<argument><expr><name>DeferredErrorMessage</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>message</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <name>message</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <name>detail</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <name>hint</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <name>filename</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>linenumber</name></name> <operator>=</operator> <name>linenumber</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>error</name><operator>-&gt;</operator><name>functionname</name></name> <operator>=</operator> <name>functionname</name></expr>;</expr_stmt>
	<return>return <expr><name>error</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RaiseDeferredErrorInternal is a helper function for RaiseDeferredError().
 */</comment>
<function><type><name>void</name></type>
<name>RaiseDeferredErrorInternal</name><parameter_list>(<parameter><decl><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>elevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>errorData</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ErrorData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>sqlerrcode</name></name> <operator>=</operator> <name><name>error</name><operator>-&gt;</operator><name>code</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>elevel</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>message</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>error</name><operator>-&gt;</operator><name>detail</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>detail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>error</name><operator>-&gt;</operator><name>hint</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>hint</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>hint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>filename</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name><name>error</name><operator>-&gt;</operator><name>filename</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>lineno</name></name> <operator>=</operator> <name><name>error</name><operator>-&gt;</operator><name>linenumber</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>funcname</name></name> <operator>=</operator> <name><name>error</name><operator>-&gt;</operator><name>functionname</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>errorData</name><operator>-&gt;</operator><name>assoc_context</name></name> <operator>=</operator> <name>ErrorContext</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ThrowErrorData</name><argument_list>(<argument><expr><name>errorData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
