<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/utils/type_utils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * type_utils.c
 *
 * Utility functions related to types.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/pqformat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/causal_clock.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_CLUSTER_CLOCK_ARGS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LDELIM</name></cpp:macro> <cpp:value>'('</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RDELIM</name></cpp:macro> <cpp:value>')'</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DELIM</name></cpp:macro> <cpp:value>','</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type> <name>cluster_clock_in_internal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>clockString</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_recv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_send</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * cluster_clock_in_internal generic routine to parse the cluster_clock format of (logical, counter),
 * (%lu, %u), in string format to ClusterClock struct internal format.
 */</comment>
<function><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type>
<name>cluster_clock_in_internal</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>clockString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>clockFields</name><index>[<expr><name>NUM_CLUSTER_CLOCK_ARGS</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numClockField</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>currentChar</name> <init>= <expr><name>clockString</name></expr></init></decl>;</init>
		 <condition><expr><operator>(</operator><operator>*</operator><name>currentChar</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>numClockField</name> <operator>&lt;</operator> <name>NUM_CLUSTER_CLOCK_ARGS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>currentChar</name> <operator>!=</operator>
																		<name>RDELIM</name><operator>)</operator></expr>;</condition>
		 <incr><expr><name>currentChar</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>*</operator><name>currentChar</name> <operator>==</operator> <name>DELIM</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>currentChar</name> <operator>==</operator> <name>LDELIM</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>numClockField</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>clockFields</name><index>[<expr><name>numClockField</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>currentChar</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>numClockField</name> <operator>&lt;</operator> <name>NUM_CLUSTER_CLOCK_ARGS</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><literal type="string">"cluster_clock"</literal></expr></argument>,
						<argument><expr><name>clockString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endingChar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int64</name></type> <name>logical</name> <init>= <expr><call><name>strtoul</name><argument_list>(<argument><expr><name><name>clockFields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endingChar</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>endingChar</name> <operator>!=</operator> <name>DELIM</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>logical</name> <operator>&gt;</operator> <name>MAX_LOGICAL</name><operator>)</operator> <operator>||</operator> <name>logical</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><literal type="string">"cluster_clock"</literal></expr></argument>,
						<argument><expr><name>clockString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int64</name></type> <name>counter</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name><name>clockFields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endingChar</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <operator>(</operator><operator>*</operator><name>endingChar</name> <operator>!=</operator> <name>RDELIM</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>counter</name> <operator>&gt;</operator> <name>MAX_COUNTER</name><operator>)</operator> <operator>||</operator> <name>counter</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_TEXT_REPRESENTATION</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid input syntax for type %s: \"%s\""</literal></expr></argument>,
						<argument><expr><literal type="string">"cluster_clock"</literal></expr></argument>,
						<argument><expr><name>clockString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ClusterClock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>logical</name></name> <operator>=</operator> <name>logical</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <name>counter</name></expr>;</expr_stmt>

	<return>return <expr><name>clusterClock</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_in converts the cstring input format to the ClusterClock type.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_in</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clockString</name> <init>= <expr><call><name>PG_GETARG_CSTRING</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><call><name>cluster_clock_in_internal</name><argument_list>(<argument><expr><name>clockString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_out converts the internal ClusterClock format to cstring output.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_out</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>clusterClock</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>clockString</name> <init>= <expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"(%lu,%u)"</literal></expr></argument>, <argument><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>,
								 <argument><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_CSTRING</name><argument_list>(<argument><expr><name>clockString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_recv converts external binary format to ClusterClock.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_recv</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>clockBuffer</name> <init>= <expr><operator>(</operator><name>StringInfo</name><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ClusterClock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>logical</name></name> <operator>=</operator> <call><name>pq_getmsgint64</name><argument_list>(<argument><expr><name>clockBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <call><name>pq_getmsgint</name><argument_list>(<argument><expr><name>clockBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>clusterClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_send converts ClusterClock to binary format.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_send</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfoData</name></type> <name>clockBuffer</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>pq_begintypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clockBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint64</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clockBuffer</name></expr></argument>, <argument><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pq_sendint32</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clockBuffer</name></expr></argument>, <argument><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BYTEA_P</name><argument_list>(<argument><expr><call><name>pq_endtypsend</name><argument_list>(<argument><expr><operator>&amp;</operator><name>clockBuffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*****************************************************************************
*       PUBLIC ROUTINES                                                     *
*****************************************************************************/</comment>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_lt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_le</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_eq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_ne</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_gt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_ge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>cluster_clock_logical</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/*
 * cluster_clock_cmp_internal generic compare routine, and must be used for all
 * operators, including Btree Indexes when comparing cluster_clock data type.
 * Return values are
 *   1 -- clock1 is &gt; clock2
 *   0 -- clock1 is = clock2
 *  -1 -- clock1 is &lt; clock2
 */</comment>
<function><type><name>int</name></type>
<name>cluster_clock_cmp_internal</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock1</name></decl></parameter>, <parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>clusterClock1</name> <operator>&amp;&amp;</operator> <name>clusterClock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>retcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Logical value takes precedence when comparing two clocks */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>clusterClock1</name><operator>-&gt;</operator><name>logical</name></name> <operator>!=</operator> <name><name>clusterClock2</name><operator>-&gt;</operator><name>logical</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>retcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>clusterClock1</name><operator>-&gt;</operator><name>logical</name></name> <operator>&gt;</operator> <name><name>clusterClock2</name><operator>-&gt;</operator><name>logical</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
		<return>return <expr><name>retcode</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Logical values are equal, let's compare ticks */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>clusterClock1</name><operator>-&gt;</operator><name>counter</name></name> <operator>!=</operator> <name><name>clusterClock2</name><operator>-&gt;</operator><name>counter</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>retcode</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>clusterClock1</name><operator>-&gt;</operator><name>counter</name></name> <operator>&gt;</operator> <name><name>clusterClock2</name><operator>-&gt;</operator><name>counter</name></name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
		<return>return <expr><name>retcode</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Ticks are equal too, return zero */</comment>
	<return>return <expr><name>retcode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_lt returns true if clock1 is less than clock2.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_lt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_le returns true if clock1 is less than or equal to clock2.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_le</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_eq returns true if clock1 is equal to clock2.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_eq</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_ne returns true if clock1 is not equal to clock2.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_ne</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_gt returns true if clock1 is greater than clock2.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_gt</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_ge returns true if clock1 is greater than or equal to clock2
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_ge</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_cmp returns 1 if clock1 is greater than clock2, returns -1 if
 * clock1 is less than clock2, and zero if they are equal.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_cmp</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT32</name><argument_list>(<argument><expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * cluster_clock_logical return the logical part from &lt;logical, counter&gt; type
 * clock, which is basically the epoch value in milliseconds.
 */</comment>
<function><type><name>Datum</name></type>
<name>cluster_clock_logical</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ParseClusterClockPGresult parses a ClusterClock remote result and returns the value or
 * returns 0 if the result is NULL.
 */</comment>
<function><type><name>ClusterClock</name> <modifier>*</modifier></type>
<name>ParseClusterClockPGresult</name><parameter_list>(<parameter><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>colIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>PQgetisnull</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resultString</name> <init>= <expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>cluster_clock_in_internal</name><argument_list>(<argument><expr><name>resultString</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
