<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/utils/jsonbutils.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_version_compat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_collation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/jsonbutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>


<comment type="block">/*
 * ExtractFieldJsonb gets value of fieldName from jsonbDoc and puts it
 * into result. If not found, returns false. Otherwise, returns true.
 * The field is returned as a Text* Datum if as_text is true, or a Jsonb*
 * Datum if as_text is false.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ExtractFieldJsonb</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonbDoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>as_text</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>pathArray</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <macro><name>CStringGetTextDatum</name><argument_list>(<argument>fieldName</argument>)</argument_list></macro> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>pathNulls</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><name>false</name></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>typeByValue</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type> <name>typeAlignment</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int16</name></type> <name>typeLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>dimensions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name><name>lowerbounds</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">1</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>get_typlenbyvalalign</name><argument_list>(<argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeByValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typeAlignment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>pathArrayObject</name> <init>= <expr><call><name>construct_md_array</name><argument_list>(<argument><expr><name>pathArray</name></expr></argument>, <argument><expr><name>pathNulls</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dimensions</name></expr></argument>,
													<argument><expr><name>lowerbounds</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><name>typeLength</name></expr></argument>,
													<argument><expr><name>typeByValue</name></expr></argument>, <argument><expr><name>typeAlignment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>pathDatum</name> <init>= <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>pathArrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name></type> <name>fmgrInfo</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>as_text</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><call><name>JsonbExtractPathTextFuncId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmgrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><call><name>JsonbExtractPathFuncId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmgrInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>functionCallInfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>functionCallInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fmgrInfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>DEFAULT_COLLATION_OID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
							 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fcSetArg</name><argument_list>(<argument><expr><name>functionCallInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>jsonbDoc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fcSetArg</name><argument_list>(<argument><expr><name>functionCallInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pathDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>result</name> <operator>=</operator> <call><name>FunctionCallInvoke</name><argument_list>(<argument><expr><name>functionCallInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>!</operator><name><name>functionCallInfo</name><operator>-&gt;</operator><name>isnull</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ExtractFieldBoolean gets value of fieldName from jsonbDoc, or returns
 * defaultValue if it doesn't exist.
 */</comment>
<function><type><name>bool</name></type>
<name>ExtractFieldBoolean</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonbDoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>jsonbDatum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>ExtractFieldJsonb</name><argument_list>(<argument><expr><name>jsonbDoc</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jsonbDatum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>defaultValue</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>boolDatum</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>jsonb_bool</name></expr></argument>, <argument><expr><name>jsonbDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>boolDatum</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ExtractFieldTextP gets value of fieldName as text* from jsonbDoc, or
 * returns NULL if it doesn't exist.
 */</comment>
<function><type><name>text</name> <modifier>*</modifier></type>
<name>ExtractFieldTextP</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonbDoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name>jsonbDatum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><call><name>ExtractFieldJsonb</name><argument_list>(<argument><expr><name>jsonbDoc</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jsonbDatum</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>DatumGetTextP</name><argument_list>(<argument><expr><name>jsonbDatum</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ExtractFieldJsonbDatum gets value of fieldName from jsonbDoc and puts it
 * into result. If not found, returns false. Otherwise, returns true.
 */</comment>
<function><type><name>bool</name></type>
<name>ExtractFieldJsonbDatum</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonbDoc</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldName</name></decl></parameter>, <parameter><decl><type><name>Datum</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>ExtractFieldJsonb</name><argument_list>(<argument><expr><name>jsonbDoc</name></expr></argument>, <argument><expr><name>fieldName</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
