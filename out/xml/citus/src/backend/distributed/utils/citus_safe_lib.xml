<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/citus_safe_lib.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * safe_lib.c
 *
 * This file contains all SafeXXXX helper functions that we implement to
 * replace missing xxxx_s functions implemented by safestringlib. It also
 * contains a constraint handler for use in both our SafeXXX and safestringlib
 * its xxxx_s functions.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_version_constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/stringinfo.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>citus_vsnprintf</name></cpp:macro> <cpp:value>pg_vsnprintf</cpp:value></cpp:define>


<comment type="block">/*
 * ereport_constraint_handler is a constraint handler that calls ereport. A
 * constraint handler is called whenever an error occurs in any of the
 * safestringlib xxxx_s functions or our SafeXXXX functions.
 *
 * More info on constraint handlers can be found here:
 * https://en.cppreference.com/w/c/error/set_constraint_handler_s
 */</comment>
<function><type><name>void</name></type>
<name>ereport_constraint_handler</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>,
						   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pointer</name></decl></parameter>,
						   <parameter><decl><type><name>errno_t</name></type> <name>error</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>message</name> <operator>&amp;&amp;</operator> <name>error</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Memory constraint error: %s (errno %d)"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>message</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Memory constraint error: %s"</literal></expr></argument>, <argument><expr><name>message</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>error</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Unknown function failed with memory constraint error (errno %d)"</literal></expr></argument>,
							<argument><expr><name>error</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INTERNAL_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator> <call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Unknown function failed with memory constraint error"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * SafeStringToInt64 converts a string containing a number to a int64. When it
 * fails it calls ereport.
 *
 * The different error cases are inspired by
 * https://stackoverflow.com/a/26083517/2570866
 */</comment>
<function><type><name>int64</name></type>
<name>SafeStringToInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name> <name>long</name></type> <name>number</name> <init>= <expr><call><name>strtoll</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>endptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int64, no digits found\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <name>LLONG_MIN</name><operator>)</operator> <operator>||</operator> <name>number</name> <operator>&lt;</operator> <name>INT64_MIN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int64, underflow occurred\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <name>LLONG_MAX</name><operator>)</operator> <operator>||</operator> <name>number</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int64, overflow occurred\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Error parsing %s as int64, base contains unsupported value\n"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int64, errno %d\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Error parsing %s as int64, aditional characters remain after int64\n"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>number</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * SafeStringToInt32 converts a string containing a number to a int32. When it
 * fails it calls ereport.
 *
 * The different error cases are inspired by
 * https://stackoverflow.com/a/26083517/2570866
 */</comment>
<function><type><name>int32</name></type>
<name>SafeStringToInt32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>number</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>endptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int32, no digits found\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <name>LONG_MIN</name><operator>)</operator> <operator>||</operator> <name>number</name> <operator>&lt;</operator> <name>INT32_MIN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int32, underflow occurred\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <name>LONG_MAX</name><operator>)</operator> <operator>||</operator> <name>number</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int32, overflow occurred\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Error parsing %s as int32, base contains unsupported value\n"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as int32, errno %d\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Error parsing %s as int32, aditional characters remain after int32\n"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>number</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * SafeStringToUint64 converts a string containing a number to a uint64. When it
 * fails it calls ereport.
 *
 * The different error cases are inspired by
 * https://stackoverflow.com/a/26083517/2570866
 */</comment>
<function><type><name>uint64</name></type>
<name>SafeStringToUint64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>endptr</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>number</name> <init>= <expr><call><name>strtoull</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>endptr</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>endptr</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as uint64, no digits found\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><operator>(</operator><name>errno</name> <operator>==</operator> <name>ERANGE</name> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <name>ULLONG_MAX</name><operator>)</operator> <operator>||</operator> <name>number</name> <operator>&gt;</operator> <name>UINT64_MAX</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as uint64, overflow occurred\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <name>EINVAL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Error parsing %s as uint64, base contains unsupported value\n"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>number</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><name>errno</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Error parsing %s as uint64, errno %d\n"</literal></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>errno</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>str</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>endptr</name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Error parsing %s as uint64, aditional characters remain after uint64\n"</literal></expr></argument>,
							<argument><expr><name>str</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>number</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * SafeQsort is the non reentrant version of qsort (qsort vs qsort_r), but it
 * does the input checks required for qsort_s:
 *  1. count or size is greater than RSIZE_MAX
 *  2. ptr or comp is a null pointer (unless count is zero)
 * source: https://en.cppreference.com/w/c/algorithm/qsort
 *
 * When it hits these errors it calls the ereport_constraint_handler.
 *
 * NOTE: this functions calls pg_qsort instead of stdlib qsort.
 */</comment>
<function><type><name>void</name></type>
<name>SafeQsort</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>size</name></decl></parameter>,
		  <parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>comp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>RSIZE_MAX_MEM</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeQsort: count exceeds max"</literal></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>RSIZE_MAX_MEM</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeQsort: size exceeds max"</literal></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeQsort: ptr is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeQsort: comp is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>pg_qsort</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * SafeBsearch is a non reentrant version of bsearch, but it does the
 * input checks required for bsearch_s:
 *  1. count or size is greater than RSIZE_MAX
 *  2. key, ptr or comp is a null pointer (unless count is zero)
 * source: https://en.cppreference.com/w/c/algorithm/bsearch
 *
 * When it hits these errors it calls the ereport_constraint_handler.
 *
 * NOTE: this functions calls pg_qsort instead of stdlib qsort.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>SafeBsearch</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>count</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>size</name></decl></parameter>,
			<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>comp</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>count</name> <operator>&gt;</operator> <name>RSIZE_MAX_MEM</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeBsearch: count exceeds max"</literal></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>RSIZE_MAX_MEM</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeBsearch: size exceeds max"</literal></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeBsearch: key is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeBsearch: ptr is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>comp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeBsearch: comp is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Explanation of IGNORE-BANNED:
	 * bsearch is safe to use here since we check the same thing bsearch_s
	 * does. We cannot use bsearch_s as a replacement, since it's not available
	 * in safestringlib.
	 */</comment>
	<return>return <expr><call><name>bsearch</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>count</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>)</argument_list></call></expr>;</return> <comment type="block">/* IGNORE-BANNED */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * SafeSnprintf is a safer replacement for snprintf, which is needed since
 * safestringlib doesn't implement snprintf_s.
 *
 * The required failure modes of snprint_s are as follows (in parentheses if
 * this implements it and how):
 * 1. the conversion specifier %n is present in format (yes, %n is not
 *    supported by pg_vsnprintf)
 * 2. any of the arguments corresponding to %s is a null pointer (half, checked
 *    in postgres when asserts are enabled)
 * 3. format or buffer is a null pointer (yes, checked by this function)
 * 4. bufsz is zero or greater than RSIZE_MAX (yes, checked by this function)
 * 5. encoding errors occur in any of string and character conversion
 *    specifiers (no clue what postgres does in this case)
 * source: https://en.cppreference.com/w/c/io/fprintf
 */</comment>
<function><type><name>int</name></type>
<name>SafeSnprintf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>bufsz</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>restrict</specifier></type> <name>format</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* failure mode 3 */</comment>
	<if_stmt><if>if <condition>(<expr><name>buffer</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeSnprintf: buffer is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>format</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeSnprintf: format is NULL"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* failure mode 4 */</comment>
	<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeSnprintf: bufsz is 0"</literal></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>bufsz</name> <operator>&gt;</operator> <name>RSIZE_MAX_STR</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"SafeSnprintf: bufsz exceeds max"</literal></expr></argument>,
								   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>va_list</name></type> <name>args</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>args</name></expr></argument>, <argument><expr><name>format</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><call><name>citus_vsnprintf</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bufsz</name></expr></argument>, <argument><expr><name>format</name></expr></argument>, <argument><expr><name>args</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>args</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
