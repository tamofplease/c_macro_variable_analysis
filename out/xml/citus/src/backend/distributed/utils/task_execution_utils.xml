<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/utils/task_execution_utils.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_version_constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_custom_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/deparse_shard_query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/distributed_execution_locks.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/hash_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_dist_partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/resource_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/subplan_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/task_execution_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/timestamp.h"</cpp:file></cpp:include>

<comment type="block">/* TaskMapKey is used as a key in task hash */</comment>
<typedef>typedef <type><struct>struct <name>TaskMapKey</name>
<block>{
	<decl_stmt><decl><type><name>TaskType</name></type> <name>taskType</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>taskId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>jobId</name></decl>;</decl_stmt>
}</block></struct></type> <name>TaskMapKey</name>;</typedef>


<comment type="block">/*
 * TaskMapEntry is used as entry in task hash. We need to keep a pointer
 * of the task in the entry.
 */</comment>
<typedef>typedef <type><struct>struct <name>TaskMapEntry</name>
<block>{
	<decl_stmt><decl><type><name>TaskMapKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
}</block></struct></type> <name>TaskMapEntry</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>Task</name> <modifier>*</modifier></type> <name>TaskHashEnter</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>taskHash</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>Task</name> <modifier>*</modifier></type> <name>TaskHashLookup</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>trackerHash</name></decl></parameter>, <parameter><decl><type><name>TaskType</name></type> <name>taskType</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>jobId</name></decl></parameter>,
							 <parameter><decl><type><name>uint32</name></type> <name>taskId</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * CreateTaskListForJobTree visits all tasks in the job tree (by following dependentTaskList),
 * starting with the given job's task list. The function then returns the list.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>CreateTaskListForJobTree</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>jobTaskList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>topLevelTaskHashSize</name> <init>= <expr><literal type="number">32</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>taskHashSize</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>jobTaskList</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>topLevelTaskHashSize</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert_valid_hash_key3</name><argument_list>(<argument><expr><name>TaskMapKey</name></expr></argument>, <argument><expr><name>taskType</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>taskHash</name> <init>= <expr><call><name>CreateSimpleHashWithSize</name><argument_list>(<argument><expr><name>TaskMapKey</name></expr></argument>, <argument><expr><name>TaskMapEntry</name></expr></argument>, <argument><expr><name>taskHashSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We walk over the task tree using breadth-first search. For the search, we
	 * first queue top level tasks in the task tree.
	 */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>taskQueue</name> <init>= <expr><call><name>list_copy</name><argument_list>(<argument><expr><name>jobTaskList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>taskQueue</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* pop first element from the task queue */</comment>
		<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><operator>(</operator><name>Task</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name>taskQueue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>taskQueue</name> <operator>=</operator> <call><name>list_delete_first</name><argument_list>(<argument><expr><name>taskQueue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>taskList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>taskList</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependendTaskList</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>dependentTaskList</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Push task node's children into the task queue, if and only if
		 * they're not already there. As task dependencies have to form a
		 * directed-acyclic-graph and are processed in a breadth-first search
		 * we can never re-encounter nodes we've already processed.
		 *
		 * While we're checking this, we can also fix the problem that
		 * copyObject() might have duplicated nodes in the graph - if a node
		 * isn't pushed to the graph because it is already planned to be
		 * visited, we can simply replace it with the copy. Note that, here
		 * we only consider dependend tasks. Since currently top level tasks
		 * cannot be on any dependend task list, we do not check them for duplicates.
		 *
		 * taskHash is used to reduce the complexity of keeping track of
		 * the tasks that are already encountered.
		 */</comment>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>dependentTaskCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<macro><name>foreach</name><argument_list>(<argument>dependentTaskCell</argument>, <argument>dependendTaskList</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>dependendTask</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>dependentTaskCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>dependendTaskInHash</name> <init>= <expr><call><name>TaskHashLookup</name><argument_list>(<argument><expr><name>taskHash</name></expr></argument>,
													   <argument><expr><name><name>dependendTask</name><operator>-&gt;</operator><name>taskType</name></name></expr></argument>,
													   <argument><expr><name><name>dependendTask</name><operator>-&gt;</operator><name>jobId</name></name></expr></argument>,
													   <argument><expr><name><name>dependendTask</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * If the dependend task encountered for the first time, add it to the hash.
			 * Also, add this task to the task queue. Note that, we do not need to
			 * add the tasks to the queue which are already encountered, because
			 * they are already added to the queue.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>dependendTaskInHash</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>dependendTaskInHash</name> <operator>=</operator> <call><name>TaskHashEnter</name><argument_list>(<argument><expr><name>taskHash</name></expr></argument>, <argument><expr><name>dependendTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>taskQueue</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>taskQueue</name></expr></argument>, <argument><expr><name>dependendTaskInHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* update dependentTaskList element to the one which is in the hash */</comment>
			<expr_stmt><expr><call><name>lfirst</name><argument_list>(<argument><expr><name>dependentTaskCell</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>dependendTaskInHash</name></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></while>

	<return>return <expr><name>taskList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TaskHashEnter creates a reference to the task entry in the given task
 * hash. The function errors-out if the same key exists multiple times.
 */</comment>
<function><type><specifier>static</specifier> <name>Task</name> <modifier>*</modifier></type>
<name>TaskHashEnter</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>taskHash</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>handleFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TaskMapKey</name></type> <name>taskKey</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taskKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TaskMapKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskKey</name><operator>.</operator><name>taskType</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>taskType</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskKey</name><operator>.</operator><name>jobId</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>jobId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskKey</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>taskId</name></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hashKey</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>taskKey</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TaskMapEntry</name> <modifier>*</modifier></type><name>taskInTheHash</name> <init>= <expr><operator>(</operator><name>TaskMapEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>taskHash</name></expr></argument>, <argument><expr><name>hashKey</name></expr></argument>,
															   <argument><expr><name>HASH_ENTER</name></expr></argument>,
															   <argument><expr><operator>&amp;</operator><name>handleFound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* if same node appears twice, we error-out */</comment>
	<if_stmt><if>if <condition>(<expr><name>handleFound</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"multiple entries for task: \"%d:"</literal> <name>UINT64_FORMAT</name> <literal type="string">":%u\""</literal></expr></argument>,
							   <argument><expr><name><name>task</name><operator>-&gt;</operator><name>taskType</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>jobId</name></name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>taskId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* save the pointer to the original task in the hash */</comment>
	<expr_stmt><expr><name><name>taskInTheHash</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>

	<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TaskHashLookup looks for the tasks that corresponds to the given
 * taskType, jobId and taskId, and returns the found task, NULL otherwise.
 */</comment>
<function><type><specifier>static</specifier> <name>Task</name> <modifier>*</modifier></type>
<name>TaskHashLookup</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>taskHash</name></decl></parameter>, <parameter><decl><type><name>TaskType</name></type> <name>taskType</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>jobId</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>taskId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>handleFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TaskMapKey</name></type> <name>taskKey</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>taskKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TaskMapKey</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskKey</name><operator>.</operator><name>taskType</name></name> <operator>=</operator> <name>taskType</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskKey</name><operator>.</operator><name>jobId</name></name> <operator>=</operator> <name>jobId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskKey</name><operator>.</operator><name>taskId</name></name> <operator>=</operator> <name>taskId</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>hashKey</name> <init>= <expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>taskKey</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TaskMapEntry</name> <modifier>*</modifier></type><name>taskEntry</name> <init>= <expr><operator>(</operator><name>TaskMapEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>taskHash</name></expr></argument>, <argument><expr><name>hashKey</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>,
														   <argument><expr><operator>&amp;</operator><name>handleFound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>taskEntry</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>task</name> <operator>=</operator> <name><name>taskEntry</name><operator>-&gt;</operator><name>task</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>task</name></expr>;</return>
</block_content>}</block></function>
</unit>
