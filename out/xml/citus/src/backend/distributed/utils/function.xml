<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/utils/function.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * function.c
 *
 * Utility functions for dealing with functions.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * GetFunctionInfo first resolves the operator for the given data type, access
 * method, and support procedure. The function then uses the resolved operator's
 * identifier to fill in a function manager object, and returns this object.
 */</comment>
<function><type><name>FmgrInfo</name> <modifier>*</modifier></type>
<name>GetFunctionInfo</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>typeId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>accessMethodId</name></decl></parameter>, <parameter><decl><type><name>int16</name></type> <name>procedureId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>functionInfo</name> <init>= <expr><operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* get default operator class from pg_opclass for datum type */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>operatorClassId</name> <init>= <expr><call><name>GetDefaultOpClass</name><argument_list>(<argument><expr><name>typeId</name></expr></argument>, <argument><expr><name>accessMethodId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>operatorFamilyId</name> <init>= <expr><call><name>get_opclass_family</name><argument_list>(<argument><expr><name>operatorClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>operatorClassInputType</name> <init>= <expr><call><name>get_opclass_input_type</name><argument_list>(<argument><expr><name>operatorClassId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>operatorId</name> <init>= <expr><call><name>get_opfamily_proc</name><argument_list>(<argument><expr><name>operatorFamilyId</name></expr></argument>, <argument><expr><name>operatorClassInputType</name></expr></argument>,
									   <argument><expr><name>operatorClassInputType</name></expr></argument>, <argument><expr><name>procedureId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>operatorId</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find function for data typeId %u"</literal></expr></argument>, <argument><expr><name>typeId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* fill in the FmgrInfo struct using the operatorId */</comment>
	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>operatorId</name></expr></argument>, <argument><expr><name>functionInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>functionInfo</name></expr>;</return>
</block_content>}</block></function>
</unit>
