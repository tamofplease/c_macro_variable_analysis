<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/utils/param_utils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * param_utils.c
 *	  Utilities to process paramaters.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/bitmapset.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodeFuncs.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/parsenodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/params.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/primnodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;nodes/nodes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/param_utils.h"</cpp:file></cpp:include>

<comment type="block">/*
 * IsExternParamUsedInQuery returns true if the passed in paramId
 * is used in the query, false otherwise.
 */</comment>
<function><type><name>bool</name></type>
<name>GetParamsUsedInQuery</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><name>Bitmapset</name> <modifier>*</modifier><modifier>*</modifier></type><name>paramBitmap</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>expression</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>expression</name></expr></argument>, <argument><expr><name>Param</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Param</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>(</operator><name>Param</name> <operator>*</operator><operator>)</operator> <name>expression</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>paramId</name> <init>= <expr><name><name>param</name><operator>-&gt;</operator><name>paramid</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* only care about user supplied parameters */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>paramkind</name></name> <operator>!=</operator> <name>PARAM_EXTERN</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Found a parameter, mark it in the bitmap and continue */</comment>
		<expr_stmt><expr><operator>*</operator><name>paramBitmap</name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><operator>*</operator><name>paramBitmap</name></expr></argument>, <argument><expr><name>paramId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Continue searching */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* keep traversing */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>expression</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>expression</name></expr></argument>,
								 <argument><expr><name>GetParamsUsedInQuery</name></expr></argument>,
								 <argument><expr><name>paramBitmap</name></expr></argument>,
								 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>expression</name></expr></argument>,
									  <argument><expr><name>GetParamsUsedInQuery</name></expr></argument>,
									  <argument><expr><name>paramBitmap</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * MarkUnreferencedExternParams marks parameter's type to zero if the
 * parameter is not used in the query.
 */</comment>
<function><type><name>void</name></type>
<name>MarkUnreferencedExternParams</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><name>ParamListInfo</name></type> <name>boundParams</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>parameterCount</name> <init>= <expr><name><name>boundParams</name><operator>-&gt;</operator><name>numParams</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>paramBitmap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Fetch all parameters used in the query */</comment>
	<expr_stmt><expr><call><name>GetParamsUsedInQuery</name><argument_list>(<argument><expr><name>expression</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>paramBitmap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Check for any missing parameters */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>parameterNum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>parameterNum</name> <operator>&lt;=</operator> <name>parameterCount</name></expr>;</condition> <incr><expr><name>parameterNum</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>parameterNum</name></expr></argument>, <argument><expr><name>paramBitmap</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>boundParams</name><operator>-&gt;</operator><name>params</name><index>[<expr><name>parameterNum</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>ptype</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
