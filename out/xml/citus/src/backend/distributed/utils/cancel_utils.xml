<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/cancel_utils.c"><comment type="block">/*
 * cancel_utils.c
 *
 * Utilities related to query cancellation
 *
 * Copyright (c) Citus Data, Inc.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/cancel_utils.h"</cpp:file></cpp:include>


<comment type="block">/*
 * IsHoldOffCancellationReceived returns true if a cancel signal
 * was sent and HOLD_INTERRUPTS was called prior to this. The motivation
 * here is that since our queries can take a long time, in some places
 * we do not want to wait even if HOLD_INTERRUPTS was called.
 */</comment>
<function><type><name>bool</name></type>
<name>IsHoldOffCancellationReceived</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <expr><name>InterruptHoldoffCount</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>QueryCancelPending</name> <operator>||</operator> <name>ProcDiePending</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
