<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/citus_depended_object.c"><comment type="block">/*
 * citus_depended_object.c
 *
 * Implements exposed functions related to hiding citus depended objects.
 *
 * Copyright (c) Citus Data, Inc.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_aggregate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_amproc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attrdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_depend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_operator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opclass.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_opfamily.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_rewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_template.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_depended_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shared_library_init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/large_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>

<comment type="block">/*
 * GUC hides any objects, which depends on citus extension, from pg meta class queries,
 * it is intended to be used in vanilla tests to not break postgres test logs
 */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>HideCitusDependentObjects</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type> <name>CreateCitusDependentObjectExpr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgMetaTableVarno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgMetaTableOid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>GetCitusDependedObjectArgs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgMetaTableVarno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgMetaTableOid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>AlterRoleSetStatementContainsAll</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>HasDropCommandViolatesOwnership</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>AnyObjectViolatesOwnership</name><parameter_list>(<parameter><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>dropStmt</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * IsPgLocksTable returns true if RTE is pg_locks table.
 */</comment>
<function><type><name>bool</name></type>
<name>IsPgLocksTable</name><parameter_list>(<parameter><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rte</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>pgLocksId</name> <init>= <expr><call><name>get_relname_relid</name><argument_list>(<argument><expr><literal type="string">"pg_locks"</literal></expr></argument>, <argument><expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><literal type="string">"pg_catalog"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name><name>rte</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>pgLocksId</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * SetLocalHideCitusDependentObjectsDisabledWhenAlreadyEnabled disables the GUC HideCitusDependentObjects
 * if only it is enabled for local transaction.
 */</comment>
<function><type><name>void</name></type>
<name>SetLocalHideCitusDependentObjectsDisabledWhenAlreadyEnabled</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>HideCitusDependentObjects</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>set_config_option</name><argument_list>(<argument><expr><literal type="string">"citus.hide_citus_dependent_objects"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>,
					  <argument><expr><operator>(</operator><ternary><condition><expr><call><name>superuser</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>PGC_SUSET</name></expr> </then><else>: <expr><name>PGC_USERSET</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>PGC_S_SESSION</name></expr></argument>,
					  <argument><expr><name>GUC_ACTION_LOCAL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * SetLocalClientMinMessagesIfRunningPGTests sets client_min_message locally to the given value
 * if EnableUnsupportedFeatureMessages is set to false.
 */</comment>
<function><type><name>void</name></type>
<name>SetLocalClientMinMessagesIfRunningPGTests</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>clientMinMessageLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>EnableUnsupportedFeatureMessages</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientMinMessageLevelName</name> <init>= <expr><call><name>GetClientMinMessageLevelNameForValue</name><argument_list>(
		<argument><expr><name>clientMinMessageLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>set_config_option</name><argument_list>(<argument><expr><literal type="string">"client_min_messages"</literal></expr></argument>, <argument><expr><name>clientMinMessageLevelName</name></expr></argument>,
					  <argument><expr><operator>(</operator><ternary><condition><expr><call><name>superuser</name><argument_list>()</argument_list></call></expr> ?</condition><then> <expr><name>PGC_SUSET</name></expr> </then><else>: <expr><name>PGC_USERSET</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>PGC_S_SESSION</name></expr></argument>,
					  <argument><expr><name>GUC_ACTION_LOCAL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * HideCitusDependentObjectsOnQueriesOfPgMetaTables adds a NOT is_citus_depended_object(oid, oid) expr
 * to the quals of meta class RTEs that we are interested in.
 */</comment>
<function><type><name>bool</name></type>
<name>HideCitusDependentObjectsOnQueriesOfPgMetaTables</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CitusHasBeenLoaded</name><argument_list>()</argument_list></call> <operator>||</operator> <operator>!</operator><name>HideCitusDependentObjects</name> <operator>||</operator> <name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>Query</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>queryContext</name> <init>= <expr><call><name>GetMemoryChunkContext</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * We process the whole rtable rather than visiting individual RangeTblEntry's
		 * in the walker, since we need to know the varno to generate the right
		 * filter.
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>varno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rangeTableEntry</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

		<macro><name>foreach_ptr</name><argument_list>(<argument>rangeTableEntry</argument>, <argument>query-&gt;rtable</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><name>varno</name><operator>++</operator></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>rangeTableEntry</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_RELATION</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* make sure the expression is in the right memory context */</comment>
				<decl_stmt><decl><type><name>MemoryContext</name></type> <name>originalContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>queryContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<decl_stmt><decl><type><name>Oid</name></type> <name>metaTableOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

				<comment type="block">/*
				 * add NOT is_citus_depended_object(oid, oid) to the quals
				 * of the RTE if it is a pg meta table that we are interested in.
				 */</comment>
				<switch>switch <condition>(<expr><name><name>rangeTableEntry</name><operator>-&gt;</operator><name>relid</name></name></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/* pg_class */</comment>
					<case>case <expr><name>RelationRelationId</name></expr>:</case>

					<comment type="block">/* pg_proc */</comment>
					<case>case <expr><name>ProcedureRelationId</name></expr>:</case>

					<comment type="block">/* pg_am */</comment>
					<case>case <expr><name>AccessMethodRelationId</name></expr>:</case>

					<comment type="block">/* pg_type */</comment>
					<case>case <expr><name>TypeRelationId</name></expr>:</case>

					<comment type="block">/* pg_enum */</comment>
					<case>case <expr><name>EnumRelationId</name></expr>:</case>

					<comment type="block">/* pg_event_trigger */</comment>
					<case>case <expr><name>EventTriggerRelationId</name></expr>:</case>

					<comment type="block">/* pg_trigger */</comment>
					<case>case <expr><name>TriggerRelationId</name></expr>:</case>

					<comment type="block">/* pg_rewrite */</comment>
					<case>case <expr><name>RewriteRelationId</name></expr>:</case>

					<comment type="block">/* pg_attrdef */</comment>
					<case>case <expr><name>AttrDefaultRelationId</name></expr>:</case>

					<comment type="block">/* pg_constraint */</comment>
					<case>case <expr><name>ConstraintRelationId</name></expr>:</case>

					<comment type="block">/* pg_ts_config */</comment>
					<case>case <expr><name>TSConfigRelationId</name></expr>:</case>

					<comment type="block">/* pg_ts_template */</comment>
					<case>case <expr><name>TSTemplateRelationId</name></expr>:</case>

					<comment type="block">/* pg_ts_dict */</comment>
					<case>case <expr><name>TSDictionaryRelationId</name></expr>:</case>

					<comment type="block">/* pg_language */</comment>
					<case>case <expr><name>LanguageRelationId</name></expr>:</case>

					<comment type="block">/* pg_namespace */</comment>
					<case>case <expr><name>NamespaceRelationId</name></expr>:</case>

					<comment type="block">/* pg_sequence */</comment>
					<case>case <expr><name>SequenceRelationId</name></expr>:</case>

					<comment type="block">/* pg_statistic */</comment>
					<case>case <expr><name>StatisticRelationId</name></expr>:</case>

					<comment type="block">/* pg_attribute */</comment>
					<case>case <expr><name>AttributeRelationId</name></expr>:</case>

					<comment type="block">/* pg_index */</comment>
					<case>case <expr><name>IndexRelationId</name></expr>:</case>

					<comment type="block">/* pg_operator */</comment>
					<case>case <expr><name>OperatorRelationId</name></expr>:</case>

					<comment type="block">/* pg_opclass */</comment>
					<case>case <expr><name>OperatorClassRelationId</name></expr>:</case>

					<comment type="block">/* pg_opfamily */</comment>
					<case>case <expr><name>OperatorFamilyRelationId</name></expr>:</case>

					<comment type="block">/* pg_amop */</comment>
					<case>case <expr><name>AccessMethodOperatorRelationId</name></expr>:</case>

					<comment type="block">/* pg_amproc */</comment>
					<case>case <expr><name>AccessMethodProcedureRelationId</name></expr>:</case>

					<comment type="block">/* pg_aggregate */</comment>
					<case>case <expr><name>AggregateRelationId</name></expr>:</case>
					<block>{<block_content>
						<expr_stmt><expr><name>metaTableOid</name> <operator>=</operator> <name><name>rangeTableEntry</name><operator>-&gt;</operator><name>relid</name></name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block>

					<default>default:</default>
					<block>{<block_content>
						<expr_stmt><expr><name>metaTableOid</name> <operator>=</operator> <name>InvalidOid</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block>
				</block_content>}</block></switch>

				<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>metaTableOid</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<comment type="block">/*
					 * We found a valid pg meta class in query,
					 * so we assert below conditions.
					 */</comment>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>jointree</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>query</name><operator>-&gt;</operator><name>jointree</name><operator>-&gt;</operator><name>fromlist</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

					<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>citusDependentObjExpr</name> <init>=
						<expr><call><name>CreateCitusDependentObjectExpr</name><argument_list>(<argument><expr><name>varno</name></expr></argument>, <argument><expr><name>metaTableOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<comment type="block">/*
					 * We do not use security quals because a postgres vanilla test fails
					 * with a change of order for its result.
					 */</comment>
					<expr_stmt><expr><name><name>query</name><operator>-&gt;</operator><name>jointree</name><operator>-&gt;</operator><name>quals</name></name> <operator>=</operator> <call><name>make_and_qual</name><argument_list>(
						<argument><expr><name><name>query</name><operator>-&gt;</operator><name>jointree</name><operator>-&gt;</operator><name>quals</name></name></expr></argument>, <argument><expr><name>citusDependentObjExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>

				<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>originalContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<return>return <expr><call><name>query_tree_walker</name><argument_list>(<argument><expr><operator>(</operator><name>Query</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></argument>,
								 <argument><expr><name>HideCitusDependentObjectsOnQueriesOfPgMetaTables</name></expr></argument>,
								 <argument><expr><name>context</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><call><name>expression_tree_walker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>HideCitusDependentObjectsOnQueriesOfPgMetaTables</name></expr></argument>,
								  <argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CreateCitusDependentObjectExpr constructs an expression of the form:
 * NOT pg_catalog.is_citus_depended_object(oid, oid)
 */</comment>
<function><type><specifier>static</specifier> <name>Node</name> <modifier>*</modifier></type>
<name>CreateCitusDependentObjectExpr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgMetaTableVarno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgMetaTableOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* build the call to read_intermediate_result */</comment>
	<decl_stmt><decl><type><name>FuncExpr</name> <modifier>*</modifier></type><name>funcExpr</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>FuncExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>funcid</name></name> <operator>=</operator> <call><name>CitusDependentObjectFuncId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>funcretset</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>funcvariadic</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>funcformat</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>funccollid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>inputcollid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>funcExpr</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>GetCitusDependedObjectArgs</name><argument_list>(<argument><expr><name>pgMetaTableVarno</name></expr></argument>, <argument><expr><name>pgMetaTableOid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>BoolExpr</name> <modifier>*</modifier></type><name>notExpr</name> <init>= <expr><call><name>makeNode</name><argument_list>(<argument><expr><name>BoolExpr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>notExpr</name><operator>-&gt;</operator><name>boolop</name></name> <operator>=</operator> <name>NOT_EXPR</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>notExpr</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><name>funcExpr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>notExpr</name><operator>-&gt;</operator><name>location</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>notExpr</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetCitusDependedObjectArgs returns func arguments for pg_catalog.is_citus_depended_object
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>GetCitusDependedObjectArgs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pgMetaTableVarno</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgMetaTableOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * set attribute number for the oid, which we are insterest in, inside pg meta tables.
	 * We are accessing the 1. col(their own oid or their relation's oid) to get the related
	 * object's oid for all of the pg meta tables except pg_enum and pg_index. For pg_enum,
	 * class, we access its 2. col(its type's oid) to see if its type depends on citus,
	 * so it does. For pg_index, we access its 2. col (its relation's oid) to see if its relation
	 * depends on citus, so it does.
	 */</comment>
	<decl_stmt><decl><type><name>AttrNumber</name></type> <name>oidAttNum</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>pgMetaTableOid</name> <operator>==</operator> <name>EnumRelationId</name> <operator>||</operator> <name>pgMetaTableOid</name> <operator>==</operator> <name>IndexRelationId</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>oidAttNum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* create const for meta table oid */</comment>
	<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>metaTableOidConst</name> <init>= <expr><call><name>makeConst</name><argument_list>(<argument><expr><name>OIDOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr></argument>,
										 <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>pgMetaTableOid</name></expr></argument>)</argument_list></call></expr></argument>,
										 <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * create a var for the oid that we are interested in,
	 * col type should be regproc for pg_aggregate table; else oid
	 */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>varType</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>pgMetaTableOid</name> <operator>==</operator> <name>AggregateRelationId</name><operator>)</operator></expr> ?</condition><then> <expr><name>REGPROCOID</name></expr> </then><else>: <expr><name>OIDOID</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>oidVar</name> <init>= <expr><call><name>makeVar</name><argument_list>(<argument><expr><name>pgMetaTableVarno</name></expr></argument>, <argument><expr><name>oidAttNum</name></expr></argument>,
						  <argument><expr><name>varType</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>list_make2</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>metaTableOidConst</name></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>oidVar</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DistOpsValidityState returns validation state for given dist ops.
 */</comment>
<function><type><name>DistOpsValidationState</name></type>
<name>DistOpsValidityState</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DistributeObjectOps</name> <modifier>*</modifier></type><name>ops</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>ops</name> <operator>&amp;&amp;</operator> <name><name>ops</name><operator>-&gt;</operator><name>operationType</name></name> <operator>==</operator> <name>DIST_OPS_CREATE</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We should not validate CREATE statements because no address exists
		 * here yet.
		 */</comment>
		<return>return <expr><name>NoAddressResolutionRequired</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>AlterRoleSetStatementContainsAll</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We should not validate 'ALTER ROLE ALL [SET|UNSET] because for the role ALL
		 * AlterRoleSetStmtObjectAddress returns an invalid address even though it should not.
		 */</comment>
		<return>return <expr><name>NoAddressResolutionRequired</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>HasDropCommandViolatesOwnership</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * found object with an invalid ownership, PG will complain if there is any object
		 * with an invalid ownership.
		 */</comment>
		<return>return <expr><name>HasObjectWithInvalidOwnership</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>ops</name> <operator>&amp;&amp;</operator> <name><name>ops</name><operator>-&gt;</operator><name>address</name></name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>missingOk</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isPostprocess</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>objectAddresses</name> <init>= <expr><call><name><name>ops</name><operator>-&gt;</operator><name>address</name></name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>missingOk</name></expr></argument>, <argument><expr><name>isPostprocess</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>objectAddress</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<macro><name>foreach_ptr</name><argument_list>(<argument>objectAddress</argument>, <argument>objectAddresses</argument>)</argument_list></macro>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>objectAddress</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* found one valid object */</comment>
				<return>return <expr><name>HasAtLeastOneValidObject</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>

		<comment type="block">/* no valid objects */</comment>
		<return>return <expr><name>HasNoneValidObject</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/* if the object doesn't have address defined, we donot validate */</comment>
		<return>return <expr><name>NoAddressResolutionRequired</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DistOpsInValidState returns true if given state is valid to execute
 * preprocess and qualify steps.
 */</comment>
<function><type><name>bool</name></type>
<name>DistOpsInValidState</name><parameter_list>(<parameter><decl><type><name>DistOpsValidationState</name></type> <name>distOpsValidationState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>distOpsValidationState</name> <operator>==</operator> <name>HasAtLeastOneValidObject</name> <operator>||</operator> <name>distOpsValidationState</name> <operator>==</operator>
		   <name>NoAddressResolutionRequired</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AlterRoleSetStatementContainsAll returns true if the statement is a
 * ALTER ROLE ALL (SET / RESET).
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AlterRoleSetStatementContainsAll</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>nodeTag</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>T_AlterRoleSetStmt</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* rolespec is null for the role 'ALL' */</comment>
		<decl_stmt><decl><type><name>AlterRoleSetStmt</name> <modifier>*</modifier></type><name>alterRoleSetStmt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>AlterRoleSetStmt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<return>return <expr><name><name>alterRoleSetStmt</name><operator>-&gt;</operator><name>role</name></name> <operator>==</operator> <name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * HasDropCommandViolatesOwnership returns true if any object in the given
 * statement violates object ownership.
 *
 * Currently there is only one test which fails due to object ownership.
 * The command that is failing is DROP. If in the future we hit other
 * commands like this, we should expand this function.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>HasDropCommandViolatesOwnership</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>DropStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>dropStmt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>DropStmt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>AnyObjectViolatesOwnership</name><argument_list>(<argument><expr><name>dropStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AnyObjectViolatesOwnership return true if given object in stmt violates ownership.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>AnyObjectViolatesOwnership</name><parameter_list>(<parameter><decl><type><name>DropStmt</name> <modifier>*</modifier></type><name>dropStmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>ObjectAddress</name></type> <name>objectAddress</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>objectViolatesOwnership</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectType</name></type> <name>objectType</name> <init>= <expr><name><name>dropStmt</name><operator>-&gt;</operator><name>removeType</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>missingOk</name> <init>= <expr><name><name>dropStmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>object</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>object</argument>, <argument>dropStmt-&gt;objects</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<expr_stmt><expr><name>objectAddress</name> <operator>=</operator> <call><name>get_object_address</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>, <argument><expr><name>object</name></expr></argument>,
											   <argument><expr><operator>&amp;</operator><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>, <argument><expr><name>missingOk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


			<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>objectAddress</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * if object violates ownership, check_object_ownership will throw error.
				 */</comment>
				<expr_stmt><expr><call><name>check_object_ownership</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>,
									   <argument><expr><name>objectType</name></expr></argument>,
									   <argument><expr><name>objectAddress</name></expr></argument>,
									   <argument><expr><name>object</name></expr></argument>, <argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>objectAddress</name><operator>.</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* ownership violation */</comment>
				<expr_stmt><expr><name>objectViolatesOwnership</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
		<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>relation</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>relation_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>relation</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* we found ownership violation, so can return here */</comment>
		<if_stmt><if>if <condition>(<expr><name>objectViolatesOwnership</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>
</unit>
