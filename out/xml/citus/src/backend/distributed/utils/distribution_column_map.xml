<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/utils/distribution_column_map.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * distribution_column_map.c
 *	  Implementation of a relation OID to distribution column map.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/distribution_column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_join_order.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_partitioning_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/distribution_column_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>


<comment type="block">/*
 * RelationIdDistributionColumnMapEntry is used to map relation IDs to
 * distribution column Vars.
 */</comment>
<typedef>typedef <type><struct>struct <name>RelationIdDistributionColumnMapEntry</name>
<block>{
	<comment type="block">/* OID of the relation */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relationId</name></decl>;</decl_stmt>

	<comment type="block">/* a Var describing the distribution column */</comment>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>distributionColumn</name></decl>;</decl_stmt>
}</block></struct></type> <name>RelationIdDistributionColumnMapEntry</name>;</typedef>


<comment type="block">/*
 * CreateDistributionColumnMap creates an empty (OID -&gt; distribution column Var) map.
 */</comment>
<function><type><name>DistributionColumnMap</name> <modifier>*</modifier></type>
<name>CreateDistributionColumnMap</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>RelationIdDistributionColumnMapEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>oid_hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint32</name></type> <name>hashFlags</name> <init>= <expr><operator>(</operator><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_CONTEXT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>distributionColumnMap</name> <init>= <expr><call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Distribution Column Map"</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>hashFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>distributionColumnMap</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AddDistributionColumnForRelation adds the given OID and its distribution column
 * to the hash, as well as any child partitions.
 */</comment>
<function><type><name>void</name></type>
<name>AddDistributionColumnForRelation</name><parameter_list>(<parameter><decl><type><name>DistributionColumnMap</name> <modifier>*</modifier></type><name>distributionColumnMap</name></decl></parameter>,
								 <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>,
								 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>distributionColumnName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>entryFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RelationIdDistributionColumnMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
		<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>distributionColumnMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relationId</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entryFound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><name>entryFound</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>distributionColumn</name></name> <operator>=</operator>
		<call><name>BuildDistributionKeyFromColumnName</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>distributionColumnName</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PartitionedTable</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Recursively add partitions as well.
		 */</comment>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>partitionList</name> <init>= <expr><call><name>PartitionList</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>partitionRelationId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

		<macro><name>foreach_oid</name><argument_list>(<argument>partitionRelationId</argument>, <argument>partitionList</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>AddDistributionColumnForRelation</name><argument_list>(<argument><expr><name>distributionColumnMap</name></expr></argument>, <argument><expr><name>partitionRelationId</name></expr></argument>,
											 <argument><expr><name>distributionColumnName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetDistributionColumnFromMap returns the distribution column for a given
 * relation ID from the distribution column map.
 */</comment>
<function><type><name>Var</name> <modifier>*</modifier></type>
<name>GetDistributionColumnFromMap</name><parameter_list>(<parameter><decl><type><name>DistributionColumnMap</name> <modifier>*</modifier></type><name>distributionColumnMap</name></decl></parameter>,
							 <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>entryFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>RelationIdDistributionColumnMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
		<expr><call><name>hash_search</name><argument_list>(<argument><expr><name>distributionColumnMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>relationId</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>entryFound</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>entryFound</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name><name>entry</name><operator>-&gt;</operator><name>distributionColumn</name></name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetDistributionColumnWithOverrides returns the distribution column for a given
 * relation from the distribution column overrides map, or the metadata if no
 * override is specified.
 */</comment>
<function><type><name>Var</name> <modifier>*</modifier></type>
<name>GetDistributionColumnWithOverrides</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>,
								   <parameter><decl><type><name>DistributionColumnMap</name> <modifier>*</modifier></type><name>distributionColumnOverrides</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>distributionColumn</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>distributionColumnOverrides</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>distributionColumn</name> <operator>=</operator> <call><name>GetDistributionColumnFromMap</name><argument_list>(<argument><expr><name>distributionColumnOverrides</name></expr></argument>,
														  <argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>distributionColumn</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>distributionColumn</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* no override defined, use distribution column from metadata */</comment>
	<return>return <expr><call><name>DistPartitionKey</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
