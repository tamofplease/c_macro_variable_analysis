<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/worker/worker_sql_task_protocol.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * worker_sql_task_protocol.c
 *
 * Routines for executing SQL tasks.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transmit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* necessary to get S_IRUSR, S_IWUSR definitions on illumos */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>COPY_BUFFER_SIZE</name></cpp:macro> <cpp:value>(4 * 1024 * 1024)</cpp:value></cpp:define>

<comment type="block">/* TaskFileDestReceiver can be used to stream results into a file */</comment>
<typedef>typedef <type><struct>struct <name>TaskFileDestReceiver</name>
<block>{
	<comment type="block">/* public DestReceiver interface */</comment>
	<decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>

	<comment type="block">/* descriptor of the tuples that are sent to the worker */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl>;</decl_stmt>

	<comment type="block">/* context for per-tuple memory allocation */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tupleContext</name></decl>;</decl_stmt>

	<comment type="block">/* MemoryContext for DestReceiver session */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>memoryContext</name></decl>;</decl_stmt>

	<comment type="block">/* output file */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filePath</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FileCompat</name></type> <name>fileCompat</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>binaryCopyFormat</name></decl>;</decl_stmt>

	<comment type="block">/* state on how to copy out data types */</comment>
	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>columnOutputFunctions</name></decl>;</decl_stmt>

	<comment type="block">/* statistics */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>tuplesSent</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>bytesSent</name></decl>;</decl_stmt>
}</block></struct></type> <name>TaskFileDestReceiver</name>;</typedef>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TaskFileDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
										<parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDescriptor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TaskFileDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WriteToLocalFile</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copyData</name></decl></parameter>, <parameter><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TaskFileDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TaskFileDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* exports for SQL callable functions */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>worker_execute_sql_task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/*
 * worker_execute_sql_task executes a query and writes the results to
 * a file according to the usual task naming scheme.
 */</comment>
<function><type><name>Datum</name></type>
<name>worker_execute_sql_task</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"This UDF is deprecated."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CreateFileDestReceiver creates a DestReceiver for writing query results
 * to a file.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateFileDestReceiver</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filePath</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>tupleContext</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>binaryCopyFormat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name> <init>= <expr><operator>(</operator><name>TaskFileDestReceiver</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TaskFileDestReceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* set up the DestReceiver function pointers */</comment>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>TaskFileDestReceiverReceive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>TaskFileDestReceiverStartup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>TaskFileDestReceiverShutdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>TaskFileDestReceiverDestroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestCopyOut</name></expr>;</expr_stmt>

	<comment type="block">/* set up output parameters */</comment>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>tupleContext</name></name> <operator>=</operator> <name>tupleContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>memoryContext</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>filePath</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>binaryCopyFormat</name></name> <operator>=</operator> <name>binaryCopyFormat</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>taskFileDest</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TaskFileDestReceiverStartup implements the rStartup interface of
 * TaskFileDestReceiver. It opens the destination file and sets up
 * the CopyOutState.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TaskFileDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
							<parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDescriptor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name> <init>= <expr><operator>(</operator><name>TaskFileDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiterCharacter</name> <init>= <expr><literal type="string">"\t"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nullPrintCharacter</name> <init>= <expr><literal type="string">"\\N"</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fileFlags</name> <init>= <expr><operator>(</operator><name>O_APPEND</name> <operator>|</operator> <name>O_CREAT</name> <operator>|</operator> <name>O_RDWR</name> <operator>|</operator> <name>O_TRUNC</name> <operator>|</operator> <name>PG_BINARY</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>fileMode</name> <init>= <expr><operator>(</operator><name>S_IRUSR</name> <operator>|</operator> <name>S_IWUSR</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* use the memory context that was in place when the DestReceiver was created */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>memoryContext</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>tupleDescriptor</name></name> <operator>=</operator> <name>inputTupleDescriptor</name></expr>;</expr_stmt>

	<comment type="block">/* define how tuples will be serialised */</comment>
	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name> <init>= <expr><operator>(</operator><name>CopyOutState</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CopyOutStateData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>delim</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>delimiterCharacter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>null_print</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nullPrintCharacter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>null_print_client</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nullPrintCharacter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name> <operator>=</operator> <name><name>taskFileDest</name><operator>-&gt;</operator><name>binaryCopyFormat</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>rowcontext</name></name> <operator>=</operator> <name><name>taskFileDest</name><operator>-&gt;</operator><name>tupleContext</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>copyOutState</name></name> <operator>=</operator> <name>copyOutState</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name> <operator>=</operator> <call><name>ColumnOutputFunctions</name><argument_list>(<argument><expr><name>inputTupleDescriptor</name></expr></argument>,
																<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>fileCompat</name></name> <operator>=</operator> <call><name>FileCompatFromFileStart</name><argument_list>(<argument><expr><call><name>FileOpenForTransmit</name><argument_list>(
														   <argument><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>filePath</name></name></expr></argument>,
														   <argument><expr><name>fileFlags</name></expr></argument>,
														   <argument><expr><name>fileMode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* write headers when using binary encoding */</comment>
		<expr_stmt><expr><call><name>AppendCopyBinaryHeaders</name><argument_list>(<argument><expr><name>copyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TaskFileDestReceiverReceive implements the receiveSlot function of
 * TaskFileDestReceiver. It takes a TupleTableSlot and writes the contents
 * to a local file.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TaskFileDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name> <init>= <expr><operator>(</operator><name>TaskFileDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>tupleDescriptor</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name> <init>= <expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>columnOutputFunctions</name> <init>= <expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>copyData</name> <init>= <expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>executorTupleContext</name> <init>= <expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>tupleContext</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>executorTupleContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>columnValues</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>columnNulls</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* construct row in COPY format */</comment>
	<expr_stmt><expr><call><name>AppendCopyRowData</name><argument_list>(<argument><expr><name>columnValues</name></expr></argument>, <argument><expr><name>columnNulls</name></expr></argument>, <argument><expr><name>tupleDescriptor</name></expr></argument>,
					  <argument><expr><name>copyOutState</name></expr></argument>, <argument><expr><name>columnOutputFunctions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyData</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>COPY_BUFFER_SIZE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>WriteToLocalFile</name><argument_list>(<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name>taskFileDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name>copyData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>tuplesSent</name></name><operator>++</operator></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>executorTupleContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * WriteToLocalResultsFile writes the bytes in a StringInfo to a local file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>WriteToLocalFile</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>copyData</name></decl></parameter>, <parameter><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bytesWritten</name> <init>= <expr><call><name>FileWriteCompat</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>taskFileDest</name><operator>-&gt;</operator><name>fileCompat</name></name></expr></argument>, <argument><expr><name><name>copyData</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
									   <argument><expr><name><name>copyData</name><operator>-&gt;</operator><name>len</name></name></expr></argument>, <argument><expr><name>PG_WAIT_IO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>bytesWritten</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not append to file: %m"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>bytesSent</name></name> <operator>+=</operator> <name>bytesWritten</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TaskFileDestReceiverShutdown implements the rShutdown interface of
 * TaskFileDestReceiver. It writes the footer and closes the file.
 * the relation.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TaskFileDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name> <init>= <expr><operator>(</operator><name>TaskFileDestReceiver</name> <operator>*</operator><operator>)</operator> <name>destReceiver</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name> <init>= <expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>WriteToLocalFile</name><argument_list>(<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name>taskFileDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* write footers when using binary encoding */</comment>
		<expr_stmt><expr><call><name>AppendCopyBinaryFooters</name><argument_list>(<argument><expr><name>copyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>WriteToLocalFile</name><argument_list>(<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name>taskFileDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>fileCompat</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TaskFileDestReceiverDestroy frees memory allocated as part of the
 * TaskFileDestReceiver and closes file descriptors.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TaskFileDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>taskFileDest</name> <init>= <expr><operator>(</operator><name>TaskFileDestReceiver</name> <operator>*</operator><operator>)</operator> <name>destReceiver</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>copyOutState</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>filePath</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>filePath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>taskFileDest</name><operator>-&gt;</operator><name>filePath</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * FileDestReceiverStats returns statistics for the given file dest receiver.
 */</comment>
<function><type><name>void</name></type>
<name>FileDestReceiverStats</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>rowsSent</name></decl></parameter>, <parameter><decl><type><name>uint64</name> <modifier>*</modifier></type><name>bytesSent</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TaskFileDestReceiver</name> <modifier>*</modifier></type><name>fileDestReceiver</name> <init>= <expr><operator>(</operator><name>TaskFileDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>rowsSent</name> <operator>=</operator> <name><name>fileDestReceiver</name><operator>-&gt;</operator><name>tuplesSent</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>bytesSent</name> <operator>=</operator> <name><name>fileDestReceiver</name><operator>-&gt;</operator><name>bytesSent</name></name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
