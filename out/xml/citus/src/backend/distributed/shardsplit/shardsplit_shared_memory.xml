<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/shardsplit/shardsplit_shared_memory.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shardsplit_shared_memory.c
 *    API's for creating and accessing shared memory segments to store
 *    shard split information. 'setup_shard_replication' UDF creates the
 *    shared memory, populates the contents and WAL sender processes are
 *    the consumers.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardinterval_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardsplit_shared_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_logical_replication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>SharedMemoryNameForHandleManagement</name> <init>=
	<expr><literal type="string">"Shared memory handle for shard split"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Function declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type> <name>AllocateSharedMemoryForShardSplitInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type>
																	  <name>shardSplitInfoCount</name></decl></parameter>,
																	  <parameter><decl><type><name>Size</name></type>
																	  <name>shardSplitInfoSize</name></decl></parameter>,
																	  <parameter><decl><type><name>dsm_handle</name> <modifier>*</modifier></type>
																	  <name>dsmHandle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type> <name>GetShardSplitInfoSMHeaderFromDSMHandle</name><parameter_list>(<parameter><decl><type><name>dsm_handle</name></type>
																	   <name>dsmHandle</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>dsm_handle</name></type> <name>GetShardSplitSharedMemoryHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ShardSplitShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * GetShardSplitInfoSMHeaderFromDSMHandle returns the header of the shared memory
 * segment. It pins the mapping till lifetime of the backend process accessing it.
 */</comment>
<function><type><specifier>static</specifier> <name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type>
<name>GetShardSplitInfoSMHeaderFromDSMHandle</name><parameter_list>(<parameter><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><call><name>dsm_find_mapping</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>dsmSegment</name> <operator>=</operator> <call><name>dsm_attach</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not attach to dynamic shared memory segment "</literal>
						<literal type="string">"corresponding to handle:%u"</literal></expr></argument>, <argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Detatching segment associated with resource owner with 'dsm_pin_mapping' call before the
	 * resource owner releases, to avoid warning being logged and potential leaks.
	 */</comment>
	<expr_stmt><expr><call><name>dsm_pin_mapping</name><argument_list>(<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><operator>(</operator><name>ShardSplitInfoSMHeader</name> <operator>*</operator><operator>)</operator> <call><name>dsm_segment_address</name><argument_list>(
		<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>header</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Could not get shared memory segment header "</literal>
						<literal type="string">"corresponding to handle for split workflow:%u"</literal></expr></argument>, <argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>header</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetShardSplitInfoSMHeader returns pointer to the header of shared memory segment.
 */</comment>
<function><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type>
<name>GetShardSplitInfoSMHeader</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name> <init>= <expr><call><name>GetShardSplitSharedMemoryHandle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type><name>shardSplitInfoSMHeader</name> <init>=
		<expr><call><name>GetShardSplitInfoSMHeaderFromDSMHandle</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>shardSplitInfoSMHeader</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AllocateSharedMemoryForShardSplitInfo is used to allocate and store
 * information about the shard undergoing a split. The function allocates dynamic
 * shared memory segment consisting of a header and an array of ShardSplitInfo structure.
 * The contents of this shared memory segment are consumed by WAL sender process
 * during catch up phase of replication through logical decoding plugin.
 *
 * The shared memory segment exists till the catch up phase completes or the
 * postmaster shutsdown.
 */</comment>
<function><type><specifier>static</specifier> <name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type>
<name>AllocateSharedMemoryForShardSplitInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shardSplitInfoCount</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>shardSplitInfoSize</name></decl></parameter>,
									  <parameter><decl><type><name>dsm_handle</name> <modifier>*</modifier></type><name>dsmHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>shardSplitInfoCount</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>shardSplitInfoSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"shardSplitInfoCount and size of each step should be "</literal>
						<literal type="string">"positive values"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Size</name></type> <name>totalSize</name> <init>= <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>ShardSplitInfoSMHeader</name></expr></argument>, <argument><expr><name>splitInfoArray</name></expr></argument>)</argument_list></call> <operator>+</operator>
					 <operator>(</operator><name>shardSplitInfoCount</name> <operator>*</operator> <name>shardSplitInfoSize</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><call><name>dsm_create</name><argument_list>(<argument><expr><name>totalSize</name></expr></argument>, <argument><expr><name>DSM_CREATE_NULL_IF_MAXSEGMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create a dynamic shared memory segment to "</literal>
						<literal type="string">"store shard split info"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>dsmHandle</name> <operator>=</operator> <call><name>dsm_segment_handle</name><argument_list>(<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Pin the segment till Postmaster shutsdown since we need this
	 * segment even after the session ends for replication catchup phase.
	 */</comment>
	<expr_stmt><expr><call><name>dsm_pin_segment</name><argument_list>(<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type><name>shardSplitInfoSMHeader</name> <init>=
		<expr><call><name>GetShardSplitInfoSMHeaderFromDSMHandle</name><argument_list>(<argument><expr><operator>*</operator><name>dsmHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>shardSplitInfoSMHeader</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <name>shardSplitInfoCount</name></expr>;</expr_stmt>

	<return>return <expr><name>shardSplitInfoSMHeader</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CreateSharedMemoryForShardSplitInfo is a wrapper function which creates shared memory
 * for storing shard split infomation. The function returns pointer to the header of
 * shared memory segment.
 *
 * shardSplitInfoCount - number of 'ShardSplitInfo ' elements to be allocated
 * dsmHandle           - handle of the allocated shared memory segment
 */</comment>
<function><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type>
<name>CreateSharedMemoryForShardSplitInfo</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>shardSplitInfoCount</name></decl></parameter>, <parameter><decl><type><name>dsm_handle</name> <modifier>*</modifier></type><name>dsmHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type><name>shardSplitInfoSMHeader</name> <init>=
		<expr><call><name>AllocateSharedMemoryForShardSplitInfo</name><argument_list>(<argument><expr><name>shardSplitInfoCount</name></expr></argument>,
											  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardSplitInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>,
											  <argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>shardSplitInfoSMHeader</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ReleaseSharedMemoryOfShardSplitInfo releases(unpins) the dynamic shared memory segment
 * allocated by 'worker_split_shard_replication_setup'. This shared memory was pinned
 * to Postmaster process and is valid till Postmaster shutsdown or
 * explicitly unpinned by calling 'dsm_unpin_segment'.
 */</comment>
<function><type><name>void</name></type>
<name>ReleaseSharedMemoryOfShardSplitInfo</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="block">/* Get handle of dynamic shared memory segment*/</comment>
	<decl_stmt><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name> <init>= <expr><call><name>GetShardSplitSharedMemoryHandle</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmHandle</name> <operator>==</operator> <name>DSM_HANDLE_INVALID</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Unpin the dynamic shared memory segment. 'dsm_pin_segment' was
	 * called previously by 'AllocateSharedMemoryForShardSplitInfo'.
	 */</comment>
	<expr_stmt><expr><call><name>dsm_unpin_segment</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * As dynamic shared memory is unpinned, store an invalid handle in static
	 * shared memory used for handle management.
	 */</comment>
	<expr_stmt><expr><call><name>StoreShardSplitSharedMemoryHandle</name><argument_list>(<argument><expr><name>DSM_HANDLE_INVALID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * InitializeShardSplitSMHandleManagement requests the necessary shared memory
 * from Postgres and sets up the shared memory startup hook.
 * This memory is used to store handle of other shared memories allocated during split workflow.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeShardSplitSMHandleManagement</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>ShardSplitShmemInit</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShardSplitShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>alreadyInitialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardSplitShmemData</name> <modifier>*</modifier></type><name>smData</name> <init>= <expr><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SharedMemoryNameForHandleManagement</name></expr></argument>,
												  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardSplitShmemData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
												  <argument><expr><operator>&amp;</operator><name>alreadyInitialized</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>alreadyInitialized</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trancheName</name> <init>= <expr><literal type="string">"Split Shard Setup Tranche"</literal></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>NamedLWLockTranche</name> <modifier>*</modifier></type><name>namedLockTranche</name> <init>=
			<expr><operator>&amp;</operator><name><name>smData</name><operator>-&gt;</operator><name>namedLockTranche</name></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* start by zeroing out all the memory */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>smData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
			   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardSplitShmemData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>namedLockTranche</name><operator>-&gt;</operator><name>trancheId</name></name> <operator>=</operator> <call><name>LWLockNewTrancheId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>namedLockTranche</name><operator>-&gt;</operator><name>trancheId</name></name></expr></argument>, <argument><expr><name>trancheName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>,
						 <argument><expr><name><name>namedLockTranche</name><operator>-&gt;</operator><name>trancheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>smData</name><operator>-&gt;</operator><name>dsmHandle</name></name> <operator>=</operator> <name>DSM_HANDLE_INVALID</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * StoreShardSplitSharedMemoryHandle stores a handle of shared memory
 * allocated and populated by 'worker_split_shard_replication_setup' UDF.
 * This handle is stored in a different statically allocated shared memory
 * segment with name 'Shared memory handle for shard split'.
 */</comment>
<function><type><name>void</name></type>
<name>StoreShardSplitSharedMemoryHandle</name><parameter_list>(<parameter><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardSplitShmemData</name> <modifier>*</modifier></type><name>smData</name> <init>= <expr><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SharedMemoryNameForHandleManagement</name></expr></argument>,
												  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardSplitShmemData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
												  <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><call><name>errmsg</name><argument_list>(
					<argument><expr><literal type="string">"Shared memory for handle management should have been initialized during boot"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We only support non concurrent split. However, it is fine to take a
	 * lock and store the handle incase concurrent splits are introduced in future.
	 */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * In a normal situation, previously stored handle should have been invalidated
	 * before the current function is called.
	 * If this handle is still valid, it means cleanup of previous split shard
	 * workflow failed. Log a waring and continue the current shard split operation.
	 * Skip warning if new handle to be stored is invalid. We store invalid handle
	 * when shared memory is released by calling worker_split_shard_release_dsm.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>smData</name><operator>-&gt;</operator><name>dsmHandle</name></name> <operator>!=</operator> <name>DSM_HANDLE_INVALID</name> <operator>&amp;&amp;</operator> <name>dsmHandle</name> <operator>!=</operator> <name>DSM_HANDLE_INVALID</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><call><name>errmsg</name><argument_list>(
					<argument><expr><literal type="string">"Previous split shard worflow was not successfully and could not complete the cleanup phase."</literal>
					<literal type="string">" Continuing with the current split shard workflow."</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Store the incoming handle */</comment>
	<expr_stmt><expr><name><name>smData</name><operator>-&gt;</operator><name>dsmHandle</name></name> <operator>=</operator> <name>dsmHandle</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetShardSplitSharedMemoryHandle returns the handle of dynamic shared memory segment stored
 * by 'worker_split_shard_replication_setup' UDF. This handle is requested by WAL sender processes
 * during logical replication phase or during cleanup.
 */</comment>
<function><type><name>dsm_handle</name></type>
<name>GetShardSplitSharedMemoryHandle</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardSplitShmemData</name> <modifier>*</modifier></type><name>smData</name> <init>= <expr><call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>SharedMemoryNameForHandleManagement</name></expr></argument>,
												  <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardSplitShmemData</name></expr></argument>)</argument_list></sizeof></expr></argument>,
												  <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><call><name>errmsg</name><argument_list>(
					<argument><expr><literal type="string">"Shared memory for handle management should have been initialized during boot"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name> <init>= <expr><name><name>smData</name><operator>-&gt;</operator><name>dsmHandle</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smData</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>dsmHandle</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PopulateSourceToDestinationShardMapForSlot populates 'SourceToDestinationShard' hash map for a given slot.
 * Key of the map is Oid of source shard which is undergoing a split and value is a list of corresponding child shards.
 * To populate the map, the function traverses 'ShardSplitInfo' array stored within shared memory segment.
 */</comment>
<function><type><name>HTAB</name> <modifier>*</modifier></type>
<name>PopulateSourceToDestinationShardMapForSlot</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>slotName</name></decl></parameter>, <parameter><decl><type><name>MemoryContext</name></type> <name>cxt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Oid</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SourceToDestinationShardMapEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>uint32_hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>cxt</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>hashFlags</name> <init>= <expr><operator>(</operator><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_CONTEXT</name> <operator>|</operator> <name>HASH_FUNCTION</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>sourceShardToDesShardMap</name> <init>= <expr><call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"SourceToDestinationShardMap"</literal></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>hashFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>cxt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ShardSplitInfoSMHeader</name> <modifier>*</modifier></type><name>smHeader</name> <init>= <expr><call><name>GetShardSplitInfoSMHeader</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>index</name> <operator>&lt;</operator> <name><name>smHeader</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>index</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>smHeader</name><operator>-&gt;</operator><name>splitInfoArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>slotName</name></expr></argument>, <argument><expr><name>slotName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type> <name>sourceShardOid</name> <init>= <expr><name><name>smHeader</name><operator>-&gt;</operator><name>splitInfoArray</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>sourceShardOid</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>SourceToDestinationShardMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
				<expr><operator>(</operator><name>SourceToDestinationShardMapEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(
					<argument><expr><name>sourceShardToDesShardMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sourceShardOid</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>shardSplitInfoList</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>sourceShardKey</name></name> <operator>=</operator> <name>sourceShardOid</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<decl_stmt><decl><type><name>ShardSplitInfo</name> <modifier>*</modifier></type><name>shardSplitInfoForSlot</name> <init>= <expr><operator>(</operator><name>ShardSplitInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(
				<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardSplitInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>shardSplitInfoForSlot</name> <operator>=</operator> <name><name>smHeader</name><operator>-&gt;</operator><name>splitInfoArray</name><index>[<expr><name>index</name></expr>]</index></name></expr>;</expr_stmt>

			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>shardSplitInfoList</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>shardSplitInfoList</name></name></expr></argument>,
												<argument><expr><operator>(</operator><name>ShardSplitInfo</name> <operator>*</operator><operator>)</operator> <name>shardSplitInfoForSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>sourceShardToDesShardMap</name></expr>;</return>
</block_content>}</block></function>
</unit>
