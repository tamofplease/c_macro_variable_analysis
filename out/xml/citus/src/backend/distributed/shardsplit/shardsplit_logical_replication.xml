<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/shardsplit/shardsplit_logical_replication.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shardsplit_logical_replication.c
 *
 * Function definitions for logically replicating shard to split children.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/colocation_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/hash_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_partitioning_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/priority.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardinterval_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_split.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shared_library_init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardsplit_logical_replication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/resource_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>ShardInfoHashMapForPublications</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* function declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddPublishableShardEntryInMap</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>targetNodeId</name></decl></parameter>,
										  <parameter><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardInterval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type>
										  <name>isChildShardInterval</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>LogicalRepTarget</name> <modifier>*</modifier></type> <name>CreateLogicalRepTarget</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tableOwnerId</name></decl></parameter>,
												 <parameter><decl><type><name>uint32</name></type> <name>nodeId</name></decl></parameter>,
												 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>replicationSlotInfoList</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * CreateShardSplitInfoMapForPublication creates a hashmap that groups
 * shards for creating publications and subscriptions.
 *
 * While creating publications and subscriptions, apart from table owners,
 * placement of child shard matters too. To further understand this, please see
 * the following example:
 *
 * Shard1(on Worker1) is to be split in Shard2 and Shard3 on Worker2 and Worker3 respectively.
 * Lets assume the owner to be 'A'. The hashmap groups shard list in the following way.
 *
 * Map key
 * =======	               ------     ------
 * &lt;Worker2, 'A'&gt; ------&gt; |Shard2|--&gt;|Shard1|
 *                         ------     ------
 *
 *                         ------     ------
 * &lt;Worker3, 'A'&gt; ------&gt; |Shard3|--&gt;|Shard1|
 *                         ------     ------
 * Shard1 is a dummy table that is to be created on Worker2 and Worker3.
 * Based on the above placement, we would need to create two publications on the source node.
 */</comment>
<function><type><name>HTAB</name> <modifier>*</modifier></type>
<name>CreateShardSplitInfoMapForPublication</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>sourceColocatedShardIntervalList</name></decl></parameter>,
									  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>shardGroupSplitIntervalListList</name></decl></parameter>,
									  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>destinationWorkerNodesList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>ShardInfoHashMapForPublications</name> <operator>=</operator> <call><name>CreateSimpleHash</name><argument_list>(<argument><expr><name>NodeAndOwner</name></expr></argument>, <argument><expr><name>PublicationInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>sourceShardIntervalToCopy</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>splitChildShardIntervalList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>forboth_ptr</name><argument_list>(<argument>sourceShardIntervalToCopy</argument>, <argument>sourceColocatedShardIntervalList</argument>,
				<argument>splitChildShardIntervalList</argument>, <argument>shardGroupSplitIntervalListList</argument>)</argument_list></macro>
	<block>{<block_content>
		<comment type="block">/*
		 * Skipping partitioned table for logical replication.
		 * Since PG13, logical replication is supported for partitioned tables.
		 * However, we want to keep the behaviour consistent with shard moves.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>PartitionedTable</name><argument_list>(<argument><expr><name><name>sourceShardIntervalToCopy</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>splitChildShardInterval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>destinationWorkerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<macro><name>forboth_ptr</name><argument_list>(<argument>splitChildShardInterval</argument>, <argument>splitChildShardIntervalList</argument>,
					<argument>destinationWorkerNode</argument>, <argument>destinationWorkerNodesList</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint32</name></type> <name>destinationWorkerNodeId</name> <init>= <expr><name><name>destinationWorkerNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* Add child shard for publication.
			 * If a columnar shard is a part of publications, then writes on the shard fail.
			 * In the case of local split, adding child shards to the publication
			 * would prevent copying the initial data done through 'DoSplitCopy'.
			 * Hence we avoid adding columnar child shards to publication.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>extern_IsColumnarTableAmTable</name><argument_list>(<argument><expr><name><name>splitChildShardInterval</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>AddPublishableShardEntryInMap</name><argument_list>(<argument><expr><name>destinationWorkerNodeId</name></expr></argument>,
											  <argument><expr><name>splitChildShardInterval</name></expr></argument>,
											  <argument><expr><name>true</name></expr></argument> <comment type="block">/*isChildShardInterval*/</comment>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* Add parent shard if not already added */</comment>
			<expr_stmt><expr><call><name>AddPublishableShardEntryInMap</name><argument_list>(<argument><expr><name>destinationWorkerNodeId</name></expr></argument>,
										  <argument><expr><name>sourceShardIntervalToCopy</name></expr></argument>,
										  <argument><expr><name>false</name></expr></argument> <comment type="block">/*isChildShardInterval*/</comment>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block>

	<return>return <expr><name>ShardInfoHashMapForPublications</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AddPublishableShardEntryInMap adds a shard interval in the list
 * of shards to be published.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddPublishableShardEntryInMap</name><parameter_list>(<parameter><decl><type><name>uint32</name></type> <name>targetNodeId</name></decl></parameter>, <parameter><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardInterval</name></decl></parameter>, <parameter><decl><type><name>bool</name></type>
							  <name>isChildShardInterval</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>NodeAndOwner</name></type> <name>key</name></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name>targetNodeId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tableOwnerId</name></name> <operator>=</operator> <call><name>TableOwnerOid</name><argument_list>(<argument><expr><name><name>shardInterval</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PublicationInfo</name> <modifier>*</modifier></type><name>publicationInfo</name> <init>=
		<expr><operator>(</operator><name>PublicationInfo</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>ShardInfoHashMapForPublications</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
										<argument><expr><name>HASH_ENTER</name></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Create a new list for &lt;nodeId, owner&gt; pair */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>publicationInfo</name><operator>-&gt;</operator><name>shardIntervals</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>publicationInfo</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>PublicationName</name><argument_list>(<argument><expr><name>SHARD_SPLIT</name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>nodeId</name></name></expr></argument>,
												<argument><expr><name><name>key</name><operator>.</operator><name>tableOwnerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Add child shard interval */</comment>
	<if_stmt><if>if <condition>(<expr><name>isChildShardInterval</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>publicationInfo</name><operator>-&gt;</operator><name>shardIntervals</name></name> <operator>=</operator>
			<call><name>lappend</name><argument_list>(<argument><expr><name><name>publicationInfo</name><operator>-&gt;</operator><name>shardIntervals</name></name></expr></argument>, <argument><expr><name>shardInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* We return from here as the child interval is only added once in the list */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Check if parent is already added */</comment>
	<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>existingShardInterval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>existingShardInterval</argument>, <argument>publicationInfo-&gt;shardIntervals</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>existingShardInterval</name><operator>-&gt;</operator><name>shardId</name></name> <operator>==</operator> <name><name>shardInterval</name><operator>-&gt;</operator><name>shardId</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* parent shard interval is already added hence return */</comment>
			<return>return;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* Add parent shard Interval */</comment>
	<expr_stmt><expr><name><name>publicationInfo</name><operator>-&gt;</operator><name>shardIntervals</name></name> <operator>=</operator>
		<call><name>lappend</name><argument_list>(<argument><expr><name><name>publicationInfo</name><operator>-&gt;</operator><name>shardIntervals</name></name></expr></argument>, <argument><expr><name>shardInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * PopulateShardSplitSubscriptionsMetadataList returns a list of 'LogicalRepTarget'
 * structure.
 *
 * shardSplitInfoHashMap - Shards are grouped by &lt;owner, node id&gt; key.
 *                         For each key, we create a metadata structure. This facilitates easy
 *                         publication-subscription management.
 *
 * replicationSlotInfoList - List of replication slot info.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>PopulateShardSplitSubscriptionsMetadataList</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>shardSplitInfoHashMap</name></decl></parameter>,
											<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>replicationSlotInfoList</name></decl></parameter>,
											<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>shardGroupSplitIntervalListList</name></decl></parameter>,
											<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>workersForPlacementList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>shardSplitInfoHashMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>PublicationInfo</name> <modifier>*</modifier></type><name>publication</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>logicalRepTargetList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>publication</name> <operator>=</operator> <operator>(</operator><name>PublicationInfo</name> <operator>*</operator><operator>)</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>nodeId</name> <init>= <expr><name><name>publication</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>nodeId</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type> <name>tableOwnerId</name> <init>= <expr><name><name>publication</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>tableOwnerId</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>LogicalRepTarget</name> <modifier>*</modifier></type><name>target</name> <init>=
			<expr><call><name>CreateLogicalRepTarget</name><argument_list>(<argument><expr><name>tableOwnerId</name></expr></argument>, <argument><expr><name>nodeId</name></expr></argument>,
								   <argument><expr><name>replicationSlotInfoList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>publication</name></name> <operator>=</operator> <name>publication</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>publication</name><operator>-&gt;</operator><name>target</name></name> <operator>=</operator> <name>target</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>logicalRepTargetList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>logicalRepTargetList</name></expr></argument>, <argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardIntervalList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>shardIntervalList</argument>, <argument>shardGroupSplitIntervalListList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardInterval</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerPlacementNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<macro><name>forboth_ptr</name><argument_list>(<argument>shardInterval</argument>, <argument>shardIntervalList</argument>, <argument>workerPlacementNode</argument>,
					<argument>workersForPlacementList</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>NodeAndOwner</name></type> <name>key</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>nodeId</name></name> <operator>=</operator> <name><name>workerPlacementNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>tableOwnerId</name></name> <operator>=</operator> <call><name>TableOwnerOid</name><argument_list>(<argument><expr><name><name>shardInterval</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>publication</name> <operator>=</operator> <operator>(</operator><name>PublicationInfo</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(
				<argument><expr><name>ShardInfoHashMapForPublications</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
				<argument><expr><name>HASH_FIND</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Could not find publication matching a split"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>publication</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>newShards</name></name> <operator>=</operator> <call><name>lappend</name><argument_list>(
				<argument><expr><name><name>publication</name><operator>-&gt;</operator><name>target</name><operator>-&gt;</operator><name>newShards</name></name></expr></argument>, <argument><expr><name>shardInterval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block>

	<return>return <expr><name>logicalRepTargetList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Creates a 'LogicalRepTarget' structure for given table owner, node id.
 * It scans the list of 'ReplicationSlotInfo' to identify the corresponding slot
 * to be used for given tableOwnerId and nodeId.
 */</comment>
<function><type><specifier>static</specifier> <name>LogicalRepTarget</name> <modifier>*</modifier></type>
<name>CreateLogicalRepTarget</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>tableOwnerId</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>nodeId</name></decl></parameter>,
					   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>replicationSlotInfoList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LogicalRepTarget</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalRepTarget</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>subscriptionName</name></name> <operator>=</operator> <call><name>SubscriptionName</name><argument_list>(<argument><expr><name>SHARD_SPLIT</name></expr></argument>, <argument><expr><name>tableOwnerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>tableOwnerId</name></name> <operator>=</operator> <name>tableOwnerId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>subscriptionOwnerName</name></name> <operator>=</operator>
		<call><name>SubscriptionRoleName</name><argument_list>(<argument><expr><name>SHARD_SPLIT</name></expr></argument>, <argument><expr><name>tableOwnerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>superuserConnection</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Each 'ReplicationSlotInfo' belongs to a unique combination of node id and owner.
	 * Traverse the slot list to identify the corresponding slot for given
	 * table owner and node.
	 */</comment>
	<decl_stmt><decl><type><name>ReplicationSlotInfo</name> <modifier>*</modifier></type><name>replicationSlot</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>replicationSlot</argument>, <argument>replicationSlotInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>nodeId</name> <operator>==</operator> <name><name>replicationSlot</name><operator>-&gt;</operator><name>targetNodeId</name></name> <operator>&amp;&amp;</operator>
			<name>tableOwnerId</name> <operator>==</operator> <name><name>replicationSlot</name><operator>-&gt;</operator><name>tableOwnerId</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>target</name><operator>-&gt;</operator><name>replicationSlot</name></name> <operator>=</operator> <name>replicationSlot</name></expr>;</expr_stmt>

			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>target</name><operator>-&gt;</operator><name>replicationSlot</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><call><name>errmsg</name><argument_list>(
					<argument><expr><literal type="string">"Could not find replication slot matching a subscription %s"</literal></expr></argument>,
					<argument><expr><name><name>target</name><operator>-&gt;</operator><name>subscriptionName</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>target</name></expr>;</return>
</block_content>}</block></function>
</unit>
