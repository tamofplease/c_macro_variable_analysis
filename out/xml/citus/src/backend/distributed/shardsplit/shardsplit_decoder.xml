<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/shardsplit/shardsplit_decoder.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shardsplit_decoder.c
 *		Logical Replication output plugin
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardinterval_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardsplit_shared_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/logical.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>_PG_output_plugin_init</name><parameter_list>(<parameter><decl><type><name>OutputPluginCallbacks</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><specifier>static</specifier> <name>LogicalDecodeChangeCB</name></type> <name>pgoutputChangeCB</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>SourceToDestinationShardMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Plugin callback */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>split_change_cb</name><parameter_list>(<parameter><decl><type><name>LogicalDecodingContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ReorderBufferTXN</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>,
							<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>ReorderBufferChange</name> <modifier>*</modifier></type><name>change</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Helper methods */</comment>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>GetHashValueForIncomingTuple</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>sourceShardRelation</name></decl></parameter>,
											<parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
											<parameter><decl><type><name>int</name></type> <name>partitionColumIndex</name></decl></parameter>,
											<parameter><decl><type><name>Oid</name></type> <name>distributedTableOid</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>Oid</name></type> <name>FindTargetRelationOid</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>sourceShardRelation</name></decl></parameter>,
								 <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
								 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>currentSlotName</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HeapTuple</name></type> <name>GetTupleForTargetSchema</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>sourceRelationTuple</name></decl></parameter>,
										 <parameter><decl><type><name>TupleDesc</name></type> <name>sourceTupleDesc</name></decl></parameter>,
										 <parameter><decl><type><name>TupleDesc</name></type> <name>targetTupleDesc</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * Postgres uses 'pgoutput' as default plugin for logical replication.
 * We want to reuse Postgres pgoutput's functionality as much as possible.
 * Hence we load all the functions of this plugin and override as required.
 */</comment>
<function><type><name>void</name></type>
<name>_PG_output_plugin_init</name><parameter_list>(<parameter><decl><type><name>OutputPluginCallbacks</name> <modifier>*</modifier></type><name>cb</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LogicalOutputPluginInit</name></type> <name>plugin_init</name> <init>=
		<expr><operator>(</operator><name>LogicalOutputPluginInit</name><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <call><name>load_external_function</name><argument_list>(<argument><expr><literal type="string">"pgoutput"</literal></expr></argument>,
																  <argument><expr><literal type="string">"_PG_output_plugin_init"</literal></expr></argument>,
																  <argument><expr><name>false</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>plugin_init</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"output plugins have to declare the _PG_output_plugin_init symbol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* ask the output plugin to fill the callback struct */</comment>
	<expr_stmt><expr><call><name>plugin_init</name><argument_list>(<argument><expr><name>cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* actual pgoutput callback will be called with the appropriate destination shard */</comment>
	<expr_stmt><expr><name>pgoutputChangeCB</name> <operator>=</operator> <name><name>cb</name><operator>-&gt;</operator><name>change_cb</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>cb</name><operator>-&gt;</operator><name>change_cb</name></name> <operator>=</operator> <name>split_change_cb</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * split_change function emits the incoming tuple change
 * to the appropriate destination shard.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>split_change_cb</name><parameter_list>(<parameter><decl><type><name>LogicalDecodingContext</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>ReorderBufferTXN</name> <modifier>*</modifier></type><name>txn</name></decl></parameter>,
				<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>ReorderBufferChange</name> <modifier>*</modifier></type><name>change</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>is_publishable_relation</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>replicationSlotName</name> <init>= <expr><name><name>ctx</name><operator>-&gt;</operator><name>slot</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>name</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Initialize SourceToDestinationShardMap if not already initialized.
	 * This gets initialized during the replication of first message.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>SourceToDestinationShardMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>SourceToDestinationShardMap</name> <operator>=</operator> <call><name>PopulateSourceToDestinationShardMapForSlot</name><argument_list>(
			<argument><expr><name>replicationSlotName</name></expr></argument>, <argument><expr><name>TopMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>targetRelationOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<switch>switch <condition>(<expr><name><name>change</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>REORDER_BUFFER_CHANGE_INSERT</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTuple</name></type> <name>newTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>newtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>targetRelationOid</name> <operator>=</operator> <call><name>FindTargetRelationOid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>newTuple</name></expr></argument>,
													  <argument><expr><name>replicationSlotName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<comment type="block">/* updating non-partition column value */</comment>
		<case>case <expr><name>REORDER_BUFFER_CHANGE_UPDATE</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTuple</name></type> <name>newTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>newtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>targetRelationOid</name> <operator>=</operator> <call><name>FindTargetRelationOid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>newTuple</name></expr></argument>,
													  <argument><expr><name>replicationSlotName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>REORDER_BUFFER_CHANGE_DELETE</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>HeapTuple</name></type> <name>oldTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>oldtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>targetRelationOid</name> <operator>=</operator> <call><name>FindTargetRelationOid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>oldTuple</name></expr></argument>,
													  <argument><expr><name>replicationSlotName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<break>break;</break>
		</block_content>}</block>

		<comment type="block">/* Only INSERT/DELETE/UPDATE actions are visible in the replication path of split shard */</comment>
		<default>default:</default>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><call><name>errmsg</name><argument_list>(
						<argument><expr><literal type="string">"Unexpected Action :%d. Expected action is INSERT/DELETE/UPDATE"</literal></expr></argument>,
						<argument><expr><name><name>change</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></switch>

	<comment type="block">/* Current replication slot is not responsible for handling the change */</comment>
	<if_stmt><if>if <condition>(<expr><name>targetRelationOid</name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>targetRelation</name> <init>= <expr><call><name>RelationIdGetRelation</name><argument_list>(<argument><expr><name>targetRelationOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If any columns from source relation have been dropped, then the tuple needs to
	 * be formatted according to the target relation.
	 */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>sourceRelationDesc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>targetRelationDesc</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>targetRelation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>sourceRelationDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>&gt;</operator> <name><name>targetRelationDesc</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name><name>change</name><operator>-&gt;</operator><name>action</name></name></expr>)</condition>
		<block>{<block_content>
			<case>case <expr><name>REORDER_BUFFER_CHANGE_INSERT</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type> <name>sourceRelationNewTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>newtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type> <name>targetRelationNewTuple</name> <init>= <expr><call><name>GetTupleForTargetSchema</name><argument_list>(
					<argument><expr><name>sourceRelationNewTuple</name></expr></argument>, <argument><expr><name>sourceRelationDesc</name></expr></argument>, <argument><expr><name>targetRelationDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>newtuple</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <operator>*</operator><name>targetRelationNewTuple</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><name>REORDER_BUFFER_CHANGE_UPDATE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type> <name>sourceRelationNewTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>newtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type> <name>targetRelationNewTuple</name> <init>= <expr><call><name>GetTupleForTargetSchema</name><argument_list>(
					<argument><expr><name>sourceRelationNewTuple</name></expr></argument>, <argument><expr><name>sourceRelationDesc</name></expr></argument>, <argument><expr><name>targetRelationDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>newtuple</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <operator>*</operator><name>targetRelationNewTuple</name></expr>;</expr_stmt>

				<comment type="block">/*
				 * Format oldtuple according to the target relation. If the column values of replica
				 * identiy change, then the old tuple is non-null and needs to be formatted according
				 * to the target relation schema.
				 */</comment>
				<if_stmt><if>if <condition>(<expr><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>oldtuple</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>HeapTuple</name></type> <name>sourceRelationOldTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>oldtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>HeapTuple</name></type> <name>targetRelationOldTuple</name> <init>= <expr><call><name>GetTupleForTargetSchema</name><argument_list>(
						<argument><expr><name>sourceRelationOldTuple</name></expr></argument>,
						<argument><expr><name>sourceRelationDesc</name></expr></argument>,
						<argument><expr><name>targetRelationDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

					<expr_stmt><expr><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>oldtuple</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <operator>*</operator><name>targetRelationOldTuple</name></expr>;</expr_stmt>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><name>REORDER_BUFFER_CHANGE_DELETE</name></expr>:</case>
			<block>{<block_content>
				<decl_stmt><decl><type><name>HeapTuple</name></type> <name>sourceRelationOldTuple</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>oldtuple</name><operator>-&gt;</operator><name>tuple</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>HeapTuple</name></type> <name>targetRelationOldTuple</name> <init>= <expr><call><name>GetTupleForTargetSchema</name><argument_list>(
					<argument><expr><name>sourceRelationOldTuple</name></expr></argument>, <argument><expr><name>sourceRelationDesc</name></expr></argument>, <argument><expr><name>targetRelationDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name><name>change</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>tp</name><operator>.</operator><name>oldtuple</name><operator>-&gt;</operator><name>tuple</name></name> <operator>=</operator> <operator>*</operator><name>targetRelationOldTuple</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

			<comment type="block">/* Only INSERT/DELETE/UPDATE actions are visible in the replication path of split shard */</comment>
			<default>default:</default>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"Unexpected Action :%d. Expected action is INSERT/DELETE/UPDATE"</literal></expr></argument>,
							<argument><expr><name><name>change</name><operator>-&gt;</operator><name>action</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pgoutputChangeCB</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>targetRelation</name></expr></argument>, <argument><expr><name>change</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RelationClose</name><argument_list>(<argument><expr><name>targetRelation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * FindTargetRelationOid returns the destination relation Oid for the incoming
 * tuple.
 * sourceShardRelation - Relation on which a commit has happened.
 * tuple               - changed tuple.
 * currentSlotName     - Name of replication slot that is processing this update.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>FindTargetRelationOid</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>sourceShardRelation</name></decl></parameter>,
					  <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
					  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>currentSlotName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>targetRelationOid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>sourceShardRelationOid</name> <init>= <expr><name><name>sourceShardRelation</name><operator>-&gt;</operator><name>rd_id</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Get child shard list for source(parent) shard from hashmap*/</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SourceToDestinationShardMapEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
		<expr><operator>(</operator><name>SourceToDestinationShardMapEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(
			<argument><expr><name>SourceToDestinationShardMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sourceShardRelationOid</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Source shard Oid might not exist in the hash map. This can happen
	 * in below cases:
	 * 1) The commit can belong to any other table that is not under going split.
	 * 2) The commit can be recursive in nature. When the source shard
	 * receives a commit(a), the WAL sender processes this commit message. This
	 * commit is applied to a child shard which is placed on the same node as a
	 * part of replication. This in turn creates one more commit(b) which is recursive in nature.
	 * Commit 'b' should be skipped as the source shard and destination for commit 'b'
	 * are same and the commit has already been applied.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ShardSplitInfo</name> <modifier>*</modifier></type><name>shardSplitInfo</name> <init>= <expr><operator>(</operator><name>ShardSplitInfo</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><call><name>list_head</name><argument_list>(
																   <argument><expr><name><name>entry</name><operator>-&gt;</operator>
																   <name>shardSplitInfoList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>hashValue</name> <init>= <expr><call><name>GetHashValueForIncomingTuple</name><argument_list>(<argument><expr><name>sourceShardRelation</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>,
												 <argument><expr><name><name>shardSplitInfo</name><operator>-&gt;</operator><name>partitionColumnIndex</name></name></expr></argument>,
												 <argument><expr><name><name>shardSplitInfo</name><operator>-&gt;</operator><name>distributedTableOid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>shardSplitInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>shardSplitInfo</argument>, <argument>entry-&gt;shardSplitInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>shardSplitInfo</name><operator>-&gt;</operator><name>shardMinValue</name></name> <operator>&lt;=</operator> <name>hashValue</name> <operator>&amp;&amp;</operator>
			<name><name>shardSplitInfo</name><operator>-&gt;</operator><name>shardMaxValue</name></name> <operator>&gt;=</operator> <name>hashValue</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>targetRelationOid</name> <operator>=</operator> <name><name>shardSplitInfo</name><operator>-&gt;</operator><name>splitChildShardOid</name></name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>targetRelationOid</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetHashValueForIncomingTuple returns the hash value of the partition
 * column for the incoming tuple.
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type>
<name>GetHashValueForIncomingTuple</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>sourceShardRelation</name></decl></parameter>,
							 <parameter><decl><type><name>HeapTuple</name></type> <name>tuple</name></decl></parameter>,
							 <parameter><decl><type><name>int</name></type> <name>partitionColumnIndex</name></decl></parameter>,
							 <parameter><decl><type><name>Oid</name></type> <name>distributedTableOid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>relationTupleDes</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>sourceShardRelation</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_attribute</name></type> <name>partitionColumn</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>relationTupleDes</name></expr></argument>,
													  <argument><expr><name>partitionColumnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>partitionColumnValue</name> <init>= <expr><call><name>heap_getattr</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>,
											  <argument><expr><name>partitionColumnIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
											  <argument><expr><name>relationTupleDes</name></expr></argument>,
											  <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typeEntry</name> <init>= <expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
												  <argument><expr><name>TYPECACHE_HASH_PROC_FINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* get hashed value of the distribution value */</comment>
	<decl_stmt><decl><type><name>Datum</name></type> <name>hashedValueDatum</name> <init>= <expr><call><name>FunctionCall1Coll</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>typeEntry</name><operator>-&gt;</operator><name>hash_proc_finfo</name></name><operator>)</operator></expr></argument>,
											   <argument><expr><name><name>typeEntry</name><operator>-&gt;</operator><name>typcollation</name></name></expr></argument>,
											   <argument><expr><name>partitionColumnValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>hashedValueDatum</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetTupleForTargetSchema returns a tuple with the schema of the target relation.
 * If some columns within the source relations are dropped, we would have to reformat
 * the tuple to match the schema of the target relation.
 *
 * Consider the below scenario:
 * Session1 : Drop column followed by create_distributed_table_concurrently
 * Session2 : Concurrent insert workload
 *
 * The child shards created by create_distributed_table_concurrently will have less columns
 * than the source shard because some column were dropped.
 * The incoming tuple from session2 will have more columns as the writes
 * happened on source shard. But now the tuple needs to be applied on child shard. So we need to format
 * it according to child schema.
 */</comment>
<function><type><specifier>static</specifier> <name>HeapTuple</name></type>
<name>GetTupleForTargetSchema</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>sourceRelationTuple</name></decl></parameter>,
						<parameter><decl><type><name>TupleDesc</name></type> <name>sourceRelDesc</name></decl></parameter>,
						<parameter><decl><type><name>TupleDesc</name></type> <name>targetRelDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Deform the tuple */</comment>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>oldValues</name> <init>= <expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>sourceRelDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>oldNulls</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>sourceRelDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>sourceRelationTuple</name></expr></argument>, <argument><expr><name>sourceRelDesc</name></expr></argument>, <argument><expr><name>oldValues</name></expr></argument>,
					  <argument><expr><name>oldNulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* Create new tuple by skipping dropped columns */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nextAttributeIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>newValues</name> <init>= <expr><operator>(</operator><name>Datum</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>targetRelDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>newNulls</name> <init>= <expr><operator>(</operator><name>bool</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><name><name>targetRelDesc</name><operator>-&gt;</operator><name>natts</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>sourceRelDesc</name><operator>-&gt;</operator><name>natts</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>sourceRelDesc</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>attisdropped</name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>newValues</name><index>[<expr><name>nextAttributeIndex</name></expr>]</index></name> <operator>=</operator> <name><name>oldValues</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>newNulls</name><index>[<expr><name>nextAttributeIndex</name></expr>]</index></name> <operator>=</operator> <name><name>oldNulls</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>nextAttributeIndex</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>targetRelationTuple</name> <init>= <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>targetRelDesc</name></expr></argument>, <argument><expr><name>newValues</name></expr></argument>, <argument><expr><name>newNulls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>targetRelationTuple</name></expr>;</return>
</block_content>}</block></function>
</unit>
