<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/commands/local_multi_copy.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * local_multi_copy.c
 *    Commands for running a copy locally
 *
 * For each local placement, we have a buffer. When we receive a slot
 * from a copy, the slot will be put to the corresponding buffer based
 * on the shard id. When the buffer size exceeds the threshold a local
 * copy will be done. Also If we reach to the end of copy, we will send
 * the current buffer for local copy.
 *
 * The existing logic from multi_copy.c and format are used, therefore
 * even if user did not do a copy with binary format, it is possible that
 * we are going to be using binary format internally.
 *
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include> <comment type="block">/* for htons */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transmit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_results.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_partitioning_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>

<comment type="block">/* managed via GUC, default is 512 kB */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>LocalCopyFlushThresholdByte</name> <init>= <expr><literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddSlotToBuffer</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>CitusCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>,
							<parameter><decl><type><name>CopyOutState</name></type> <name>localCopyOutState</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShouldAddBinaryHeaders</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBinary</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShouldSendCopyNow</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DoLocalCopy</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>shardId</name></decl></parameter>,
						<parameter><decl><type><name>CopyStmt</name> <modifier>*</modifier></type><name>copyStatement</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isEndOfCopy</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadFromLocalBufferCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minRead</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxRead</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * LocalCopyBuffer is used in copy callback to return the copied rows.
 * The reason this is a global variable is that we cannot pass an additional
 * argument to the copy callback.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>StringInfo</name></type> <name>LocalCopyBuffer</name></decl>;</decl_stmt>


<comment type="block">/*
 * WriteTupleToLocalShard adds the given slot and does a local copy if
 * this is the end of copy, or the buffer size exceeds the threshold.
 */</comment>
<function><type><name>void</name></type>
<name>WriteTupleToLocalShard</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>CitusCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>, <parameter><decl><type><name>int64</name></type>
					   <name>shardId</name></decl></parameter>,
					   <parameter><decl><type><name>CopyOutState</name></type> <name>localCopyOutState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Since we are doing a local copy, the following statements should
	 * use local execution to see the changes
	 */</comment>
	<expr_stmt><expr><call><name>SetLocalExecutionStatus</name><argument_list>(<argument><expr><name>LOCAL_EXECUTION_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isBinaryCopy</name> <init>= <expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>ShouldAddBinaryHeaders</name><argument_list>(<argument><expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name>isBinaryCopy</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendCopyBinaryHeaders</name><argument_list>(<argument><expr><name>localCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>AddSlotToBuffer</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>copyDest</name></expr></argument>, <argument><expr><name>localCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ShouldSendCopyNow</name><argument_list>(<argument><expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>isBinaryCopy</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * We're going to flush the buffer to disk by effectively doing a full
			 * COPY command. Hence we also need to add footers to the current buffer.
			 */</comment>
			<expr_stmt><expr><call><name>AppendCopyBinaryFooters</name><argument_list>(<argument><expr><name>localCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isEndOfCopy</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>DoLocalCopy</name><argument_list>(<argument><expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>distributedRelationId</name></name></expr></argument>,
					<argument><expr><name>shardId</name></expr></argument>,
					<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyStatement</name></name></expr></argument>, <argument><expr><name>isEndOfCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * WriteTupleToLocalFile adds the given slot and does a local copy to the
 * file if the buffer size exceeds the threshold.
 */</comment>
<function><type><name>void</name></type>
<name>WriteTupleToLocalFile</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>CitusCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>,
					  <parameter><decl><type><name>int64</name></type> <name>shardId</name></decl></parameter>, <parameter><decl><type><name>CopyOutState</name></type> <name>localFileCopyOutState</name></decl></parameter>,
					  <parameter><decl><type><name>FileCompat</name> <modifier>*</modifier></type><name>fileCompat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>AddSlotToBuffer</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>copyDest</name></expr></argument>, <argument><expr><name>localFileCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ShouldSendCopyNow</name><argument_list>(<argument><expr><name><name>localFileCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>WriteToLocalFile</name><argument_list>(<argument><expr><name><name>localFileCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name>fileCompat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>localFileCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * FinishLocalCopyToShard finishes local copy for the given shard with the shard id.
 */</comment>
<function><type><name>void</name></type>
<name>FinishLocalCopyToShard</name><parameter_list>(<parameter><decl><type><name>CitusCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>shardId</name></decl></parameter>,
					   <parameter><decl><type><name>CopyOutState</name></type> <name>localCopyOutState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isBinaryCopy</name> <init>= <expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isBinaryCopy</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendCopyBinaryFooters</name><argument_list>(<argument><expr><name>localCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isEndOfCopy</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>DoLocalCopy</name><argument_list>(<argument><expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>, <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>distributedRelationId</name></name></expr></argument>, <argument><expr><name>shardId</name></expr></argument>,
				<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyStatement</name></name></expr></argument>, <argument><expr><name>isEndOfCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * FinishLocalCopyToFile finishes local copy for the given file.
 */</comment>
<function><type><name>void</name></type>
<name>FinishLocalCopyToFile</name><parameter_list>(<parameter><decl><type><name>CopyOutState</name></type> <name>localFileCopyOutState</name></decl></parameter>, <parameter><decl><type><name>FileCompat</name> <modifier>*</modifier></type><name>fileCompat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>data</name> <init>= <expr><name><name>localFileCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isBinaryCopy</name> <init>= <expr><name><name>localFileCopyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isBinaryCopy</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendCopyBinaryFooters</name><argument_list>(<argument><expr><name>localFileCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>WriteToLocalFile</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>fileCompat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>localFileCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FileClose</name><argument_list>(<argument><expr><name><name>fileCompat</name><operator>-&gt;</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * AddSlotToBuffer serializes the given slot and adds it to
 * the buffer in localCopyOutState.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddSlotToBuffer</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>CitusCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>, <parameter><decl><type><name>CopyOutState</name></type>
				<name>localCopyOutState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>columnValues</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>columnNulls</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>columnOutputFunctions</name> <init>= <expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CopyCoercionData</name> <modifier>*</modifier></type><name>columnCoercionPaths</name> <init>= <expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnCoercionPaths</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AppendCopyRowData</name><argument_list>(<argument><expr><name>columnValues</name></expr></argument>, <argument><expr><name>columnNulls</name></expr></argument>, <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tupleDescriptor</name></name></expr></argument>,
					  <argument><expr><name>localCopyOutState</name></expr></argument>, <argument><expr><name>columnOutputFunctions</name></expr></argument>,
					  <argument><expr><name>columnCoercionPaths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldSendCopyNow returns true if the given buffer size exceeds the
 * local copy buffer size threshold.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShouldSendCopyNow</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* LocalCopyFlushThreshold is in bytes */</comment>
	<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>LocalCopyFlushThresholdByte</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DoLocalCopy finds the shard table from the distributed relation id, and copies the given
 * buffer into the shard.
 * CopyFrom calls ReadFromLocalBufferCallback to read bytes from the buffer
 * as though it was reading from stdin. It then parses the tuples and
 * writes them to the shardOid table.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DoLocalCopy</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>shardId</name></decl></parameter>, <parameter><decl><type><name>CopyStmt</name> <modifier>*</modifier></type><name>copyStatement</name></decl></parameter>,
			<parameter><decl><type><name>bool</name></type> <name>isEndOfCopy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Set the buffer as a global variable to allow ReadFromLocalBufferCallback
	 * to read from it. We cannot pass additional arguments to
	 * ReadFromLocalBufferCallback.
	 */</comment>
	<expr_stmt><expr><name>LocalCopyBuffer</name> <operator>=</operator> <name>buffer</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>shardOid</name> <init>= <expr><call><name>GetTableLocalShardOid</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>shardId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>shard</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>shardOid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pState</name> <init>= <expr><call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>addRangeTableEntryForRelation</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>,
										 <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>CopyFromState</name></type> <name>cstate</name> <init>= <expr><call><name>BeginCopyFrom_compat</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>,
												<argument><expr><name>ReadFromLocalBufferCallback</name></expr></argument>,
												<argument><expr><name><name>copyStatement</name><operator>-&gt;</operator><name>attlist</name></name></expr></argument>,
												<argument><expr><name><name>copyStatement</name><operator>-&gt;</operator><name>options</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>cstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EndCopyFrom</name><argument_list>(<argument><expr><name>cstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_parsestate</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldAddBinaryHeaders returns true if the given buffer
 * is empty and the format is binary.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShouldAddBinaryHeaders</name><parameter_list>(<parameter><decl><type><name>StringInfo</name></type> <name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isBinary</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isBinary</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name><name>buffer</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ReadFromLocalBufferCallback is the copy callback.
 * It always tries to copy maxRead bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ReadFromLocalBufferCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minRead</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>avail</name> <init>= <expr><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bytesToRead</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>avail</name></expr></argument>, <argument><expr><name>maxRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy_s</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>bytesRead</name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>

	<return>return <expr><name>bytesRead</name></expr>;</return>
</block_content>}</block></function>
</unit>
