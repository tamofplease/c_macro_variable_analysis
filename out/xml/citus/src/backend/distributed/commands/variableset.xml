<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/commands/variableset.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * variableset.c
 *    Support for propagation of SET (commands to set variables)
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/utility_hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/resource_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lib/ilist.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>

<comment type="block">/*
 * ShouldPropagateSetCommand determines whether a SET or RESET command should be
 * propagated to the workers.
 *
 * We currently propagate:
 * - SET LOCAL (for allowed settings)
 * - SET TRANSACTION
 * - RESET (for allowed settings)
 * - RESET ALL
 */</comment>
<function><type><name>bool</name></type>
<name>ShouldPropagateSetCommand</name><parameter_list>(<parameter><decl><type><name>VariableSetStmt</name> <modifier>*</modifier></type><name>setStmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PropagateSetCommands</name> <operator>!=</operator> <name>PROPSETCMD_LOCAL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* SET propagation is disabled */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name><name>setStmt</name><operator>-&gt;</operator><name>kind</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>VAR_SET_VALUE</name></expr>:</case>
		<case>case <expr><name>VAR_SET_CURRENT</name></expr>:</case>
		<case>case <expr><name>VAR_SET_DEFAULT</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* SET LOCAL on a safe setting */</comment>
			<return>return <expr><name><name>setStmt</name><operator>-&gt;</operator><name>is_local</name></name> <operator>&amp;&amp;</operator> <call><name>IsSettingSafeToPropagate</name><argument_list>(<argument><expr><name><name>setStmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>VAR_RESET</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* may need to reset prior SET LOCAL */</comment>
			<return>return <expr><call><name>IsSettingSafeToPropagate</name><argument_list>(<argument><expr><name><name>setStmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>VAR_RESET_ALL</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* always propagate RESET ALL since it might affect prior SET LOCALs */</comment>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>VAR_SET_MULTI</name></expr>:</case>
		<default>default:</default>
		<block>{<block_content>
			<comment type="block">/* SET TRANSACTION is similar to SET LOCAL */</comment>
			<return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>setStmt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"TRANSACTION"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>;</return>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
 * PostprocessVariableSetStmt actually does the work of propagating a provided SET stmt
 * to currently-participating worker nodes and adding the SET command test to a string
 * keeping track of all propagated SET commands since (sub-)xact start.
 */</comment>
<function><type><name>void</name></type>
<name>PostprocessVariableSetStmt</name><parameter_list>(<parameter><decl><type><name>VariableSetStmt</name> <modifier>*</modifier></type><name>setStmt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>setStmtString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dlist_iter</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>raiseInterrupts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>connectionList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* at present we only support SET LOCAL and SET TRANSACTION */</comment>
	<expr_stmt><expr><call><name>AssertArg</name><argument_list>(<argument><expr><call><name>ShouldPropagateSetCommand</name><argument_list>(<argument><expr><name>setStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* haven't seen any SET stmts so far in this (sub-)xact: initialize StringInfo */</comment>
	<if_stmt><if>if <condition>(<expr><name>activeSetStmts</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* see comments in PushSubXact on why we allocate this in TopTransactionContext */</comment>
		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>old_context</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>activeSetStmts</name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>old_context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* send text of SET stmt to participating nodes... */</comment>
	<macro><name>dlist_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;InProgressTransactions</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>dlist_container</name><argument_list>(<argument><expr><name>MultiConnection</name></expr></argument>, <argument><expr><name>transactionNode</name></expr></argument>,
													  <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>RemoteTransaction</name> <modifier>*</modifier></type><name>transaction</name> <init>= <expr><operator>&amp;</operator><name><name>connection</name><operator>-&gt;</operator><name>remoteTransaction</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>transaction</name><operator>-&gt;</operator><name>transactionFailed</name></name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SendRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>setStmtString</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>raiseErrors</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>HandleRemoteTransactionConnectionError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>raiseErrors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>connectionList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>connectionList</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>WaitForAllConnections</name><argument_list>(<argument><expr><name>connectionList</name></expr></argument>, <argument><expr><name>raiseInterrupts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ... and wait for the results */</comment>
	<macro><name>dlist_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;InProgressTransactions</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>dlist_container</name><argument_list>(<argument><expr><name>MultiConnection</name></expr></argument>, <argument><expr><name>transactionNode</name></expr></argument>,
													  <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>raiseErrors</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>RemoteTransaction</name> <modifier>*</modifier></type><name>transaction</name> <init>= <expr><operator>&amp;</operator><name><name>connection</name><operator>-&gt;</operator><name>remoteTransaction</name></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>transaction</name><operator>-&gt;</operator><name>transactionFailed</name></name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ClearResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>raiseErrors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* SET propagation successful: add to active SET stmt string */</comment>
	<expr_stmt><expr><call><name>appendStringInfoString</name><argument_list>(<argument><expr><name>activeSetStmts</name></expr></argument>, <argument><expr><name>setStmtString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* ensure semicolon on end to allow appending future SET stmts */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>pg_str_endswith</name><argument_list>(<argument><expr><name>setStmtString</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfoChar</name><argument_list>(<argument><expr><name>activeSetStmts</name></expr></argument>, <argument><expr><literal type="char">';'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
