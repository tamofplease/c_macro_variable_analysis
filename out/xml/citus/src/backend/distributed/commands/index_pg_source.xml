<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/commands/index_pg_source.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * index_pg_source.c
 *    Helper functions copy &amp; pasted from PostgreSQL source code.
 *    All the functions in this file is copied from
 *    postgres/src/backend/commands/indexcmds.c
 *
 * Portions Copyright (c) 1996-2018, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/distributed/commands/index_pg_source.c
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/defrem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>


<comment type="block">/* *INDENT-OFF* */</comment>

<comment type="block">/*
 * This function is copy &amp; paste from Postgres source code:
 * 		postgres/src/backend/commands/indexcmds.c
 *
 * Select the name to be used for an index.
 *
 * The argument list is pretty ad-hoc :-(
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>ChooseIndexName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tabname</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>namespaceId</name></decl></parameter>,
				<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>colnames</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>exclusionOpNames</name></decl></parameter>,
				<parameter><decl><type><name>bool</name></type> <name>primary</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isconstraint</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>indexname</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>primary</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* the primary key's name does not depend on the specific column(s) */</comment>
		<expr_stmt><expr><name>indexname</name> <operator>=</operator> <call><name>ChooseRelationName</name><argument_list>(<argument><expr><name>tabname</name></expr></argument>,
									   <argument><expr><name>NULL</name></expr></argument>,
									   <argument><expr><literal type="string">"pkey"</literal></expr></argument>,
									   <argument><expr><name>namespaceId</name></expr></argument>,
									   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>exclusionOpNames</name> <operator>!=</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>indexname</name> <operator>=</operator> <call><name>ChooseRelationName</name><argument_list>(<argument><expr><name>tabname</name></expr></argument>,
									   <argument><expr><call><name>ChooseIndexNameAddition</name><argument_list>(<argument><expr><name>colnames</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><literal type="string">"excl"</literal></expr></argument>,
									   <argument><expr><name>namespaceId</name></expr></argument>,
									   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>isconstraint</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>indexname</name> <operator>=</operator> <call><name>ChooseRelationName</name><argument_list>(<argument><expr><name>tabname</name></expr></argument>,
									   <argument><expr><call><name>ChooseIndexNameAddition</name><argument_list>(<argument><expr><name>colnames</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><literal type="string">"key"</literal></expr></argument>,
									   <argument><expr><name>namespaceId</name></expr></argument>,
									   <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>indexname</name> <operator>=</operator> <call><name>ChooseRelationName</name><argument_list>(<argument><expr><name>tabname</name></expr></argument>,
									   <argument><expr><call><name>ChooseIndexNameAddition</name><argument_list>(<argument><expr><name>colnames</name></expr></argument>)</argument_list></call></expr></argument>,
									   <argument><expr><literal type="string">"idx"</literal></expr></argument>,
									   <argument><expr><name>namespaceId</name></expr></argument>,
									   <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>indexname</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * This function is copy &amp; paste from Postgres source code:
 * 		postgres/src/backend/commands/indexcmds.c
 *
 * Generate "name2" for a new index given the list of column names for it
 * (as produced by ChooseIndexColumnNames).  This will be passed to
 * ChooseRelationName along with the parent table name and a suitable label.
 *
 * We know that less than NAMEDATALEN characters will actually be used,
 * so we can truncate the result once we've generated that many.
 *
 * XXX See also ChooseForeignKeyConstraintNameAddition and
 * ChooseExtendedStatisticNameAddition.
 */</comment>
<function><type><name>char</name> <modifier>*</modifier></type>
<name>ChooseIndexNameAddition</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>colnames</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NAMEDATALEN</name> <operator>*</operator> <literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>buflen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>colnames</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>buf</name><index>[<expr><name>buflen</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <literal type="char">'_'</literal></expr>;</expr_stmt>    <comment type="block">/* insert _ between names */</comment>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * At this point we have buflen &lt;= NAMEDATALEN.  name should be less
		 * than NAMEDATALEN already, but use strlcpy for paranoia.
		 */</comment>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buflen</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>buflen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>buflen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>buflen</name> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 *  * This function is copy &amp; paste from Postgres source code:
 * 		postgres/src/backend/commands/indexcmds.c
 *
 * Select the actual names to be used for the columns of an index, given the
 * list of IndexElems for the columns.  This is mostly about ensuring the
 * names are unique so we don't get a conflicting-attribute-names error.
 *
 * Returns a List of plain strings (char *, not String nodes).
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ChooseIndexColumnNames</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>indexElems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc</name></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>lc</argument>, <argument>indexElems</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>IndexElem</name> <modifier>*</modifier></type><name>ielem</name> <init>= <expr><operator>(</operator><name>IndexElem</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>origname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>curname</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>NAMEDATALEN</name></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/* Get the preliminary name from the IndexElem */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>ielem</name><operator>-&gt;</operator><name>indexcolname</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>origname</name> <operator>=</operator> <name><name>ielem</name><operator>-&gt;</operator><name>indexcolname</name></name></expr>;</expr_stmt> <comment type="block">/* caller-specified name */</comment>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>ielem</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>origname</name> <operator>=</operator> <name><name>ielem</name><operator>-&gt;</operator><name>name</name></name></expr>;</expr_stmt> <comment type="block">/* simple column reference */</comment>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name>origname</name> <operator>=</operator> <literal type="string">"expr"</literal></expr>;</expr_stmt>  <comment type="block">/* default name for expression */</comment>
		</block_content>}</block></else></if_stmt>

		<comment type="block">/* If it conflicts with any previous column, tweak it */</comment>
		<expr_stmt><expr><name>curname</name> <operator>=</operator> <name>origname</name></expr>;</expr_stmt>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init><condition>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>lc2</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name><name>nbuf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>nlen</name></decl>;</decl_stmt>

			<macro><name>foreach</name><argument_list>(<argument>lc2</argument>, <argument>result</argument>)</argument_list></macro>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>curname</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>lc2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
				<block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block>
			<if_stmt><if>if <condition>(<expr><name>lc2</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<break>break;</break>          <comment type="block">/* found nonconflicting name */</comment>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* lgtm[cpp/banned-api-usage-required-any] */</comment>

			<comment type="block">/* Ensure generated names are shorter than NAMEDATALEN */</comment>
			<expr_stmt><expr><name>nlen</name> <operator>=</operator> <call><name>pg_mbcliplen</name><argument_list>(<argument><expr><name>origname</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>origname</name></expr></argument>)</argument_list></call></expr></argument>,
								<argument><expr><name>NAMEDATALEN</name> <operator>-</operator> <literal type="number">1</literal> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>origname</name></expr></argument>, <argument><expr><name>nlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* lgtm[cpp/banned-api-usage-required-any] */</comment>
			<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>nlen</name></expr></argument>, <argument><expr><name>nbuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* lgtm[cpp/banned-api-usage-required-any] */</comment>
			<expr_stmt><expr><name>curname</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>
		</block_content>}</block></for>

		<comment type="block">/* And attach to the result list */</comment>
		<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>curname</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* *INDENT-ON* */</comment>
</unit>
