<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/commands/rename.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * rename.c
 *    Commands for renaming objects related to distributed tables
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/utility_hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * PreprocessRenameStmt first determines whether a given rename statement involves
 * a distributed table. If so (and if it is supported, i.e. renames a column),
 * it creates a DDLJob to encapsulate information needed during the worker node
 * portion of DDL execution before returning that DDLJob in a List. If no dis-
 * tributed table is involved, this function returns NIL.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>PreprocessRenameStmt</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>renameCommand</name></decl></parameter>,
					 <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>processUtilityContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>renameStmt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>RenameStmt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>objectRelationId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt> <comment type="block">/* SQL Object OID */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tableRelationId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt> <comment type="block">/* Relation OID, maybe not the same. */</comment>

	<comment type="block">/*
	 * We only support some of the PostgreSQL supported RENAME statements, and
	 * our list include only renaming table, index, policy and view (related) objects.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsAlterTableRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>IsIndexRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>IsPolicyRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<operator>!</operator><call><name>IsViewRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * The lock levels here should be same as the ones taken in
	 * RenameRelation(), renameatt() and RenameConstraint(). All statements
	 * have identical lock levels except alter index rename.
	 */</comment>
	<decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>IsIndexRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then>
						<expr><name>ShareUpdateExclusiveLock</name></expr> </then><else>: <expr><name>AccessExclusiveLock</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>objectRelationId</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>renameStmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>,
										<argument><expr><name><name>renameStmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If the table does not exist, don't do anything here to allow PostgreSQL
	 * to throw the appropriate error or notice message later.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>objectRelationId</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Check whether we are dealing with a sequence or view here and route queries
	 * accordingly to the right processor function. We need to check both objects here
	 * since PG supports targeting sequences and views with ALTER TABLE commands.
	 */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name>relKind</name> <init>= <expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name>objectRelationId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>stmtCopy</name> <init>= <expr><call><name>copyObject</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>stmtCopy</name><operator>-&gt;</operator><name>renameType</name></name> <operator>=</operator> <name>OBJECT_SEQUENCE</name></expr>;</expr_stmt>
		<return>return <expr><call><name>PreprocessRenameSequenceStmt</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>stmtCopy</name></expr></argument>, <argument><expr><name>renameCommand</name></expr></argument>,
											<argument><expr><name>processUtilityContext</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_VIEW</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>stmtCopy</name> <init>= <expr><call><name>copyObject</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>stmtCopy</name><operator>-&gt;</operator><name>relationType</name></name> <operator>=</operator> <name>OBJECT_VIEW</name></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>stmtCopy</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_TABLE</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>stmtCopy</name><operator>-&gt;</operator><name>renameType</name></name> <operator>=</operator> <name>OBJECT_VIEW</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<return>return <expr><call><name>PreprocessRenameViewStmt</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>stmtCopy</name></expr></argument>, <argument><expr><name>renameCommand</name></expr></argument>,
										<argument><expr><name>processUtilityContext</name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* we have no planning to do unless the table is distributed */</comment>
	<switch>switch <condition>(<expr><name><name>renameStmt</name><operator>-&gt;</operator><name>renameType</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_TABLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_FOREIGN_TABLE</name></expr>:</case>
		<case>case <expr><name>OBJECT_COLUMN</name></expr>:</case>
		<case>case <expr><name>OBJECT_TABCONSTRAINT</name></expr>:</case>
		<case>case <expr><name>OBJECT_POLICY</name></expr>:</case>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_INDEX</name> <operator>||</operator>
				<name>relKind</name> <operator>==</operator> <name>RELKIND_PARTITIONED_INDEX</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Although weird, postgres allows ALTER TABLE .. RENAME command
				 * on indexes. We don't want to break non-distributed tables,
				 * so allow.
				 */</comment>
				<expr_stmt><expr><name>tableRelationId</name> <operator>=</operator> <call><name>IndexGetRelation</name><argument_list>(<argument><expr><name>objectRelationId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* the target object is our tableRelationId. */</comment>
			<expr_stmt><expr><name>tableRelationId</name> <operator>=</operator> <name>objectRelationId</name></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>OBJECT_INDEX</name></expr>:</case>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
				<name>relKind</name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Although weird, postgres allows ALTER INDEX .. RENAME command
				 * on tables. We don't want to break non-distributed tables,
				 * so allow.
				 * Because of the weird syntax, we locked with wrong level, so relock
				 * the relation to acquire true level of lock. Same logic
				 * can be found in the function RenameRelation(RenameStmt) at tablecmds.c
				 */</comment>
				<expr_stmt><expr><call><name>UnlockRelationOid</name><argument_list>(<argument><expr><name>objectRelationId</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>objectRelationId</name> <operator>=</operator> <call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name><name>renameStmt</name><operator>-&gt;</operator><name>relation</name></name></expr></argument>,
													<argument><expr><name>AccessExclusiveLock</name></expr></argument>,
													<argument><expr><name><name>renameStmt</name><operator>-&gt;</operator><name>missing_ok</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>tableRelationId</name> <operator>=</operator> <name>objectRelationId</name></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * here, objRelationId points to the index relation entry, and we
			 * are interested into the entry of the table on which the index is
			 * defined.
			 */</comment>
			<expr_stmt><expr><name>tableRelationId</name> <operator>=</operator> <call><name>IndexGetRelation</name><argument_list>(<argument><expr><name>objectRelationId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<default>default:</default>

			<comment type="block">/*
			 * Nodes that are not supported by Citus: we pass-through to the
			 * main PostgreSQL executor. Any Citus-supported RenameStmt
			 * renameType must appear above in the switch, explicitly.
			 */</comment>
			<return>return <expr><name>NIL</name></expr>;</return>
	</block_content>}</block></switch>

	<decl_stmt><decl><type><name>bool</name></type> <name>isCitusRelation</name> <init>= <expr><call><name>IsCitusTable</name><argument_list>(<argument><expr><name>tableRelationId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isCitusRelation</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NIL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We might ERROR out on some commands, but only for Citus tables.
	 * That's why this test comes this late in the function.
	 */</comment>
	<expr_stmt><expr><call><name>ErrorIfUnsupportedRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>renameStmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_TABLE</name> <operator>||</operator>
		<name><name>renameStmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_FOREIGN_TABLE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SwitchToSequentialAndLocalExecutionIfRelationNameTooLong</name><argument_list>(<argument><expr><name>tableRelationId</name></expr></argument>,
																 <argument><expr><name><name>renameStmt</name><operator>-&gt;</operator><name>newname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>DDLJob</name> <modifier>*</modifier></type><name>ddlJob</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DDLJob</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ObjectAddressSet</name><argument_list>(<argument><expr><name><name>ddlJob</name><operator>-&gt;</operator><name>targetObjectAddress</name></name></expr></argument>, <argument><expr><name>RelationRelationId</name></expr></argument>, <argument><expr><name>tableRelationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ddlJob</name><operator>-&gt;</operator><name>metadataSyncCommand</name></name> <operator>=</operator> <name>renameCommand</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>ddlJob</name><operator>-&gt;</operator><name>taskList</name></name> <operator>=</operator> <call><name>DDLTaskList</name><argument_list>(<argument><expr><name>tableRelationId</name></expr></argument>, <argument><expr><name>renameCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><call><name>list_make1</name><argument_list>(<argument><expr><name>ddlJob</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ErrorIfUnsupportedRenameStmt errors out if the corresponding rename statement
 * operates on any part of a distributed table other than a column.
 *
 * Note: This function handles RenameStmt applied to relations handed by Citus.
 * At the moment of writing this comment, it could be either tables or indexes.
 */</comment>
<function><type><name>void</name></type>
<name>ErrorIfUnsupportedRenameStmt</name><parameter_list>(<parameter><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>renameStmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsAlterTableRenameStmt</name><argument_list>(<argument><expr><name>renameStmt</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
		<name><name>renameStmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_TABCONSTRAINT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"renaming constraints belonging to distributed tables is "</literal>
							   <literal type="string">"currently unsupported"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * PreprocessRenameAttributeStmt called for RenameStmt's that are targetting an attribute eg.
 * type attributes. Based on the relation type the attribute gets renamed it dispatches to
 * a specialized implementation if present, otherwise return an empty list for its DDLJobs
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>PreprocessRenameAttributeStmt</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>,
							  <parameter><decl><type><name>ProcessUtilityContext</name></type> <name>processUtilityContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RenameStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>RenameStmt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>stmt</name><operator>-&gt;</operator><name>renameType</name></name> <operator>==</operator> <name>OBJECT_ATTRIBUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<switch>switch <condition>(<expr><name><name>stmt</name><operator>-&gt;</operator><name>relationType</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OBJECT_TYPE</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>PreprocessRenameTypeAttributeStmt</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>,
													 <argument><expr><name>processUtilityContext</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<comment type="block">/* unsupported relation for attribute rename, do nothing */</comment>
			<return>return <expr><name>NIL</name></expr>;</return>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
