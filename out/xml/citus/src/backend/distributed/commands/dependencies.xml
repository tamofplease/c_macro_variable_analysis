<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/commands/dependencies.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * dependencies.c
 *    Commands to create dependencies of an object on all workers.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaddress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/utility_hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata/distobject.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_sync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/relation_access_tracking.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_transaction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<typedef>typedef <function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>AddressPredicate</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl></typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnsureDependenciesCanBeDistributed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>relationAddress</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ErrorIfCircularDependencyExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>objectAddress</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ObjectAddressComparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>FilterObjectAddressListByPredicate</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>objectAddressList</name></decl></parameter>,
												 <parameter><decl><type><name>AddressPredicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnsureDependenciesExistOnAllNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>GetDependencyCreateDDLCommands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShouldPropagateObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * EnsureDependenciesExistOnAllNodes finds all the dependencies that we support and makes
 * sure these are available on all workers. If not available they will be created on the
 * workers via a separate session that will be committed directly so that the objects are
 * visible to potentially multiple sessions creating the shards.
 *
 * Note; only the actual objects are created via a separate session, the records to
 * pg_dist_object are created in this session. As a side effect the objects could be
 * created on the workers without a catalog entry. Updates to the objects on the coordinator
 * are not propagated to the workers until the record is visible on the coordinator.
 *
 * This is solved by creating the dependencies in an idempotent manner, either via
 * postgres native CREATE IF NOT EXISTS, or citus helper functions.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EnsureDependenciesExistOnAllNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependenciesWithCommands</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>ddlCommands</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If there is any unsupported dependency or circular dependency exists, Citus can
	 * not ensure dependencies will exist on all nodes.
	 */</comment>
	<expr_stmt><expr><call><name>EnsureDependenciesCanBeDistributed</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* collect all dependencies in creation order and get their ddl commands */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><call><name>GetDependenciesForObject</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>dependencies</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependencyCommands</name> <init>= <expr><call><name>GetDependencyCreateDDLCommands</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ddlCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>ddlCommands</name></expr></argument>, <argument><expr><name>dependencyCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* create a new list with dependencies that actually created commands */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>dependencyCommands</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>dependenciesWithCommands</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>dependenciesWithCommands</name></expr></argument>, <argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>ddlCommands</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* no ddl commands to be executed */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* since we are executing ddl commands lets disable propagation, primarily for mx */</comment>
	<expr_stmt><expr><name>ddlCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>DISABLE_DDL_PROPAGATION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ddlCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make sure that no new nodes are added after this point until the end of the
	 * transaction by taking a RowShareLock on pg_dist_node, which conflicts with the
	 * ExclusiveLock taken by citus_add_node.
	 * This guarantees that all active nodes will have the object, because they will
	 * either get it now, or get it in citus_add_node after this transaction finishes and
	 * the pg_dist_object record becomes visible.
	 */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><call><name>ActivePrimaryNonCoordinatorNodeList</name><argument_list>(<argument><expr><name>RowShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Lock dependent objects explicitly to make sure same DDL command won't be sent
	 * multiple times from parallel sessions.
	 *
	 * Sort dependencies that will be created on workers to not to have any deadlock
	 * issue if different sessions are creating different objects.
	 */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>addressSortedDependencies</name> <init>= <expr><call><name>SortList</name><argument_list>(<argument><expr><name>dependenciesWithCommands</name></expr></argument>,
											   <argument><expr><name>ObjectAddressComparator</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>addressSortedDependencies</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LockDatabaseObject</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>classId</name></name></expr></argument>, <argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>,
						   <argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectSubId</name></name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>workerNode</argument>, <argument>workerNodeList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodeName</name> <init>= <expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type> <name>nodePort</name> <init>= <expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>SendCommandListToWorkerOutsideTransaction</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>,
												  <argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>,
												  <argument><expr><name>ddlCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/*
	 * We do this after creating the objects on the workers, we make sure
	 * that objects have been created on worker nodes before marking them
	 * distributed, so MarkObjectDistributed wouldn't fail.
	 */</comment>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>dependenciesWithCommands</argument>)</argument_list></macro>
	<block>{<block_content>
		<comment type="block">/*
		 * pg_dist_object entries must be propagated with the super user, since
		 * the owner of the target object may not own dependencies but we must
		 * propagate as we send objects itself with the superuser.
		 *
		 * Only dependent object's metadata should be propagated with super user.
		 * Metadata of the table itself must be propagated with the current user.
		 */</comment>
		<expr_stmt><expr><call><name>MarkObjectDistributedViaSuperUser</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * EnsureAllObjectDependenciesExistOnAllNodes iteratively calls EnsureDependenciesExistOnAllNodes
 * for given targets.
 */</comment>
<function><type><name>void</name></type>
<name>EnsureAllObjectDependenciesExistOnAllNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>targets</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>target</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>target</argument>, <argument>targets</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>EnsureDependenciesExistOnAllNodes</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * EnsureDependenciesCanBeDistributed ensures all dependencies of the given object
 * can be distributed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EnsureDependenciesCanBeDistributed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>objectAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If the object circularcly depends to itself, Citus can not handle it */</comment>
	<expr_stmt><expr><call><name>ErrorIfCircularDependencyExists</name><argument_list>(<argument><expr><name>objectAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* If the object has any unsupported dependency, error out */</comment>
	<decl_stmt><decl><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type><name>depError</name> <init>= <expr><call><name>DeferErrorIfAnyObjectHasUnsupportedDependency</name><argument_list>(
		<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name>ObjectAddress</name> <operator>*</operator><operator>)</operator> <name>objectAddress</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>depError</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* override error detail as it is not applicable here*/</comment>
		<expr_stmt><expr><name><name>depError</name><operator>-&gt;</operator><name>detail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RaiseDeferredError</name><argument_list>(<argument><expr><name>depError</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ErrorIfCircularDependencyExists is a wrapper around
 * DeferErrorIfCircularDependencyExists(), and throws error
 * if circular dependency exists.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ErrorIfCircularDependencyExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>objectAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type><name>depError</name> <init>=
		<expr><call><name>DeferErrorIfCircularDependencyExists</name><argument_list>(<argument><expr><name>objectAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>depError</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RaiseDeferredError</name><argument_list>(<argument><expr><name>depError</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DeferErrorIfCircularDependencyExists checks whether given object has
 * circular dependency with itself. If so, returns a deferred error.
 */</comment>
<function><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type>
<name>DeferErrorIfCircularDependencyExists</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>objectAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><call><name>GetAllDependenciesForObject</name><argument_list>(<argument><expr><name>objectAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>dependencies</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>dependency</name><operator>-&gt;</operator><name>classId</name></name> <operator>==</operator> <name><name>objectAddress</name><operator>-&gt;</operator><name>classId</name></name> <operator>&amp;&amp;</operator>
			<name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name> <operator>==</operator> <name><name>objectAddress</name><operator>-&gt;</operator><name>objectId</name></name> <operator>&amp;&amp;</operator>
			<name><name>dependency</name><operator>-&gt;</operator><name>objectSubId</name></name> <operator>==</operator> <name><name>objectAddress</name><operator>-&gt;</operator><name>objectSubId</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>objectDescription</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

			<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_14</name></expr></cpp:if>
			<expr_stmt><expr><name>objectDescription</name> <operator>=</operator> <call><name>getObjectDescription</name><argument_list>(<argument><expr><name>objectAddress</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><name>objectDescription</name> <operator>=</operator> <call><name>getObjectDescription</name><argument_list>(<argument><expr><name>objectAddress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

			<decl_stmt><decl><type><name>StringInfo</name></type> <name>detailInfo</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>detailInfo</name></expr></argument>, <argument><expr><literal type="string">"\"%s\" circularly depends itself, resolve "</literal>
										 <literal type="string">"circular dependency first"</literal></expr></argument>, <argument><expr><name>objectDescription</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><call><name>DeferredError</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>,
								 <argument><expr><literal type="string">"Citus can not handle circular dependencies "</literal>
								 <literal type="string">"between distributed objects"</literal></expr></argument>, <argument><expr><name><name>detailInfo</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
								 <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Copied from PG object_address_comparator function to compare ObjectAddresses.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ObjectAddressComparator</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>obja</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ObjectAddress</name> <operator>*</operator><operator>)</operator> <name>a</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>objb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>ObjectAddress</name> <operator>*</operator><operator>)</operator> <name>b</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Primary sort key is OID descending.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>obja</name><operator>-&gt;</operator><name>objectId</name></name> <operator>&gt;</operator> <name><name>objb</name><operator>-&gt;</operator><name>objectId</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>obja</name><operator>-&gt;</operator><name>objectId</name></name> <operator>&lt;</operator> <name><name>objb</name><operator>-&gt;</operator><name>objectId</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Next sort on catalog ID, in case identical OIDs appear in different
	 * catalogs. Sort direction is pretty arbitrary here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>obja</name><operator>-&gt;</operator><name>classId</name></name> <operator>&lt;</operator> <name><name>objb</name><operator>-&gt;</operator><name>classId</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>obja</name><operator>-&gt;</operator><name>classId</name></name> <operator>&gt;</operator> <name><name>objb</name><operator>-&gt;</operator><name>classId</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Last, sort on object subId.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>obja</name><operator>-&gt;</operator><name>objectSubId</name></name> <operator>&lt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>objb</name><operator>-&gt;</operator><name>objectSubId</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>obja</name><operator>-&gt;</operator><name>objectSubId</name></name> <operator>&gt;</operator> <operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator> <name><name>objb</name><operator>-&gt;</operator><name>objectSubId</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetDistributableDependenciesForObject finds all the dependencies that Citus
 * can distribute and returns those dependencies regardless of their existency
 * on nodes.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>GetDistributableDependenciesForObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>target</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* local variables to work with dependencies */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>distributableDependencies</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* collect all dependencies in creation order */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><call><name>GetDependenciesForObject</name><argument_list>(<argument><expr><name>target</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* filter the ones that can be distributed */</comment>
	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>dependencies</argument>)</argument_list></macro>
	<block>{<block_content>
		<comment type="block">/*
		 * TODO: maybe we can optimize the logic applied in below line. Actually we
		 * do not need to create ddl commands as we are not ensuring their existence
		 * in nodes, but we utilize logic it follows to choose the objects that could
		 * be distributed
		 */</comment>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependencyCommands</name> <init>= <expr><call><name>GetDependencyCreateDDLCommands</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* create a new list with dependencies that actually created commands */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>dependencyCommands</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>distributableDependencies</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>distributableDependencies</name></expr></argument>, <argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>distributableDependencies</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetDependencyCreateDDLCommands returns a list (potentially empty or NIL) of ddl
 * commands to execute on a worker to create the object.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>GetDependencyCreateDDLCommands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><call><name>getObjectClass</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>OCLASS_CLASS</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name>relKind</name> <init>= <expr><call><name>get_rel_relkind</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * types have an intermediate dependency on a relation (aka class), so we do
			 * support classes when the relkind is composite
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_COMPOSITE_TYPE</name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>NIL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Indices are created separately, however, they do show up in the dependency
			 * list for a table since they will have potentially their own dependencies.
			 * The commands will be added to both shards and metadata tables via the table
			 * creation commands.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_INDEX</name> <operator>||</operator>
				<name>relKind</name> <operator>==</operator> <name>RELKIND_PARTITIONED_INDEX</name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>NIL</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator> <name>relKind</name> <operator>==</operator> <name>RELKIND_PARTITIONED_TABLE</name> <operator>||</operator>
				<name>relKind</name> <operator>==</operator> <name>RELKIND_FOREIGN_TABLE</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>Oid</name></type> <name>relationId</name> <init>= <expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>commandList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

				<if_stmt><if>if <condition>(<expr><call><name>IsCitusTable</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>)</condition>
				<block>{<block_content>
					<decl_stmt><decl><type><name>bool</name></type> <name>creatingShellTableOnRemoteNode</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>tableDDLCommands</name> <init>= <expr><call><name>GetFullTableCreationCommands</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>,
																		  <argument><expr><name>WORKER_NEXTVAL_SEQUENCE_DEFAULTS</name></expr></argument>,
																		  <argument><expr><name>creatingShellTableOnRemoteNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
					<decl_stmt><decl><type><name>TableDDLCommand</name> <modifier>*</modifier></type><name>tableDDLCommand</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
					<macro><name>foreach_ptr</name><argument_list>(<argument>tableDDLCommand</argument>, <argument>tableDDLCommands</argument>)</argument_list></macro>
					<block>{<block_content>
						<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>CitusIsA</name><argument_list>(<argument><expr><name>tableDDLCommand</name></expr></argument>, <argument><expr><name>TableDDLCommand</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>commandList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>commandList</name></expr></argument>, <argument><expr><call><name>GetTableDDLCommand</name><argument_list>(
												  <argument><expr><name>tableDDLCommand</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					</block_content>}</block>
				</block_content>}</block></if></if_stmt>

				<return>return <expr><name>commandList</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_SEQUENCE</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sequenceOwnerName</name> <init>= <expr><call><name>TableOwner</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<return>return <expr><call><name>DDLCommandsForSequence</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>, <argument><expr><name>sequenceOwnerName</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<if_stmt><if>if <condition>(<expr><name>relKind</name> <operator>==</operator> <name>RELKIND_VIEW</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>createViewCommand</name> <init>= <expr><call><name>CreateViewDDLCommand</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>alterViewOwnerCommand</name> <init>= <expr><call><name>AlterViewOwnerCommand</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<return>return <expr><call><name>list_make2</name><argument_list>(<argument><expr><name>createViewCommand</name></expr></argument>, <argument><expr><name>alterViewOwnerCommand</name></expr></argument>)</argument_list></call></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/* if this relation is not supported, break to the error at the end */</comment>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_COLLATION</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>CreateCollationDDLsIdempotent</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_CONSTRAINT</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/*
			 * Constraints can only be reached by domains, they resolve functions.
			 * Constraints themself are recreated by the domain recreation.
			 */</comment>
			<return>return <expr><name>NIL</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_DATABASE</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>databaseDDLCommands</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

			<comment type="block">/* only propagate the ownership of the database when the feature is on */</comment>
			<if_stmt><if>if <condition>(<expr><name>EnableAlterDatabaseOwner</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>ownerDDLCommands</name> <init>= <expr><call><name>DatabaseOwnerDDLCommands</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name>databaseDDLCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>databaseDDLCommands</name></expr></argument>, <argument><expr><name>ownerDDLCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><name>databaseDDLCommands</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_PROC</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>DDLCommands</name> <init>= <expr><call><name>CreateFunctionDDLCommandsIdempotent</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>grantDDLCommands</name> <init>= <expr><call><name>GrantOnFunctionDDLCommands</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>DDLCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>DDLCommands</name></expr></argument>, <argument><expr><name>grantDDLCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>DDLCommands</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_ROLE</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>GenerateCreateOrAlterRoleCommand</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_SCHEMA</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>schemaDDLCommand</name> <init>= <expr><call><name>CreateSchemaDDLCommand</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>DDLCommands</name> <init>= <expr><call><name>list_make1</name><argument_list>(<argument><expr><name>schemaDDLCommand</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>grantDDLCommands</name> <init>= <expr><call><name>GrantOnSchemaDDLCommands</name><argument_list>(<argument><expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>DDLCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>DDLCommands</name></expr></argument>, <argument><expr><name>grantDDLCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>DDLCommands</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_TSCONFIG</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>CreateTextSearchConfigDDLCommandsIdempotent</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_TSDICT</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>CreateTextSearchDictDDLCommandsIdempotent</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_TYPE</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>CreateTypeDDLCommandsIdempotent</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_EXTENSION</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>CreateExtensionDDLCommand</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>OCLASS_FOREIGN_SERVER</name></expr>:</case>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Oid</name></type> <name>serverId</name> <init>= <expr><name><name>dependency</name><operator>-&gt;</operator><name>objectId</name></name></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>DDLCommands</name> <init>= <expr><call><name>GetForeignServerCreateDDLCommand</name><argument_list>(<argument><expr><name>serverId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>grantDDLCommands</name> <init>= <expr><call><name>GrantOnForeignServerDDLCommands</name><argument_list>(<argument><expr><name>serverId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>DDLCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>DDLCommands</name></expr></argument>, <argument><expr><name>grantDDLCommands</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<return>return <expr><name>DDLCommands</name></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block>
	</block_content>}</block></switch>

	<comment type="block">/*
	 * make sure it fails hard when in debug mode, leave a hint for the user if this ever
	 * happens in production
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"unsupported object %s for distribution by citus"</literal></expr></argument>,
						   <argument><expr><call><name>getObjectTypeDescription_compat</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>,

	                                                       <comment type="block">/* missingOk: */</comment> <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errdetail</name><argument_list>(
						<argument><expr><literal type="string">"citus tries to recreate an unsupported object on its workers"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"please report a bug as this should not be happening"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetAllDependencyCreateDDLCommands iteratively calls GetDependencyCreateDDLCommands
 * for given dependencies.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>GetAllDependencyCreateDDLCommands</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier></type><name>dependencies</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>commands</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>dependencies</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>commands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>commands</name></expr></argument>, <argument><expr><call><name>GetDependencyCreateDDLCommands</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>commands</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ReplicateAllObjectsToNodeCommandList returns commands to replicate all
 * previously marked objects to a worker node. The function also sets
 * clusterHasDistributedFunction if there are any distributed functions.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ReplicateAllObjectsToNodeCommandList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* since we are executing ddl commands disable propagation first, primarily for mx */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>ddlCommands</name> <init>= <expr><call><name>list_make1</name><argument_list>(<argument><expr><name>DISABLE_DDL_PROPAGATION</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * collect all dependencies in creation order and get their ddl commands
	 */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dependencies</name> <init>= <expr><call><name>GetDistributedObjectAddressList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Depending on changes in the environment, such as the enable_metadata_sync guc
	 * there might be objects in the distributed object address list that should currently
	 * not be propagated by citus as they are 'not supported'.
	 */</comment>
	<expr_stmt><expr><name>dependencies</name> <operator>=</operator> <call><name>FilterObjectAddressListByPredicate</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>,
													  <argument><expr><operator>&amp;</operator><name>SupportedDependencyByCitus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * When dependency lists are getting longer we see a delay in the creation time on the
	 * workers. We would like to inform the user. Currently we warn for lists greater than
	 * 100 items, where 100 is an arbitrarily chosen number. If we find it too high or too
	 * low we can adjust this based on experience.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">100</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Replicating postgres objects to node %s:%d"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>,
								<argument><expr><name>nodePort</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"There are %d objects to replicate, depending on your "</literal>
								   <literal type="string">"environment this might take a while"</literal></expr></argument>,
								   <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>dependencies</name> <operator>=</operator> <call><name>OrderObjectAddressListInDependencyOrder</name><argument_list>(<argument><expr><name>dependencies</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>dependency</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dependency</argument>, <argument>dependencies</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IsAnyObjectAddressOwnedByExtension</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * we expect extension-owned objects to be created as a result
			 * of the extension being created.
			 */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>ddlCommands</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>ddlCommands</name></expr></argument>,
								  <argument><expr><call><name>GetDependencyCreateDDLCommands</name><argument_list>(<argument><expr><name>dependency</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><name>ddlCommands</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>ddlCommands</name></expr></argument>, <argument><expr><name>ENABLE_DDL_PROPAGATION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>ddlCommands</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldPropagate determines if we should be propagating anything
 */</comment>
<function><type><name>bool</name></type>
<name>ShouldPropagate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>creating_extension</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * extensions should be created separately on the workers, types cascading from an
		 * extension should therefore not be propagated.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableMetadataSync</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * we are configured to disable object propagation, should not propagate anything
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldPropagateCreateInCoordinatedTransction returns based the current state of the
 * session and policies if Citus needs to propagate the creation of new objects.
 *
 * Creation of objects on other nodes could be postponed till the object is actually used
 * in a sharded object (eg. distributed table or index on a distributed table). In certain
 * use cases the opportunity for parallelism in a transaction block is preferred. When
 * configured like that the creation of an object might be postponed and backfilled till
 * the object is actually used.
 */</comment>
<function><type><name>bool</name></type>
<name>ShouldPropagateCreateInCoordinatedTransction</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsMultiStatementTransaction</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we are in a single statement transaction we will always propagate the
		 * creation of objects. There are no downsides in regard to performance or
		 * transactional limitations. These only arise with transaction blocks consisting
		 * of multiple statements.
		 */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>MultiShardConnectionType</name> <operator>==</operator> <name>SEQUENTIAL_CONNECTION</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * If we are in a transaction that is already switched to sequential, either by
		 * the user, or automatically by an other command, we will always propagate the
		 * creation of new objects to the workers.
		 *
		 * This guarantees no strange anomalies when the transaction aborts or on
		 * visibility of the newly created object.
		 */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<switch>switch <condition>(<expr><name>CreateObjectPropagationMode</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CREATE_OBJECT_PROPAGATION_DEFERRED</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/*
			 * We prefer parallelism at this point. Since we did not already return while
			 * checking for sequential mode we are still in parallel mode. We don't want
			 * to switch that now, thus not propagating the creation.
			 */</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>CREATE_OBJECT_PROPAGATION_AUTOMATIC</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/*
			 * When we run in optimistic mode we want to switch to sequential mode, only
			 * if this would _not_ give an error to the user. Meaning, we either are
			 * already in sequential mode (checked earlier), or there has been no parallel
			 * execution in the current transaction block.
			 *
			 * If switching to sequential would throw an error we would stay in parallel
			 * mode while creating new objects. We will rely on Citus' mechanism to ensure
			 * the existence if the object would be used in the same transaction.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>ParallelQueryExecutedInTransaction</name><argument_list>()</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>

			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>CREATE_OBJECT_PROPAGATION_IMMEDIATE</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"unsupported ddl propagation mode"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldPropagateObject determines if we should be propagating DDLs based
 * on their object address.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShouldPropagateObject</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ObjectAddress</name> <modifier>*</modifier></type><name>address</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ShouldPropagate</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsAnyObjectDistributed</name><argument_list>(<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><operator>(</operator><name>ObjectAddress</name> <operator>*</operator><operator>)</operator> <name>address</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* do not propagate for non-distributed types */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldPropagateAnyObject determines if we should be propagating DDLs based
 * on their object addresses.
 */</comment>
<function><type><name>bool</name></type>
<name>ShouldPropagateAnyObject</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>addresses</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>address</argument>, <argument>addresses</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>ShouldPropagateObject</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FilterObjectAddressListByPredicate takes a list of ObjectAddress *'s and returns a list
 * only containing the ObjectAddress *'s for which the predicate returned true.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>FilterObjectAddressListByPredicate</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>objectAddressList</name></decl></parameter>, <parameter><decl><type><name>AddressPredicate</name></type> <name>predicate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ObjectAddress</name> <modifier>*</modifier></type><name>address</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>address</argument>, <argument>objectAddressList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>predicate</name><argument_list>(<argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
