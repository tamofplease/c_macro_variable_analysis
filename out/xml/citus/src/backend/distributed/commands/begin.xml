<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/commands/begin.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * begin.c
 *    Processing of the BEGIN command.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"c.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/parsenodes.h"</cpp:file></cpp:include>


<comment type="block">/*
 * SaveBeginCommandProperties stores the transaction properties passed
 * via BEGIN.
 */</comment>
<function><type><name>void</name></type>
<name>SaveBeginCommandProperties</name><parameter_list>(<parameter><decl><type><name>TransactionStmt</name> <modifier>*</modifier></type><name>transactionStmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>item</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * This loop is similar to the one in standard_ProcessUtility.
	 *
	 * While BEGIN can be quite frequent it will rarely have options set.
	 */</comment>
	<macro><name>foreach_ptr</name><argument_list>(<argument>item</argument>, <argument>transactionStmt-&gt;options</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>A_Const</name> <modifier>*</modifier></type><name>constant</name> <init>= <expr><operator>(</operator><name>A_Const</name> <operator>*</operator><operator>)</operator> <name><name>item</name><operator>-&gt;</operator><name>arg</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"transaction_read_only"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>intVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>constant</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>BeginXactReadOnly</name> <operator>=</operator> <name>BeginXactReadOnly_Enabled</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>BeginXactReadOnly</name> <operator>=</operator> <name>BeginXactReadOnly_Disabled</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>defname</name></name></expr></argument>, <argument><expr><literal type="string">"transaction_deferrable"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><call><name>intVal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>constant</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name>BeginXactDeferrable</name> <operator>=</operator> <name>BeginXactDeferrable_Enabled</name></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><name>BeginXactDeferrable</name> <operator>=</operator> <name>BeginXactDeferrable_Disabled</name></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
