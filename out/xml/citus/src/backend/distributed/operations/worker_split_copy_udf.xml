<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/operations/worker_split_copy_udf.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * worker_split_copy_udf.c
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_ruleutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/distribution_column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_results.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/array_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_shard_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/array.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>worker_split_copy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>SplitCopyInfo</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type> <name>destinationShardId</name></decl>;</decl_stmt>              <comment type="block">/* destination shard id */</comment>
	<decl_stmt><decl><type><name>Datum</name></type> <name>destinationShardMinHashValue</name></decl>;</decl_stmt>     <comment type="block">/* min hash value of destination shard */</comment>
	<decl_stmt><decl><type><name>Datum</name></type> <name>destinationShardMaxHashValue</name></decl>;</decl_stmt>     <comment type="block">/* max hash value of destination shard */</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>destinationShardNodeId</name></decl>;</decl_stmt>        <comment type="block">/* node where split child shard is to be placed */</comment>
}</block></struct></type> <name>SplitCopyInfo</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ParseSplitCopyInfoDatum</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>splitCopyInfoDatum</name></decl></parameter>,
									<parameter><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>splitCopyInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type> <name>CreateShardCopyDestReceivers</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
													<parameter><decl><type><name>ShardInterval</name> <modifier>*</modifier></type>
													<name>shardIntervalToSplitCopy</name></decl></parameter>,
													<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>DestReceiver</name> <modifier>*</modifier></type>  <name>CreatePartitionedSplitCopyDestReceiver</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>executor</name></decl></parameter>,
															  <parameter><decl><type><name>ShardInterval</name> <modifier>*</modifier></type>
															  <name>shardIntervalToSplitCopy</name></decl></parameter>,
															  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partitionColumnName</name></decl></parameter>,
															  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>BuildMinMaxRangeArrays</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier><modifier>*</modifier></type><name>minValueArray</name></decl></parameter>,
								   <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier><modifier>*</modifier></type><name>maxValueArray</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>TraceWorkerSplitCopyUdf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopySchemaName</name></decl></parameter>,
									  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopyPrefix</name></decl></parameter>,
									  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopyQualifiedName</name></decl></parameter>,
									  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * worker_split_copy(source_shard_id bigint, splitCopyInfo pg_catalog.split_copy_info[])
 * UDF to split copy shard to list of destination shards.
 * 'source_shard_id' : Source ShardId to split copy.
 * 'splitCopyInfos'   : Array of Split Copy Info (destination_shard's id, min/max ranges and node_id)
 */</comment>
<function><type><name>Datum</name></type>
<name>worker_split_copy</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>shardIdToSplitCopy</name> <init>= <expr><call><name>DatumGetUInt64</name><argument_list>(<argument><expr><call><name>PG_GETARG_DATUM</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardIntervalToSplitCopy</name> <init>= <expr><call><name>LoadShardInterval</name><argument_list>(<argument><expr><name>shardIdToSplitCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>partitionColumnText</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>partitionColumnName</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>partitionColumnText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>splitCopyInfoArrayObject</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>arrayHasNull</name> <init>= <expr><call><name>ARR_HASNULL</name><argument_list>(<argument><expr><name>splitCopyInfoArrayObject</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>arrayHasNull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"pg_catalog.split_copy_info array cannot contain null values"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>slice_ndim</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayMetaState</name> <modifier>*</modifier></type><name>mState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayIterator</name></type> <name>copyInfo_iterator</name> <init>= <expr><call><name>array_create_iterator</name><argument_list>(<argument><expr><name>splitCopyInfoArrayObject</name></expr></argument>,
															<argument><expr><name>slice_ndim</name></expr></argument>,
															<argument><expr><name>mState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>copyInfoDatum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><call><name>array_iterate</name><argument_list>(<argument><expr><name>copyInfo_iterator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>copyInfoDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier></type><name>splitCopyInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ParseSplitCopyInfoDatum</name><argument_list>(<argument><expr><name>copyInfoDatum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>splitCopyInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>splitCopyInfoList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>splitCopyInfoList</name></expr></argument>, <argument><expr><name>splitCopyInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>executor</name> <init>= <expr><call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>splitCopyDestReceiver</name> <init>= <expr><call><name>CreatePartitionedSplitCopyDestReceiver</name><argument_list>(<argument><expr><name>executor</name></expr></argument>,
																				 <argument><expr><name>shardIntervalToSplitCopy</name></expr></argument>,
																				 <argument><expr><name>partitionColumnName</name></expr></argument>,
																				 <argument><expr><name>splitCopyInfoList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>sourceShardToCopySchemaOId</name> <init>= <expr><call><name>get_rel_namespace</name><argument_list>(
		<argument><expr><name><name>shardIntervalToSplitCopy</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopySchemaName</name> <init>= <expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>sourceShardToCopySchemaOId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardPrefix</name> <init>= <expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>shardIntervalToSplitCopy</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopyName</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>sourceShardPrefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AppendShardIdToName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sourceShardToCopyName</name></expr></argument>, <argument><expr><name>shardIdToSplitCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopyQualifiedName</name> <init>= <expr><call><name>quote_qualified_identifier</name><argument_list>(
		<argument><expr><name>sourceShardToCopySchemaName</name></expr></argument>,
		<argument><expr><name>sourceShardToCopyName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>TraceWorkerSplitCopyUdf</name><argument_list>(<argument><expr><name>sourceShardToCopySchemaName</name></expr></argument>,
													   <argument><expr><name>sourceShardPrefix</name></expr></argument>,
													   <argument><expr><name>sourceShardToCopyQualifiedName</name></expr></argument>,
													   <argument><expr><name>splitCopyInfoList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>selectShardQueryForCopy</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>selectShardQueryForCopy</name></expr></argument>,
					 <argument><expr><literal type="string">"SELECT * FROM %s;"</literal></expr></argument>, <argument><expr><name>sourceShardToCopyQualifiedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ParamListInfo</name></type> <name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecuteQueryStringIntoDestReceiver</name><argument_list>(<argument><expr><name><name>selectShardQueryForCopy</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>params</name></expr></argument>,
									   <argument><expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>splitCopyDestReceiver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name>executor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Trace split copy udf */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>TraceWorkerSplitCopyUdf</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopySchemaName</name></decl></parameter>,
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopyPrefix</name></decl></parameter>,
						<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardToCopyQualifiedName</name></decl></parameter>,
						<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>splitCopyTrace</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>splitCopyTrace</name></expr></argument>, <argument><expr><literal type="string">"performing copy from shard %s to ["</literal></expr></argument>,
					 <argument><expr><name>sourceShardToCopyQualifiedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* split copy always has atleast two destinations */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>splitWayCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>splitCopyInfoList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier></type><name>splitCopyInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>splitCopyInfo</argument>, <argument>splitCopyInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shardNameCopy</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>sourceShardToCopyPrefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AppendShardIdToName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shardNameCopy</name></expr></argument>, <argument><expr><name><name>splitCopyInfo</name><operator>-&gt;</operator><name>destinationShardId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shardNameCopyQualifiedName</name> <init>= <expr><call><name>quote_qualified_identifier</name><argument_list>(
			<argument><expr><name>sourceShardToCopySchemaName</name></expr></argument>,
			<argument><expr><name>shardNameCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>splitCopyTrace</name></expr></argument>, <argument><expr><literal type="string">"%s (nodeId: %u)"</literal></expr></argument>, <argument><expr><name>shardNameCopyQualifiedName</name></expr></argument>,
						 <argument><expr><name><name>splitCopyInfo</name><operator>-&gt;</operator><name>destinationShardNodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shardNameCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <name>splitWayCount</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>splitCopyTrace</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>splitCopyTrace</name></expr></argument>, <argument><expr><literal type="string">"]"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name><name>splitCopyTrace</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Parse a single SplitCopyInfo Tuple */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ParseSplitCopyInfoDatum</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>splitCopyInfoDatum</name></decl></parameter>, <parameter><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>splitCopyInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HeapTupleHeader</name></type> <name>dataTuple</name> <init>= <expr><call><name>DatumGetHeapTupleHeader</name><argument_list>(<argument><expr><name>splitCopyInfoDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier></type><name>copyInfo</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SplitCopyInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>destinationShardIdDatum</name> <init>= <expr><call><name>GetAttributeByName</name><argument_list>(<argument><expr><name>dataTuple</name></expr></argument>, <argument><expr><literal type="string">"destination_shard_id"</literal></expr></argument>,
													   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"destination_shard_id for pg_catalog.split_copy_info cannot be null."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>copyInfo</name><operator>-&gt;</operator><name>destinationShardId</name></name> <operator>=</operator> <call><name>DatumGetUInt64</name><argument_list>(<argument><expr><name>destinationShardIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>minValueDatum</name> <init>= <expr><call><name>GetAttributeByName</name><argument_list>(<argument><expr><name>dataTuple</name></expr></argument>, <argument><expr><literal type="string">"destination_shard_min_value"</literal></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"destination_shard_min_value for pg_catalog.split_copy_info cannot be null."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>copyInfo</name><operator>-&gt;</operator><name>destinationShardMinHashValue</name></name> <operator>=</operator> <name>minValueDatum</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>maxValueDatum</name> <init>= <expr><call><name>GetAttributeByName</name><argument_list>(<argument><expr><name>dataTuple</name></expr></argument>, <argument><expr><literal type="string">"destination_shard_max_value"</literal></expr></argument>,
											 <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"destination_shard_max_value for pg_catalog.split_copy_info cannot be null."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>copyInfo</name><operator>-&gt;</operator><name>destinationShardMaxHashValue</name></name> <operator>=</operator> <name>maxValueDatum</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>nodeIdDatum</name> <init>= <expr><call><name>GetAttributeByName</name><argument_list>(<argument><expr><name>dataTuple</name></expr></argument>, <argument><expr><literal type="string">"destination_shard_node_id"</literal></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							<argument><expr><literal type="string">"destination_shard_node_id for pg_catalog.split_copy_info cannot be null."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name><name>copyInfo</name><operator>-&gt;</operator><name>destinationShardNodeId</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>nodeIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>splitCopyInfo</name> <operator>=</operator> <name>copyInfo</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* Build 'min/max' hash range arrays for PartitionedResultDestReceiver */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>BuildMinMaxRangeArrays</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier><modifier>*</modifier></type><name>minValueArray</name></decl></parameter>,
					   <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier><modifier>*</modifier></type><name>maxValueArray</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>partitionCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>splitCopyInfoList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>minValues</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>partitionCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>minValueNulls</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>partitionCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>maxValues</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>partitionCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>maxValueNulls</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>partitionCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier></type><name>splitCopyInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>splitCopyInfo</argument>, <argument>splitCopyInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name><name>minValues</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>splitCopyInfo</name><operator>-&gt;</operator><name>destinationShardMinHashValue</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>maxValues</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name><name>splitCopyInfo</name><operator>-&gt;</operator><name>destinationShardMaxHashValue</name></name></expr>;</expr_stmt>

		<comment type="block">/* Caller enforces that min/max values will be not-null */</comment>
		<expr_stmt><expr><name><name>minValueNulls</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>maxValueNulls</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><operator>*</operator><name>minValueArray</name> <operator>=</operator> <call><name>CreateArrayFromDatums</name><argument_list>(<argument><expr><name>minValues</name></expr></argument>, <argument><expr><name>minValueNulls</name></expr></argument>, <argument><expr><name>partitionCount</name></expr></argument>,
										   <argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>maxValueArray</name> <operator>=</operator> <call><name>CreateArrayFromDatums</name><argument_list>(<argument><expr><name>maxValues</name></expr></argument>, <argument><expr><name>maxValueNulls</name></expr></argument>, <argument><expr><name>partitionCount</name></expr></argument>,
										   <argument><expr><name>TEXTOID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Create underlying ShardCopyDestReceivers for PartitionedResultDestReceiver
 * Each ShardCopyDestReceivers will be responsible for copying tuples from source shard,
 * that fall under its min/max range, to specified destination shard.
 */</comment>
<function><type><specifier>static</specifier> <name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type>
<name>CreateShardCopyDestReceivers</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>, <parameter><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardIntervalToSplitCopy</name></decl></parameter>,
							 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type><name>shardCopyDests</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name><name>splitCopyInfoList</name><operator>-&gt;</operator><name>length</name></name> <operator>*</operator>
											<sizeof>sizeof<argument_list>(<argument><expr><name>DestReceiver</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SplitCopyInfo</name> <modifier>*</modifier></type><name>splitCopyInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sourceShardNamePrefix</name> <init>= <expr><call><name>get_rel_name</name><argument_list>(<argument><expr><name><name>shardIntervalToSplitCopy</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>splitCopyInfo</argument>, <argument>splitCopyInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>destinationShardSchemaOid</name> <init>= <expr><call><name>get_rel_namespace</name><argument_list>(
			<argument><expr><name><name>shardIntervalToSplitCopy</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardSchemaName</name> <init>= <expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>destinationShardSchemaOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardNameCopy</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>sourceShardNamePrefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>AppendShardIdToName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>destinationShardNameCopy</name></expr></argument>, <argument><expr><name><name>splitCopyInfo</name><operator>-&gt;</operator><name>destinationShardId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>shardCopyDest</name> <init>= <expr><call><name>CreateShardCopyDestReceiver</name><argument_list>(
			<argument><expr><name>estate</name></expr></argument>,
			<argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><name>destinationShardSchemaName</name></expr></argument>, <argument><expr><name>destinationShardNameCopy</name></expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name><name>splitCopyInfo</name><operator>-&gt;</operator><name>destinationShardNodeId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>shardCopyDests</name><index>[<expr><name>index</name></expr>]</index></name> <operator>=</operator> <name>shardCopyDest</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>index</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>shardCopyDests</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Create PartitionedSplitCopyDestReceiver along with underlying ShardCopyDestReceivers */</comment>
<function><type><specifier>static</specifier> <name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreatePartitionedSplitCopyDestReceiver</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name></decl></parameter>,
									   <parameter><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardIntervalToSplitCopy</name></decl></parameter>,
									   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partitionColumnName</name></decl></parameter>,
									   <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>splitCopyInfoList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Create underlying ShardCopyDestReceivers */</comment>
	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type><name>shardCopyDestReceivers</name> <init>= <expr><call><name>CreateShardCopyDestReceivers</name><argument_list>(
		<argument><expr><name>estate</name></expr></argument>,
		<argument><expr><name>shardIntervalToSplitCopy</name></expr></argument>,
		<argument><expr><name>splitCopyInfoList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* construct an artificial CitusTableCacheEntry for routing tuples to appropriate ShardCopyReceiver */</comment>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>minValuesArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>maxValuesArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>BuildMinMaxRangeArrays</name><argument_list>(<argument><expr><name>splitCopyInfoList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minValuesArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxValuesArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we currently only support hash-distribution */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name>partitionMethod</name> <init>= <expr><name>DISTRIBUTE_BY_HASH</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* synthetically build the partition column by looking at shard columns */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>shardId</name> <init>= <expr><name><name>shardIntervalToSplitCopy</name><operator>-&gt;</operator><name>shardId</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>missingOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>shardRelationId</name> <init>= <expr><call><name>LookupShardRelationFromCatalog</name><argument_list>(<argument><expr><name>shardId</name></expr></argument>, <argument><expr><name>missingOK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>partitionColumn</name> <init>= <expr><call><name>BuildDistributionKeyFromColumnName</name><argument_list>(<argument><expr><name>shardRelationId</name></expr></argument>,
															  <argument><expr><name>partitionColumnName</name></expr></argument>,
															  <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type><name>shardSearchInfo</name> <init>=
		<expr><call><name>QueryTupleShardSearchInfo</name><argument_list>(<argument><expr><name>minValuesArray</name></expr></argument>, <argument><expr><name>maxValuesArray</name></expr></argument>,
								  <argument><expr><name>partitionMethod</name></expr></argument>, <argument><expr><name>partitionColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Construct PartitionedResultDestReceiver from cache and underlying ShardCopyDestReceivers */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>partitionColumnIndex</name> <init>= <expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>varattno</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>partitionCount</name> <init>= <expr><name><name>splitCopyInfoList</name><operator>-&gt;</operator><name>length</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>splitCopyDestReceiver</name> <init>= <expr><call><name>CreatePartitionedResultDestReceiver</name><argument_list>(
		<argument><expr><name>partitionColumnIndex</name></expr></argument>,
		<argument><expr><name>partitionCount</name></expr></argument>,
		<argument><expr><name>shardSearchInfo</name></expr></argument>,
		<argument><expr><name>shardCopyDestReceivers</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument> <comment type="block">/* lazyStartup */</comment>,
		<argument><expr><name>false</name></expr></argument> <comment type="block">/* allowNullPartitionColumnValues */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>splitCopyDestReceiver</name></expr>;</return>
</block_content>}</block></function>
</unit>
