<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/operations/worker_shard_copy.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * worker_shard_copy.c
 *   Functions for copying a shard to destination.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_relation.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_shard_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/relation_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>

<comment type="block">/*
 * LocalCopyBuffer is used in copy callback to return the copied rows.
 * The reason this is a global variable is that we cannot pass an additional
 * argument to the copy callback.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>StringInfo</name></type> <name>LocalCopyBuffer</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>ShardCopyDestReceiver</name>
<block>{
	<comment type="block">/* public DestReceiver interface */</comment>
	<decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>

	<comment type="block">/* Destination Relation Name */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>destinationShardFullyQualifiedName</name></decl>;</decl_stmt>

	<comment type="block">/* descriptor of the tuples that are sent to the worker */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl>;</decl_stmt>

	<comment type="block">/* state on how to copy out data types */</comment>
	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>columnOutputFunctions</name></decl>;</decl_stmt>

	<comment type="block">/* number of tuples sent */</comment>
	<decl_stmt><decl><type><name>int64</name></type> <name>tuplesSent</name></decl>;</decl_stmt>

	<comment type="block">/* destination node id */</comment>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>destinationNodeId</name></decl>;</decl_stmt>

	<comment type="block">/* local copy if destination shard in same node */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>useLocalCopy</name></decl>;</decl_stmt>

	<comment type="block">/* EState for per-tuple memory allocation */</comment>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>executorState</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Connection for destination shard (NULL if useLocalCopy is true)
	 */</comment>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name></decl>;</decl_stmt>
}</block></struct></type> <name>ShardCopyDestReceiver</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShardCopyDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ShardCopyDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
										 <parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDescriptor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ShardCopyDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ShardCopyDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CanUseLocalCopy</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>destinationNodeId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>StringInfo</name></type> <name>ConstructShardCopyStatement</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>destinationShardFullyQualifiedName</name></decl></parameter>,
											  <parameter><decl><type><name>bool</name></type>
											  <name>useBinaryFormat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>WriteLocalTuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ReadFromLocalBufferCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minRead</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxRead</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LocalCopyToShard</name><parameter_list>(<parameter><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>, <parameter><decl><type><name>CopyOutState</name></type>
							 <name>localCopyOutState</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ConnectToRemoteAndStartCopy</name><parameter_list>(<parameter><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>CanUseLocalCopy</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>destinationNodeId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* If destination node is same as source, use local copy */</comment>
	<return>return <expr><call><name>GetLocalNodeId</name><argument_list>()</argument_list></call> <operator>==</operator> <operator>(</operator><name>int32</name><operator>)</operator> <name>destinationNodeId</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Connect to node with source shard and trigger copy start.  */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ConnectToRemoteAndStartCopy</name><parameter_list>(<parameter><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlags</name> <init>= <expr><name>OUTSIDE_TRANSACTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>currentUser</name> <init>= <expr><call><name>CurrentUserName</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>FindNodeWithNodeId</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationNodeId</name></name></expr></argument>,
												<argument><expr><name>false</name></expr></argument> <comment type="block">/* missingOk */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <call><name>GetNodeUserDatabaseConnection</name><argument_list>(<argument><expr><name>connectionFlags</name></expr></argument>,
														 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>,
														 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>,
														 <argument><expr><name>currentUser</name></expr></argument>,
														 <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* database (current) */</comment>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ClaimConnectionExclusively</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>copyStatement</name> <init>= <expr><call><name>ConstructShardCopyStatement</name><argument_list>(
		<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>,
		<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SendRemoteCommand</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>copyStatement</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>GetRemoteCommandResult</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>,
											  <argument><expr><name>true</name></expr></argument> <comment type="block">/* raiseInterrupts */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COPY_IN</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReportResultError</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CreateShardCopyDestReceiver creates a DestReceiver that copies into
 * a destinationShardFullyQualifiedName on destinationNodeId.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateShardCopyDestReceiver</name><parameter_list>(<parameter><decl><type><name>EState</name> <modifier>*</modifier></type><name>executorState</name></decl></parameter>,
							<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>destinationShardFullyQualifiedName</name></decl></parameter>,
							<parameter><decl><type><name>uint32_t</name></type> <name>destinationNodeId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name> <init>= <expr><operator>(</operator><name>ShardCopyDestReceiver</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardCopyDestReceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* set up the DestReceiver function pointers */</comment>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>ShardCopyDestReceiverReceive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>ShardCopyDestReceiverStartup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>ShardCopyDestReceiverShutdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>ShardCopyDestReceiverDestroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestCopyOut</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>executorState</name></name> <operator>=</operator> <name>executorState</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationNodeId</name></name> <operator>=</operator> <name>destinationNodeId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name> <operator>=</operator> <name>destinationShardFullyQualifiedName</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tuplesSent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>useLocalCopy</name></name> <operator>=</operator> <call><name>CanUseLocalCopy</name><argument_list>(<argument><expr><name>destinationNodeId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>copyDest</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShardCopyDestReceiverReceive implements the receiveSlot function of
 * ShardCopyDestReceiver. It takes a TupleTableSlot and sends the contents to
 * the appropriate destination node.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShardCopyDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name> <init>= <expr><operator>(</operator><name>ShardCopyDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Switch to a per-tuple memory memory context. When used in
	 * context of Split Copy, this is a no-op as switch is already done.
	 */</comment>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>executorState</name> <init>= <expr><name><name>copyDest</name><operator>-&gt;</operator><name>executorState</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>executorTupleContext</name> <init>= <expr><call><name>GetPerTupleMemoryContext</name><argument_list>(<argument><expr><name>executorState</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>executorTupleContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If remote copy, connect lazily and initiate copy */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>tuplesSent</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>copyDest</name><operator>-&gt;</operator><name>useLocalCopy</name></name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ConnectToRemoteAndStartCopy</name><argument_list>(<argument><expr><name>copyDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>columnValues</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>columnNulls</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name> <init>= <expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>useLocalCopy</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>WriteLocalTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>copyDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <name>LocalCopyFlushThresholdByte</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>LocalCopyToShard</name><argument_list>(<argument><expr><name>copyDest</name></expr></argument>, <argument><expr><name>copyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name> <operator>&amp;&amp;</operator> <name><name>copyDest</name><operator>-&gt;</operator><name>tuplesSent</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>AppendCopyBinaryHeaders</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>AppendCopyRowData</name><argument_list>(<argument><expr><name>columnValues</name></expr></argument>,
						  <argument><expr><name>columnNulls</name></expr></argument>,
						  <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tupleDescriptor</name></name></expr></argument>,
						  <argument><expr><name>copyOutState</name></expr></argument>,
						  <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr></argument>,
						  <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* columnCoercionPaths */</comment>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PutRemoteCopyData</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
							   <argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardSchemaName</name> <init>= <expr><call><name>linitial</name><argument_list>(
				<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardRelationName</name> <init>= <expr><call><name>lsecond</name><argument_list>(
				<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errorMessage</name> <init>= <expr><call><name>PQerrorMessage</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name><operator>-&gt;</operator><name>pgConn</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to COPY to shard %s.%s : %s,"</literal></expr></argument>,
								   <argument><expr><name>destinationShardSchemaName</name></expr></argument>,
								   <argument><expr><name>destinationShardRelationName</name></expr></argument>,
								   <argument><expr><name>errorMessage</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"failed to send %d bytes %s on node %u"</literal></expr></argument>,
									  <argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
									  <argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
									  <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationNodeId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetPerTupleExprContext</name><argument_list>(<argument><expr><name>executorState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tuplesSent</name></name><operator>++</operator></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShardCopyDestReceiverStartup implements the rStartup interface of ShardCopyDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShardCopyDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type>
							 <name>inputTupleDescriptor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name> <init>= <expr><operator>(</operator><name>ShardCopyDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tupleDescriptor</name></name> <operator>=</operator> <name>inputTupleDescriptor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tuplesSent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>delimiterCharacter</name> <init>= <expr><literal type="string">"\t"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>nullPrintCharacter</name> <init>= <expr><literal type="string">"\\N"</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* define how tuples will be serialised */</comment>
	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>copyOutState</name> <init>= <expr><operator>(</operator><name>CopyOutState</name><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CopyOutStateData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name> <operator>=</operator> <name>EnableBinaryProtocol</name> <operator>&amp;&amp;</operator> <call><name>CanUseBinaryCopyFormat</name><argument_list>(
		<argument><expr><name>inputTupleDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>null_print</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nullPrintCharacter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>null_print_client</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>nullPrintCharacter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name> <operator>=</operator> <call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>delim</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <name>delimiterCharacter</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>rowcontext</name></name> <operator>=</operator> <call><name>GetPerTupleMemoryContext</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>executorState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name> <operator>=</operator> <call><name>ColumnOutputFunctions</name><argument_list>(<argument><expr><name>inputTupleDescriptor</name></expr></argument>,
															<argument><expr><name><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name> <operator>=</operator> <name>copyOutState</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ShardCopyDestReceiverShutdown implements the rShutdown interface of
 * ShardCopyDestReceiver. It ends all open COPY operations, copying any pending
 * data in buffer.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShardCopyDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name> <init>= <expr><operator>(</operator><name>ShardCopyDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>useLocalCopy</name></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* end the COPY input */</comment>
			<expr_stmt><expr><call><name>LocalCopyToShard</name><argument_list>(<argument><expr><name>copyDest</name></expr></argument>, <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>AppendCopyBinaryFooters</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* end the COPY input */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PutRemoteCopyEnd</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* errormsg */</comment>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardSchemaName</name> <init>= <expr><call><name>linitial</name><argument_list>(
				<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardRelationName</name> <init>= <expr><call><name>lsecond</name><argument_list>(
				<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_IO_ERROR</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Failed to COPY to destination shard %s.%s"</literal></expr></argument>,
								   <argument><expr><name>destinationShardSchemaName</name></expr></argument>,
								   <argument><expr><name>destinationShardRelationName</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"failed to send %d bytes %s on node %u"</literal></expr></argument>,
									  <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name></expr></argument>,
									  <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
									  <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationNodeId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* check whether there were any COPY errors */</comment>
		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>GetRemoteCommandResult</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>,
												  <argument><expr><name>true</name></expr></argument> <comment type="block">/* raiseInterrupts */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>PQresultStatus</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>PGRES_COMMAND_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ReportCopyError</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>CloseConnection</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>connection</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ShardCopyDestReceiverDestroy frees the DestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShardCopyDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name> <init>= <expr><operator>(</operator><name>ShardCopyDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>copyDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ConstructShardCopyStatement constructs the text of a COPY statement
 * for copying into a result table
 */</comment>
<function><type><specifier>static</specifier> <name>StringInfo</name></type>
<name>ConstructShardCopyStatement</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>destinationShardFullyQualifiedName</name></decl></parameter>, <parameter><decl><type><name>bool</name></type>
							<name>useBinaryFormat</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardSchemaName</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>destinationShardFullyQualifiedName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardRelationName</name> <init>= <expr><call><name>lsecond</name><argument_list>(<argument><expr><name>destinationShardFullyQualifiedName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>command</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"COPY %s.%s FROM STDIN"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>destinationShardSchemaName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(
						 <argument><expr><name>destinationShardRelationName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>useBinaryFormat</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">" WITH (format binary);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>command</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* Write Tuple to Local Shard. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>WriteLocalTuple</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CopyOutState</name></type> <name>localCopyOutState</name> <init>= <expr><name><name>copyDest</name><operator>-&gt;</operator><name>copyOutState</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Since we are doing a local copy, the following statements should
	 * use local execution to see the changes
	 */</comment>
	<expr_stmt><expr><call><name>SetLocalExecutionStatus</name><argument_list>(<argument><expr><name>LOCAL_EXECUTION_REQUIRED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>isBinaryCopy</name> <init>= <expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>shouldAddBinaryHeaders</name> <init>= <expr><operator>(</operator><name>isBinaryCopy</name> <operator>&amp;&amp;</operator> <name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator>
								   <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>shouldAddBinaryHeaders</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendCopyBinaryHeaders</name><argument_list>(<argument><expr><name>localCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>columnValues</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>columnNulls</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>columnOutputFunctions</name> <init>= <expr><name><name>copyDest</name><operator>-&gt;</operator><name>columnOutputFunctions</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>AppendCopyRowData</name><argument_list>(<argument><expr><name>columnValues</name></expr></argument>, <argument><expr><name>columnNulls</name></expr></argument>, <argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>tupleDescriptor</name></name></expr></argument>,
					  <argument><expr><name>localCopyOutState</name></expr></argument>, <argument><expr><name>columnOutputFunctions</name></expr></argument>,
					  <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* columnCoercionPaths */</comment>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * LocalCopyToShard performs local copy for the given destination shard.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>LocalCopyToShard</name><parameter_list>(<parameter><decl><type><name>ShardCopyDestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>, <parameter><decl><type><name>CopyOutState</name></type> <name>localCopyOutState</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isBinaryCopy</name> <init>= <expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>binary</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isBinaryCopy</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>AppendCopyBinaryFooters</name><argument_list>(<argument><expr><name>localCopyOutState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Set the buffer as a global variable to allow ReadFromLocalBufferCallback
	 * to read from it. We cannot pass additional arguments to
	 * ReadFromLocalBufferCallback.
	 */</comment>
	<expr_stmt><expr><name>LocalCopyBuffer</name> <operator>=</operator> <name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardSchemaName</name> <init>= <expr><call><name>linitial</name><argument_list>(
		<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>destinationShardRelationName</name> <init>= <expr><call><name>lsecond</name><argument_list>(
		<argument><expr><name><name>copyDest</name><operator>-&gt;</operator><name>destinationShardFullyQualifiedName</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>destinationSchemaOid</name> <init>= <expr><call><name>get_namespace_oid</name><argument_list>(<argument><expr><name>destinationShardSchemaName</name></expr></argument>,
												 <argument><expr><name>false</name></expr></argument> <comment type="block">/* missing_ok */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>destinationShardOid</name> <init>= <expr><call><name>get_relname_relid</name><argument_list>(<argument><expr><name>destinationShardRelationName</name></expr></argument>,
												<argument><expr><name>destinationSchemaOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DefElem</name> <modifier>*</modifier></type><name>binaryFormatOption</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isBinaryCopy</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>binaryFormatOption</name> <operator>=</operator> <call><name>makeDefElem</name><argument_list>(<argument><expr><literal type="string">"format"</literal></expr></argument>, <argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>makeString</name><argument_list>(<argument><expr><literal type="string">"binary"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>shard</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>destinationShardOid</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ParseState</name> <modifier>*</modifier></type><name>pState</name> <init>= <expr><call><name>make_parsestate</name><argument_list>(<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* parentParseState */</comment>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>addRangeTableEntryForRelation</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>,
										 <argument><expr><name>NULL</name></expr></argument> <comment type="block">/* alias */</comment>, <argument><expr><name>false</name></expr></argument> <comment type="block">/* inh */</comment>,
										 <argument><expr><name>false</name></expr></argument> <comment type="block">/* inFromCl */</comment>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>options</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>isBinaryCopy</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>list_make1</name><argument_list>(<argument><expr><name>binaryFormatOption</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CopyFromState</name></type> <name>cstate</name> <init>= <expr><call><name>BeginCopyFrom_compat</name><argument_list>(<argument><expr><name>pState</name></expr></argument>, <argument><expr><name>shard</name></expr></argument>,
												<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* whereClause */</comment>,
												<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* fileName */</comment>,
												<argument><expr><name>false</name></expr></argument> <comment type="block">/* is_program */</comment>,
												<argument><expr><name>ReadFromLocalBufferCallback</name></expr></argument>,
												<argument><expr><name>NULL</name></expr></argument> <comment type="block">/* attlist (NULL is all columns) */</comment>,
												<argument><expr><name>options</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>CopyFrom</name><argument_list>(<argument><expr><name>cstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EndCopyFrom</name><argument_list>(<argument><expr><name>cstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>resetStringInfo</name><argument_list>(<argument><expr><name><name>localCopyOutState</name><operator>-&gt;</operator><name>fe_msgbuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>shard</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free_parsestate</name><argument_list>(<argument><expr><name>pState</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ReadFromLocalBufferCallback is the copy callback.
 * It always tries to copy maxRead bytes.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ReadFromLocalBufferCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>outBuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minRead</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>maxRead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>bytesRead</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>avail</name> <init>= <expr><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>cursor</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>bytesToRead</name> <init>= <expr><call><name>Min</name><argument_list>(<argument><expr><name>avail</name></expr></argument>, <argument><expr><name>maxRead</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>bytesToRead</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>memcpy_s</name><argument_list>(<argument><expr><name>outBuf</name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>,
				 <argument><expr><operator>&amp;</operator><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>cursor</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>bytesToRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>bytesRead</name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>LocalCopyBuffer</name><operator>-&gt;</operator><name>cursor</name></name> <operator>+=</operator> <name>bytesToRead</name></expr>;</expr_stmt>

	<return>return <expr><name>bytesRead</name></expr>;</return>
</block_content>}</block></function>
</unit>
