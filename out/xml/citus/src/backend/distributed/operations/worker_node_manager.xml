<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/operations/worker_node_manager.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * worker_node_manager.c
 *	  Routines for reading worker nodes from membership file, and allocating
 *	  candidate nodes for shard placement.
 *
 * Copyright (c) Citus Data, Inc.
 *
 * $Id$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/coordinator_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/hash_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/hba.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/libpq-be.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hsearch.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <name>PG_VERSION_13</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/hashutils.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* Config variables managed via guc.c */</comment>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>WorkerListFileName</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>MaxWorkerNodesTracked</name> <init>= <expr><literal type="number">2048</literal></expr></init></decl>;</decl_stmt>    <comment type="block">/* determines worker node hash table size */</comment>


<comment type="block">/* Local functions forward declarations */</comment>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>NodeIsPrimaryWorker</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>NodeIsReadableWorker</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/* ------------------------------------------------------------
 * Worker node selection functions follow
 * ------------------------------------------------------------
 */</comment>


<comment type="block">/*
 * WorkerGetRoundRobinCandidateNode takes in a list of worker nodes and returns
 * a candidate worker node from that list. To select this node, this function
 * uses the round-robin policy. An ideal round-robin implementation requires
 * keeping shared state for shard placements; and we instead approximate our
 * implementation by relying on the ever-increasing shardId. So, the first
 * worker node selected will be the node at the (shardId MOD worker node count)
 * index and the remaining candidate nodes will be the next nodes in the list.
 *
 * Note that the function returns null if the worker membership list does not
 * contain enough nodes to place all replicas.
 */</comment>
<function><type><name>WorkerNode</name> <modifier>*</modifier></type>
<name>WorkerGetRoundRobinCandidateNode</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>shardId</name></decl></parameter>,
								 <parameter><decl><type><name>uint32</name></type> <name>placementIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint32</name></type> <name>workerNodeCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>candidateNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>placementIndex</name> <operator>&lt;</operator> <name>workerNodeCount</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>candidateNodeIndex</name> <init>= <expr><operator>(</operator><name>shardId</name> <operator>+</operator> <name>placementIndex</name><operator>)</operator> <operator>%</operator> <name>workerNodeCount</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>candidateNode</name> <operator>=</operator> <operator>(</operator><name>WorkerNode</name> <operator>*</operator><operator>)</operator> <call><name>list_nth</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name>candidateNodeIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>candidateNode</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActivePrimaryNonCoordinatorNodeCount returns the number of groups with a primary in the cluster.
 * This method excludes coordinator even if it is added as a worker to cluster.
 */</comment>
<function><type><name>uint32</name></type>
<name>ActivePrimaryNonCoordinatorNodeCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><call><name>ActivePrimaryNonCoordinatorNodeList</name><argument_list>(<argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>liveWorkerCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>liveWorkerCount</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActiveReadableNodeCount returns the number of nodes in the cluster.
 */</comment>
<function><type><name>uint32</name></type>
<name>ActiveReadableNodeCount</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nodeList</name> <init>= <expr><call><name>ActiveReadableNodeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>list_length</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NodeIsCoordinator returns true if the given node represents the coordinator.
 */</comment>
<function><type><name>bool</name></type>
<name>NodeIsCoordinator</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name>COORDINATOR_GROUP_ID</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActiveNodeListFilterFunc returns a list of all active nodes that checkFunction
 * returns true for.
 * lockMode specifies which lock to use on pg_dist_node, this is necessary when
 * the caller wouldn't want nodes to be added concurrent to their use of this list
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>FilterActiveNodeListFunc</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockMode</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>checkFunction</name>)<parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>status</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>checkFunction</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>lockMode</name> <operator>!=</operator> <name>NoLock</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><call><name>DistNodeRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>lockMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>workerNodeHash</name> <init>= <expr><call><name>GetWorkerNodeHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>, <argument><expr><name>workerNodeHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><operator>(</operator><name>workerNode</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>workerNode</name><operator>-&gt;</operator><name>isActive</name></name> <operator>&amp;&amp;</operator> <call><name>checkFunction</name><argument_list>(<argument><expr><name>workerNode</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNodeCopy</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WorkerNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>workerNodeCopy</name> <operator>=</operator> <operator>*</operator><name>workerNode</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>workerNodeList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name>workerNodeCopy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>workerNodeList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActivePrimaryNonCoordinatorNodeList returns a list of all active primary worker nodes
 * in workerNodeHash. lockMode specifies which lock to use on pg_dist_node,
 * this is necessary when the caller wouldn't want nodes to be added concurrent
 * to their use of this list.
 * This method excludes coordinator even if it is added as a worker to cluster.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ActivePrimaryNonCoordinatorNodeList</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EnsureModificationsCanRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>lockMode</name></expr></argument>, <argument><expr><name>NodeIsPrimaryWorker</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActivePrimaryNodeList returns a list of all active primary nodes in
 * workerNodeHash.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ActivePrimaryNodeList</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EnsureModificationsCanRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>lockMode</name></expr></argument>, <argument><expr><name>NodeIsPrimary</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActivePrimaryRemoteNodeList returns a list of all active primary nodes in
 * workerNodeHash.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ActivePrimaryRemoteNodeList</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EnsureModificationsCanRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>lockMode</name></expr></argument>, <argument><expr><name>NodeIsPrimaryAndRemote</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NodeIsPrimaryWorker returns true if the node is a primary worker node.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>NodeIsPrimaryWorker</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><call><name>NodeIsCoordinator</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NodeIsPrimary</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CoordinatorAddedAsWorkerNode returns true if coordinator is added to the
 * pg_dist_node.
 */</comment>
<function><type><name>bool</name></type>
<name>CoordinatorAddedAsWorkerNode</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>groupContainsNodes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PrimaryNodeForGroup</name><argument_list>(<argument><expr><name>COORDINATOR_GROUP_ID</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>groupContainsNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>groupContainsNodes</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ReferenceTablePlacementNodeList returns the set of nodes that should have
 * reference table placements. This includes all primaries, including the
 * coordinator if known.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ReferenceTablePlacementNodeList</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EnsureModificationsCanRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>lockMode</name></expr></argument>, <argument><expr><name>NodeIsPrimary</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CoordinatorNodeIfAddedAsWorkerOrError returns the WorkerNode object for
 * coordinator node if it is added to pg_dist_node, otherwise errors out.
 * Also, as CoordinatorAddedAsWorkerNode acquires AccessShareLock on pg_dist_node
 * and doesn't release it, callers can safely assume coordinator won't be
 * removed from metadata until the end of transaction when this function
 * returns coordinator node.
 */</comment>
<function><type><name>WorkerNode</name> <modifier>*</modifier></type>
<name>CoordinatorNodeIfAddedAsWorkerOrError</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ErrorIfCoordinatorNotAddedAsWorkerNode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>coordinatorNode</name> <init>= <expr><call><name>LookupNodeForGroup</name><argument_list>(<argument><expr><name>COORDINATOR_GROUP_ID</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>coordinatorNodeCopy</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WorkerNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>coordinatorNodeCopy</name> <operator>=</operator> <operator>*</operator><name>coordinatorNode</name></expr>;</expr_stmt>

	<return>return <expr><name>coordinatorNodeCopy</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ErrorIfCoordinatorNotAddedAsWorkerNode errors out if coordinator is not added
 * to metadata.
 */</comment>
<function><type><name>void</name></type>
<name>ErrorIfCoordinatorNotAddedAsWorkerNode</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>CoordinatorAddedAsWorkerNode</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"operation is not allowed when coordinator "</literal>
						   <literal type="string">"is not added into metadata"</literal></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Use \"SELECT citus_set_coordinator_host('"</literal>
							<literal type="string">"&lt;hostname&gt;', '&lt;port&gt;')\" to configure the "</literal>
							<literal type="string">"coordinator hostname and port"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DistributedTablePlacementNodeList returns a list of all active, primary
 * worker nodes that can store new data, i.e shouldstoreshards is 'true'
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>DistributedTablePlacementNodeList</name><parameter_list>(<parameter><decl><type><name>LOCKMODE</name></type> <name>lockMode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>EnsureModificationsCanRun</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>lockMode</name></expr></argument>, <argument><expr><name>NodeCanHaveDistTablePlacements</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NodeCanHaveDistTablePlacements returns true if the given node can have
 * shards of a distributed table.
 */</comment>
<function><type><name>bool</name></type>
<name>NodeCanHaveDistTablePlacements</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>NodeIsPrimary</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name><name>node</name><operator>-&gt;</operator><name>shouldHaveShards</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActiveReadableNonCoordinatorNodeList returns a list of all nodes in workerNodeHash
 * that are readable nodes This method excludes coordinator.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ActiveReadableNonCoordinatorNodeList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>NodeIsReadableWorker</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ActiveReadableNodeList returns a list of all nodes in workerNodeHash
 * that are readable workers.
 * This method includes coordinator if it is added as a worker to the cluster.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ActiveReadableNodeList</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>FilterActiveNodeListFunc</name><argument_list>(<argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>NodeIsReadable</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NodeIsReadableWorker returns true if the given node is a readable worker node.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>NodeIsReadableWorker</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>!</operator><call><name>NodeIsCoordinator</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>NodeIsReadable</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CompareWorkerNodes compares two pointers to worker nodes using the exact
 * same logic employed by WorkerNodeCompare.
 */</comment>
<function><type><name>int</name></type>
<name>CompareWorkerNodes</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>leftElement</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rightElement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>leftWorker</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>leftElement</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rightWorker</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>rightElement</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Size</name></type> <name>ignoredKeySize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>compare</name> <init>= <expr><call><name>WorkerNodeCompare</name><argument_list>(<argument><expr><name>leftWorker</name></expr></argument>, <argument><expr><name>rightWorker</name></expr></argument>, <argument><expr><name>ignoredKeySize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>compare</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * WorkerNodeCompare compares two worker nodes by their host name and port
 * number. Two nodes that only differ by their rack locations are considered to
 * be equal to each other.
 */</comment>
<function><type><name>int</name></type>
<name>WorkerNodeCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhsKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhsKey</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keySize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>WorkerNode</name> <modifier>*</modifier></type><name>workerLhs</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>WorkerNode</name> <operator>*</operator><operator>)</operator> <name>lhsKey</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>WorkerNode</name> <modifier>*</modifier></type><name>workerRhs</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>WorkerNode</name> <operator>*</operator><operator>)</operator> <name>rhsKey</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>NodeNamePortCompare</name><argument_list>(<argument><expr><name><name>workerLhs</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>, <argument><expr><name><name>workerRhs</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>,
							   <argument><expr><name><name>workerLhs</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>, <argument><expr><name><name>workerRhs</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * WorkerNodeHashCode computes the hash code for a worker node from the node's
 * host name and port number. Nodes that only differ by their rack locations
 * hash to the same value.
 */</comment>
<function><type><name>uint32</name></type>
<name>WorkerNodeHashCode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keySize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>WorkerNode</name> <modifier>*</modifier></type><name>worker</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>WorkerNode</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>workerName</name> <init>= <expr><name><name>worker</name><operator>-&gt;</operator><name>workerName</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint32</name> <modifier>*</modifier></type><name>workerPort</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>worker</name><operator>-&gt;</operator><name>workerPort</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* standard hash function outlined in Effective Java, Item 8 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type> <name>result</name> <init>= <expr><literal type="number">17</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">37</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name>string_hash</name><argument_list>(<argument><expr><name>workerName</name></expr></argument>, <argument><expr><name>WORKER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">37</literal> <operator>*</operator> <name>result</name> <operator>+</operator> <call><name>tag_hash</name><argument_list>(<argument><expr><name>workerPort</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NodeNamePortCompare implements the common logic for comparing two nodes
 * with their given nodeNames and ports.
 *
 * This function is useful for ensuring consistency of sort operations between
 * different representations of nodes in the cluster such as WorkerNode and
 * WorkerPool.
 */</comment>
<function><type><name>int</name></type>
<name>NodeNamePortCompare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>workerLhsName</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>workerRhsName</name></decl></parameter>,
					<parameter><decl><type><name>int</name></type> <name>workerLhsPort</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>workerRhsPort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>nameCompare</name> <init>= <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>workerLhsName</name></expr></argument>, <argument><expr><name>workerRhsName</name></expr></argument>, <argument><expr><name>WORKER_LENGTH</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>nameCompare</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>nameCompare</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>portCompare</name> <init>= <expr><name>workerLhsPort</name> <operator>-</operator> <name>workerRhsPort</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>portCompare</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetFirstPrimaryWorkerNode returns the primary worker node with the
 * lowest rank based on CompareWorkerNodes.
 *
 * The ranking is arbitrary, but needs to be kept consistent with IsFirstWorkerNode.
 */</comment>
<function><type><name>WorkerNode</name> <modifier>*</modifier></type>
<name>GetFirstPrimaryWorkerNode</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><call><name>ActivePrimaryNonCoordinatorNodeList</name><argument_list>(<argument><expr><name>RowShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>firstWorkerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>workerNode</argument>, <argument>workerNodeList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>firstWorkerNode</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
			<call><name>CompareWorkerNodes</name><argument_list>(<argument><expr><operator>&amp;</operator><name>workerNode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>firstWorkerNode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>firstWorkerNode</name> <operator>=</operator> <name>workerNode</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>firstWorkerNode</name></expr>;</return>
</block_content>}</block></function>
</unit>
