<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/operations/shard_cleaner.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shard_cleaner.c
 *	  This implements the background process that cleans shards that are
 *	  left around. Shards that are left around are marked as state 4
 *	  (SHARD_STATE_TO_DELETE) in pg_dist_placement.
 *
 * Copyright (c) 2018, Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/dbcommands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/coordinator_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_cleaner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_rebalancer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/resource_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_transaction.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_dist_cleanup.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPLICATION_SLOT_CATALOG_TABLE_NAME</name></cpp:macro> <cpp:value>"pg_replication_slots"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_ERRCODE_OBJECT_IN_USE</name></cpp:macro> <cpp:value>"55006"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STR_ERRCODE_UNDEFINED_OBJECT</name></cpp:macro> <cpp:value>"42704"</cpp:value></cpp:define>

<comment type="block">/* GUC configuration for shard cleaner */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>NextOperationId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>NextCleanupRecordId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* Data structure for cleanup operation */</comment>

<comment type="block">/*
 * CleanupRecord represents a record from pg_dist_cleanup.
 */</comment>
<typedef>typedef <type><struct>struct <name>CleanupRecord</name>
<block>{
	<comment type="block">/* unique identifier of the record */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>recordId</name></decl>;</decl_stmt>

	<comment type="block">/* identifier of the operation that generated the record */</comment>
	<decl_stmt><decl><type><name>OperationId</name></type> <name>operationId</name></decl>;</decl_stmt>

	<comment type="block">/* type of the object (e.g. shard) */</comment>
	<decl_stmt><decl><type><name>CleanupObject</name></type> <name>objectType</name></decl>;</decl_stmt>

	<comment type="block">/* fully qualified name of the object */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>objectName</name></decl>;</decl_stmt>

	<comment type="block">/* node group ID on which the object is located */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>nodeGroupId</name></decl>;</decl_stmt>

	<comment type="block">/* cleanup policy that determines when object is cleaned */</comment>
	<decl_stmt><decl><type><name>CleanupPolicy</name></type> <name>policy</name></decl>;</decl_stmt>
}</block></struct></type> <name>CleanupRecord</name>;</typedef>

<comment type="block">/* operation ID set by RegisterOperationNeedingCleanup */</comment>
<decl_stmt><decl><type><name>OperationId</name></type> <name>CurrentOperationId</name> <init>= <expr><name>INVALID_OPERATION_ID</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* declarations for dynamic loading */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_cleanup_orphaned_shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>isolation_cleanup_orphaned_shards</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_cleanup_orphaned_resources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DropOrphanedShardsForMove</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>waitForLocks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryDropResourceByCleanupRecordOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name></decl></parameter>,
															 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
															 <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryDropShardOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qualifiedTableName</name></decl></parameter>,
										   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
										   <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryDropSubscriptionOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>subscriptionName</name></decl></parameter>,
												  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
												  <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryDropPublicationOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>publicationName</name></decl></parameter>,
												 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
												 <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryDropReplicationSlotOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>replicationSlotName</name></decl></parameter>,
													 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
													 <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryDropUserOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryLockRelationAndPlacementCleanup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Functions for cleanup infrastructure */</comment>
<function_decl><type><specifier>static</specifier> <name>CleanupRecord</name> <modifier>*</modifier></type> <name>TupleToCleanupRecord</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>,
											<parameter><decl><type><name>TupleDesc</name></type>
											<name>tupleDescriptor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>OperationId</name></type> <name>GetNextOperationId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64</name></type> <name>GetNextCleanupRecordId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LockOperationId</name><parameter_list>(<parameter><decl><type><name>OperationId</name></type> <name>operationId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TryLockOperationId</name><parameter_list>(<parameter><decl><type><name>OperationId</name></type> <name>operationId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteCleanupRecordByRecordId</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>recordId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DeleteCleanupRecordByRecordIdOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>recordId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CleanupRecordExists</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>recordId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>ListCleanupRecords</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>ListCleanupRecordsForCurrentOperation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>DropOrphanedResourcesForCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CompareCleanupRecordsByObjectType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>leftElement</name></decl></parameter>,
											 <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rightElement</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * citus_cleanup_orphaned_shards implements a user-facing UDF to delete
 * orphaned shards that are still haning around in the system. These shards are
 * orphaned by previous actions that were not directly able to delete the
 * placements eg. shard moving or dropping of a distributed table while one of
 * the data nodes was not online.
 *
 * This function iterates through placements where shardstate is
 * SHARD_STATE_TO_DELETE (shardstate = 4), drops the corresponding tables from
 * the node and removes the placement information from the catalog.
 *
 * The function takes no arguments and runs cluster wide. It cannot be run in a
 * transaction, because holding the locks it takes for a long time is not good.
 * While the locks are held, it is impossible for the background daemon to
 * cleanup orphaned shards.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_cleanup_orphaned_shards</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EnsureCoordinator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PreventInTransactionBlock</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"citus_cleanup_orphaned_shards"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>waitForLocks</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>droppedShardCount</name> <init>= <expr><call><name>DropOrphanedShardsForMove</name><argument_list>(<argument><expr><name>waitForLocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>droppedShardCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cleaned up %d orphaned shards"</literal></expr></argument>, <argument><expr><name>droppedShardCount</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * isolation_cleanup_orphaned_shards implements a test UDF that's the same as
 * citus_cleanup_orphaned_shards. The only difference is that this command can
 * be run in transactions, this is to test
 */</comment>
<function><type><name>Datum</name></type>
<name>isolation_cleanup_orphaned_shards</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EnsureCoordinator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>waitForLocks</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>droppedShardCount</name> <init>= <expr><call><name>DropOrphanedShardsForMove</name><argument_list>(<argument><expr><name>waitForLocks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>droppedShardCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cleaned up %d orphaned shards"</literal></expr></argument>, <argument><expr><name>droppedShardCount</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_cleanup_orphaned_resources implements a user-facing UDF to delete
 * orphaned resources that are present in the system. These resources are
 * orphaned by previous actions that either failed or marked the resources
 * for deferred cleanup.
 *
 * The function takes no arguments and runs on co-ordinator. It cannot be run in a
 * transaction, because holding the locks it takes for a long time is not good.
 * While the locks are held, it is impossible for the background daemon to
 * perform concurrent cleanup.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_cleanup_orphaned_resources</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>EnsureCoordinator</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PreventInTransactionBlock</name><argument_list>(<argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="string">"citus_cleanup_orphaned_resources"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>droppedCount</name> <init>= <expr><call><name>DropOrphanedResourcesForCleanup</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>droppedCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cleaned up %d orphaned resources"</literal></expr></argument>, <argument><expr><name>droppedCount</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DropOrphanedResourcesInSeparateTransaction cleans up orphaned resources by
 * connecting to localhost. This is done, so that the locks that
 * DropOrphanedShardsForMove takes are only held for a short time.
 */</comment>
<function><type><name>void</name></type>
<name>DropOrphanedResourcesInSeparateTransaction</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlag</name> <init>= <expr><name>FORCE_NEW_CONNECTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetNodeConnection</name><argument_list>(<argument><expr><name>connectionFlag</name></expr></argument>, <argument><expr><name>LocalHostName</name></expr></argument>,
													<argument><expr><name>PostPortNumber</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ExecuteCriticalRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"CALL citus_cleanup_orphaned_resources()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ExecuteCriticalRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"CALL citus_cleanup_orphaned_shards()"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>CloseConnection</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropOrphanedResources is a wrapper around DropOrphanedShardsForMove and
 * DropOrphanedResourcesForCleanup that catches any errors to make it safe to
 * use in the maintenance daemon.
 *
 * If dropping any of the shards failed this function returns -1, otherwise it
 * returns the number of dropped resources.
 */</comment>
<function><type><name>int</name></type>
<name>TryDropOrphanedResources</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>waitForLocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>droppedResourceCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>savedContext</name> <init>= <expr><name>CurrentMemoryContext</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Start a subtransaction so we can rollback database's state to it in case
	 * of error.
	 */</comment>
	<expr_stmt><expr><call><name>BeginInternalSubTransaction</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><name>droppedResourceCount</name> <operator>=</operator> <call><name>DropOrphanedShardsForMove</name><argument_list>(<argument><expr><name>waitForLocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>droppedResourceCount</name> <operator>+=</operator> <call><name>DropOrphanedResourcesForCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Releasing a subtransaction doesn't free its memory context, since the
		 * data it contains will be needed at upper commit. See the comments for
		 * AtSubCommit_Memory() at postgres/src/backend/access/transam/xact.c.
		 */</comment>
		<expr_stmt><expr><call><name>ReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_CATCH</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<block>{<block_content>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>savedContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name> <init>= <expr><call><name>CopyErrorData</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>FlushErrorState</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>RollbackAndReleaseCurrentSubTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* rethrow as WARNING */</comment>
		<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>=</operator> <name>WARNING</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ThrowErrorData</name><argument_list>(<argument><expr><name>edata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>PG_END_TRY</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>droppedResourceCount</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DropOrphanedResourcesForCleanup removes resources that were marked for cleanup by operation.
 * It does so by trying to take an exclusive lock on the resources. If the lock cannot be
 * obtained it skips the resource and continues with others.
 * The resource that has been skipped will be removed at a later iteration when there are no
 * locks held anymore.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DropOrphanedResourcesForCleanup</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<comment type="block">/* Only runs on Coordinator */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoordinator</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>cleanupRecordList</name> <init>= <expr><call><name>ListCleanupRecords</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We sort the records before cleaning up by their types, because of dependencies.
	 * For example, a subscription might depend on a publication.
	 */</comment>
	<expr_stmt><expr><name>cleanupRecordList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>cleanupRecordList</name></expr></argument>,
								 <argument><expr><name>CompareCleanupRecordsByObjectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>removedResourceCountForCleanup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>failedResourceCountForCleanup</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach_ptr</name><argument_list>(<argument>record</argument>, <argument>cleanupRecordList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PrimaryNodeForGroup</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>nodeGroupId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Advisory locks are reentrant */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TryLockOperationId</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>operationId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* operation that the cleanup record is part of is still running */</comment>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resourceName</name> <init>= <expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>LookupNodeForGroup</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>nodeGroupId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Now that we have the lock, check if record exists.
		 * The operation could have completed successfully just after we called
		 * ListCleanupRecords in which case the record will be now gone.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>CleanupRecordExists</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>recordId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TryDropResourceByCleanupRecordOutsideTransaction</name><argument_list>(<argument><expr><name>record</name></expr></argument>,
															 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>,
															 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>CLEANUP_DEFERRED_ON_SUCCESS</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"deferred drop of orphaned resource %s on %s:%d "</literal>
									 <literal type="string">"completed"</literal></expr></argument>,
									 <argument><expr><name>resourceName</name></expr></argument>,
									 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>, <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cleaned up orphaned resource %s on %s:%d which "</literal>
									 <literal type="string">"was left behind after a failed operation"</literal></expr></argument>,
									 <argument><expr><name>resourceName</name></expr></argument>,
									 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>, <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>

			<comment type="block">/* delete the cleanup record */</comment>
			<expr_stmt><expr><call><name>DeleteCleanupRecordByRecordId</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>recordId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>removedResourceCountForCleanup</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * We log failures at the end, since they occur repeatedly
			 * for a large number of objects.
			 */</comment>
			<expr_stmt><expr><name>failedResourceCountForCleanup</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>failedResourceCountForCleanup</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to clean up %d orphaned resources out of %d"</literal></expr></argument>,
								 <argument><expr><name>failedResourceCountForCleanup</name></expr></argument>,
								 <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>cleanupRecordList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>removedResourceCountForCleanup</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DropOrphanedShardsForMove removes shards that were marked SHARD_STATE_TO_DELETE before.
 *
 * It does so by trying to take an exclusive lock on the shard and its
 * colocated placements before removing. If the lock cannot be obtained it
 * skips the group and continues with others. The group that has been skipped
 * will be removed at a later time when there are no locks held anymore on
 * those placements.
 *
 * If waitForLocks is false, then if we cannot take a lock on pg_dist_placement
 * we continue without waiting.
 *
 * Before doing any of this it will take an exclusive PlacementCleanup lock.
 * This is to ensure that this function is not being run concurrently.
 * Otherwise really bad race conditions are possible, such as removing all
 * placements of a shard. waitForLocks indicates if this function should
 * wait for this lock or not.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>DropOrphanedShardsForMove</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>waitForLocks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>removedShardCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We should try to take the highest lock that we take
	 * later in this function for pg_dist_placement. We take RowExclusiveLock
	 * in DeleteShardPlacementRow.
	 */</comment>
	<decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockmode</name> <init>= <expr><name>RowExclusiveLock</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCoordinator</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>waitForLocks</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LockPlacementCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Oid</name></type> <name>distPlacementId</name> <init>= <expr><call><name>DistPlacementRelationId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TryLockRelationAndPlacementCleanup</name><argument_list>(<argument><expr><name>distPlacementId</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>failedShardDropCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementList</name> <init>= <expr><call><name>AllShardPlacementsWithShardPlacementState</name><argument_list>(
		<argument><expr><name>SHARD_STATE_TO_DELETE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>GroupShardPlacement</name> <modifier>*</modifier></type><name>placement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>placement</argument>, <argument>shardPlacementList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>PrimaryNodeForGroup</name><argument_list>(<argument><expr><name><name>placement</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>||</operator>
			<operator>!</operator><call><name>ShardExists</name><argument_list>(<argument><expr><name><name>placement</name><operator>-&gt;</operator><name>shardId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>shardPlacement</name> <init>= <expr><call><name>LoadShardPlacement</name><argument_list>(<argument><expr><name><name>placement</name><operator>-&gt;</operator><name>shardId</name></name></expr></argument>,
															<argument><expr><name><name>placement</name><operator>-&gt;</operator><name>placementId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardInterval</name> <init>= <expr><call><name>LoadShardInterval</name><argument_list>(<argument><expr><name><name>placement</name><operator>-&gt;</operator><name>shardId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>qualifiedTableName</name> <init>= <expr><call><name>ConstructQualifiedShardName</name><argument_list>(<argument><expr><name>shardInterval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>TryDropShardOutsideTransaction</name><argument_list>(<argument><expr><name>qualifiedTableName</name></expr></argument>,
										   <argument><expr><name><name>shardPlacement</name><operator>-&gt;</operator><name>nodeName</name></name></expr></argument>,
										   <argument><expr><name><name>shardPlacement</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"deferred drop of orphaned shard %s on %s:%d "</literal>
								 <literal type="string">"after a move completed"</literal></expr></argument>,
								 <argument><expr><name>qualifiedTableName</name></expr></argument>,
								 <argument><expr><name><name>shardPlacement</name><operator>-&gt;</operator><name>nodeName</name></name></expr></argument>,
								 <argument><expr><name><name>shardPlacement</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* delete the actual placement */</comment>
			<expr_stmt><expr><call><name>DeleteShardPlacementRow</name><argument_list>(<argument><expr><name><name>placement</name><operator>-&gt;</operator><name>placementId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>removedShardCount</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<comment type="block">/*
			 * We log failures at the end, since they occur repeatedly
			 * for a large number of objects.
			 */</comment>
			<expr_stmt><expr><name>failedShardDropCount</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>failedShardDropCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to clean up %d orphaned shards out of %d"</literal></expr></argument>,
								 <argument><expr><name>failedShardDropCount</name></expr></argument>, <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>removedShardCount</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RegisterOperationNeedingCleanup is be called by an operation to register
 * for cleanup.
 */</comment>
<function><type><name>OperationId</name></type>
<name>RegisterOperationNeedingCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>CurrentOperationId</name> <operator>=</operator> <call><name>GetNextOperationId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LockOperationId</name><argument_list>(<argument><expr><name>CurrentOperationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>CurrentOperationId</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FinalizeOperationNeedingCleanupOnFailure is be called by an operation to signal
 * completion with failure. This will trigger cleanup of appropriate resources.
 */</comment>
<function><type><name>void</name></type>
<name>FinalizeOperationNeedingCleanupOnFailure</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operationName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We must have a valid OperationId. Any operation requring cleanup
	 * will call RegisterOperationNeedingCleanup.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentOperationId</name> <operator>!=</operator> <name>INVALID_OPERATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>currentOperationRecordList</name> <init>= <expr><call><name>ListCleanupRecordsForCurrentOperation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We sort the records before cleaning up by their types, because of dependencies.
	 * For example, a subscription might depend on a publication.
	 */</comment>
	<expr_stmt><expr><name>currentOperationRecordList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>currentOperationRecordList</name></expr></argument>,
										  <argument><expr><name>CompareCleanupRecordsByObjectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>failedShardCountOnComplete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>record</argument>, <argument>currentOperationRecordList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>CLEANUP_ALWAYS</name> <operator>||</operator> <name><name>record</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>CLEANUP_ON_FAILURE</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>LookupNodeForGroup</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>nodeGroupId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * For all resources of CurrentOperationId that are marked as 'CLEANUP_ALWAYS' or
			 * 'CLEANUP_ON_FAILURE', drop resource and cleanup records.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>TryDropResourceByCleanupRecordOutsideTransaction</name><argument_list>(<argument><expr><name>record</name></expr></argument>,
																 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>,
																 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Given the operation is failing and we will abort its transaction, we cannot delete
				 * records in the current transaction. Delete these records outside of the
				 * current transaction via a localhost connection.
				 */</comment>
				<expr_stmt><expr><call><name>DeleteCleanupRecordByRecordIdOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>recordId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>objectType</name></name> <operator>==</operator> <name>CLEANUP_OBJECT_SHARD_PLACEMENT</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * We log failures at the end, since they occur repeatedly
				 * for a large number of objects.
				 */</comment>
				<expr_stmt><expr><name>failedShardCountOnComplete</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>failedShardCountOnComplete</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"failed to clean up %d orphaned shards out of %d after "</literal>
								 <literal type="string">"a %s operation failed"</literal></expr></argument>,
								 <argument><expr><name>failedShardCountOnComplete</name></expr></argument>,
								 <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>currentOperationRecordList</name></expr></argument>)</argument_list></call></expr></argument>,
								 <argument><expr><name>operationName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * FinalizeOperationNeedingCleanupOnSuccess is be called by an operation to signal
 * completion with success. This will trigger cleanup of appropriate resources.
 */</comment>
<function><type><name>void</name></type>
<name>FinalizeOperationNeedingCleanupOnSuccess</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>operationName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We must have a valid OperationId. Any operation requring cleanup
	 * will call RegisterOperationNeedingCleanup.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentOperationId</name> <operator>!=</operator> <name>INVALID_OPERATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>currentOperationRecordList</name> <init>= <expr><call><name>ListCleanupRecordsForCurrentOperation</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We sort the records before cleaning up by their types, because of dependencies.
	 * For example, a subscription might depend on a publication.
	 */</comment>
	<expr_stmt><expr><name>currentOperationRecordList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>currentOperationRecordList</name></expr></argument>,
										  <argument><expr><name>CompareCleanupRecordsByObjectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>failedShardCountOnComplete</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>record</argument>, <argument>currentOperationRecordList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>CLEANUP_ALWAYS</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>LookupNodeForGroup</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>nodeGroupId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="block">/*
			 * For all resources of CurrentOperationId that are marked as 'CLEANUP_ALWAYS'
			 * drop resource and cleanup records.
			 */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>TryDropResourceByCleanupRecordOutsideTransaction</name><argument_list>(<argument><expr><name>record</name></expr></argument>,
																 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>,
																 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * Delete cleanup records outside transaction as:
				 * The resources are marked as 'CLEANUP_ALWAYS' and should be cleaned no matter
				 * the operation succeeded or failed.
				 */</comment>
				<expr_stmt><expr><call><name>DeleteCleanupRecordByRecordIdOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>recordId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>objectType</name></name> <operator>==</operator> <name>CLEANUP_OBJECT_SHARD_PLACEMENT</name></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/*
				 * We log failures at the end, since they occur repeatedly
				 * for a large number of objects.
				 */</comment>
				<expr_stmt><expr><name>failedShardCountOnComplete</name><operator>++</operator></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>policy</name></name> <operator>==</operator> <name>CLEANUP_ON_FAILURE</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* Delete cleanup records (and not the actual resource) in same transaction as:
			 * The resources are marked as 'CLEANUP_ON_FAILURE' and we are approaching a successful
			 * completion of the operation. However, we cannot guarentee that operation will succeed
			 * so we tie the Delete with parent transaction.
			 */</comment>
			<expr_stmt><expr><call><name>DeleteCleanupRecordByRecordId</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>recordId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<if_stmt><if>if <condition>(<expr><name>failedShardCountOnComplete</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							  <argument><expr><literal type="string">"failed to clean up %d orphaned shards out of %d after "</literal>
							  <literal type="string">"a %s operation completed"</literal></expr></argument>,
							  <argument><expr><name>failedShardCountOnComplete</name></expr></argument>,
							  <argument><expr><call><name>list_length</name><argument_list>(<argument><expr><name>currentOperationRecordList</name></expr></argument>)</argument_list></call></expr></argument>,
							  <argument><expr><name>operationName</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CompareRecordsByObjectType is a comparison function for sort
 * cleanup records by their object type.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>CompareCleanupRecordsByObjectType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>leftElement</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rightElement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>leftRecord</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>CleanupRecord</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>leftElement</name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>rightRecord</name> <init>= <expr><operator>*</operator><operator>(</operator><operator>(</operator><name>CleanupRecord</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>rightElement</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<comment type="block">/* we compare 64-bit integers, instead of casting their difference to int */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>leftRecord</name><operator>-&gt;</operator><name>objectType</name></name> <operator>&gt;</operator> <name><name>rightRecord</name><operator>-&gt;</operator><name>objectType</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>leftRecord</name><operator>-&gt;</operator><name>objectType</name></name> <operator>&lt;</operator> <name><name>rightRecord</name><operator>-&gt;</operator><name>objectType</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * InsertCleanupRecordInCurrentTransaction inserts a new pg_dist_cleanup_record entry
 * as part of the current transaction. This is primarily useful for deferred drop scenarios,
 * since these records would roll back in case of operation failure.
 */</comment>
<function><type><name>void</name></type>
<name>InsertCleanupRecordInCurrentTransaction</name><parameter_list>(<parameter><decl><type><name>CleanupObject</name></type> <name>objectType</name></decl></parameter>,
										<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>objectName</name></decl></parameter>,
										<parameter><decl><type><name>int</name></type> <name>nodeGroupId</name></decl></parameter>,
										<parameter><decl><type><name>CleanupPolicy</name></type> <name>policy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We must have a valid OperationId. Any operation requring cleanup
	 * will call RegisterOperationNeedingCleanup.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentOperationId</name> <operator>!=</operator> <name>INVALID_OPERATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>Natts_pg_dist_cleanup</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>isNulls</name><index>[<expr><name>Natts_pg_dist_cleanup</name></expr>]</index></name></decl>;</decl_stmt>

	<comment type="block">/* form new shard tuple */</comment>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>isNulls</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>isNulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> <name>recordId</name> <init>= <expr><call><name>GetNextCleanupRecordId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>OperationId</name></type> <name>operationId</name> <init>= <expr><name>CurrentOperationId</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_dist_cleanup_record_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>recordId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_dist_cleanup_operation_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>operationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_dist_cleanup_object_type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>objectType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_dist_cleanup_object_name</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_dist_cleanup_node_group_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>nodeGroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>values</name><index>[<expr><name>Anum_pg_dist_cleanup_policy_type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* open cleanup relation and insert new tuple */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>relationId</name> <init>= <expr><call><name>DistCleanupRelationId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pgDistCleanup</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><call><name>heap_form_tuple</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>isNulls</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>CatalogTupleInsert</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * InsertCleanupRecordInSubtransaction inserts a new pg_dist_cleanup_record entry
 * in a separate transaction to ensure the record persists after rollback. We should
 * delete these records if the operation completes successfully.
 *
 * For failure scenarios, use a subtransaction (direct insert via localhost).
 */</comment>
<function><type><name>void</name></type>
<name>InsertCleanupRecordInSubtransaction</name><parameter_list>(<parameter><decl><type><name>CleanupObject</name></type> <name>objectType</name></decl></parameter>,
									<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>objectName</name></decl></parameter>,
									<parameter><decl><type><name>int</name></type> <name>nodeGroupId</name></decl></parameter>,
									<parameter><decl><type><name>CleanupPolicy</name></type> <name>policy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We must have a valid OperationId. Any operation requring cleanup
	 * will call RegisterOperationNeedingCleanup.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentOperationId</name> <operator>!=</operator> <name>INVALID_OPERATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>sequenceName</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>,
					 <argument><expr><name>PG_CATALOG</name></expr></argument>,
					 <argument><expr><name>CLEANUPRECORDID_SEQUENCE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>command</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>command</name></expr></argument>,
					 <argument><expr><literal type="string">"INSERT INTO %s.%s "</literal>
					 <literal type="string">" (record_id, operation_id, object_type, object_name, node_group_id, policy_type) "</literal>
					 <literal type="string">" VALUES ( nextval('%s'), "</literal> <name>UINT64_FORMAT</name> <literal type="string">", %d, %s, %d, %d)"</literal></expr></argument>,
					 <argument><expr><name>PG_CATALOG</name></expr></argument>,
					 <argument><expr><name>PG_DIST_CLEANUP</name></expr></argument>,
					 <argument><expr><name><name>sequenceName</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
					 <argument><expr><name>CurrentOperationId</name></expr></argument>,
					 <argument><expr><name>objectType</name></expr></argument>,
					 <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>objectName</name></expr></argument>)</argument_list></call></expr></argument>,
					 <argument><expr><name>nodeGroupId</name></expr></argument>,
					 <argument><expr><name>policy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>=
		<expr><call><name>GetConnectionForLocalQueriesOutsideTransaction</name><argument_list>(<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SendCommandListToWorkerOutsideTransactionWithConnection</name><argument_list>(<argument><expr><name>connection</name></expr></argument>,
															<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DeleteCleanupRecordByRecordId deletes a cleanup record by record id.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DeleteCleanupRecordByRecordIdOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>recordId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>command</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>command</name></expr></argument>,
					 <argument><expr><literal type="string">"DELETE FROM %s.%s "</literal>
					 <literal type="string">"WHERE record_id = %lu"</literal></expr></argument>,
					 <argument><expr><name>PG_CATALOG</name></expr></argument>,
					 <argument><expr><name>PG_DIST_CLEANUP</name></expr></argument>,
					 <argument><expr><name>recordId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetConnectionForLocalQueriesOutsideTransaction</name><argument_list>(
		<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SendCommandListToWorkerOutsideTransactionWithConnection</name><argument_list>(<argument><expr><name>connection</name></expr></argument>,
															<argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name><name>command</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TryLockRelationAndPlacementCleanup tries to lock the given relation
 * and the placement cleanup. If it cannot, it returns false.
 *
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryLockRelationAndPlacementCleanup</name><parameter_list>(<parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>, <parameter><decl><type><name>LOCKMODE</name></type> <name>lockmode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>ConditionalLockRelationOid</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>lockmode</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
							 <argument><expr><literal type="string">"could not acquire shard lock to cleanup placements"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TryLockPlacementCleanup</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not acquire lock to cleanup placements"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropResourceByCleanupRecordOutsideTransaction tries to drop the given resource
 * and returns true on success.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryDropResourceByCleanupRecordOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name></decl></parameter>,
												 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
												 <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name><name>record</name><operator>-&gt;</operator><name>objectType</name></name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>CLEANUP_OBJECT_SHARD_PLACEMENT</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>TryDropShardOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name></expr></argument>,
												  <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>CLEANUP_OBJECT_SUBSCRIPTION</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>TryDropSubscriptionOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name></expr></argument>,
														 <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>CLEANUP_OBJECT_PUBLICATION</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>TryDropPublicationOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name></expr></argument>,
														<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>CLEANUP_OBJECT_REPLICATION_SLOT</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>TryDropReplicationSlotOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name></expr></argument>,
															<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>CLEANUP_OBJECT_USER</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><call><name>TryDropUserOutsideTransaction</name><argument_list>(<argument><expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
								  <argument><expr><literal type="string">"Invalid object type %d on failed operation cleanup"</literal></expr></argument>,
								  <argument><expr><name><name>record</name><operator>-&gt;</operator><name>objectType</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block>
	</block_content>}</block></switch>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropShardOutsideTransaction tries to drop the given shard placement and returns
 * true on success.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryDropShardOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>qualifiedTableName</name></decl></parameter>,
							   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
							   <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* prepare sql query to execute to drop the shard */</comment>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>dropQuery</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>dropQuery</name></expr></argument>, <argument><expr><name>DROP_REGULAR_TABLE_COMMAND</name></expr></argument>, <argument><expr><name>qualifiedTableName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * We set a lock_timeout here so that if there are running queries on the
	 * shards we won't get blocked more than 1s and fail.
	 *
	 * The lock timeout also avoids getting stuck in a distributed deadlock, which
	 * can occur because we might be holding pg_dist_placement locks while also
	 * taking locks on the shard placements, and this code interrupts the
	 * distributed deadlock detector.
	 */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dropCommandList</name> <init>= <expr><call><name>list_make2</name><argument_list>(<argument><expr><literal type="string">"SET LOCAL lock_timeout TO '1s'"</literal></expr></argument>,
									   <argument><expr><name><name>dropQuery</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* remove the shard from the node */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlags</name> <init>= <expr><name>OUTSIDE_TRANSACTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>workerConnection</name> <init>= <expr><call><name>GetNodeUserDatabaseConnection</name><argument_list>(<argument><expr><name>connectionFlags</name></expr></argument>,
																	  <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>,
																	  <argument><expr><call><name>CurrentUserName</name><argument_list>()</argument_list></call></expr></argument>,
																	  <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>SendOptionalCommandListToWorkerOutsideTransactionWithConnection</name><argument_list>(
		<argument><expr><name>workerConnection</name></expr></argument>,
		<argument><expr><name>dropCommandList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropSubscriptionOutsideTransaction drops subscription with the given name on the
 * subscriber node if it exists. Note that this doesn't drop the replication slot on the
 * publisher node. The reason is that sometimes this is not possible. To known
 * cases where this is not possible are:
 * 1. Due to the node with the replication slot being down.
 * 2. Due to a deadlock when the replication is on the same node as the
 *    subscription, which is the case for shard splits to the local node.
 *
 * So instead of directly dropping the subscription, including the attached
 * replication slot, the subscription is first disconnected from the
 * replication slot before dropping it. The replication slot itself should be
 * dropped using DropReplicationSlot on the source connection.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryDropSubscriptionOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>subscriptionName</name></decl></parameter>,
									  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
									  <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlags</name> <init>= <expr><name>OUTSIDE_TRANSACTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetNodeUserDatabaseConnection</name><argument_list>(<argument><expr><name>connectionFlags</name></expr></argument>,
																<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>,
																<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>,
																<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RemoteTransactionBegin</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ExecuteOptionalRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>,
									 <argument><expr><literal type="string">"SET LOCAL lock_timeout TO '1s'"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>querySent</name> <init>= <expr><call><name>SendRemoteCommand</name><argument_list>(
		<argument><expr><name>connection</name></expr></argument>,
		<argument><expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"ALTER SUBSCRIPTION %s DISABLE"</literal></expr></argument>, <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>subscriptionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>querySent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>raiseInterrupts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>GetRemoteCommandResult</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>raiseInterrupts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsResponseOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errorcode</name> <init>= <expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>errorcode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>STR_ERRCODE_UNDEFINED_OBJECT</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * The subscription doesn't exist, so we can return right away.
			 * This DropSubscription call is effectively a no-op.
			 */</comment>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ReportResultError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RemoteTransactionCommit</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>alterQuery</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>alterQuery</name></expr></argument>,
					 <argument><expr><literal type="string">"ALTER SUBSCRIPTION %s SET (slot_name = NONE)"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>subscriptionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>dropQuery</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>dropQuery</name></expr></argument>,
					 <argument><expr><literal type="string">"DROP SUBSCRIPTION %s"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>subscriptionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dropCommandList</name> <init>= <expr><call><name>list_make3</name><argument_list>(<argument><expr><literal type="string">"SET LOCAL lock_timeout TO '1s'"</literal></expr></argument>,
									   <argument><expr><name><name>alterQuery</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>dropQuery</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>SendOptionalCommandListToWorkerOutsideTransactionWithConnection</name><argument_list>(
		<argument><expr><name>connection</name></expr></argument>,
		<argument><expr><name>dropCommandList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropPublicationOutsideTransaction drops the publication with the given name if it
 * exists.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryDropPublicationOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>publicationName</name></decl></parameter>,
									 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
									 <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlags</name> <init>= <expr><name>OUTSIDE_TRANSACTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetNodeUserDatabaseConnection</name><argument_list>(<argument><expr><name>connectionFlags</name></expr></argument>,
																<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>,
																<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>,
																<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>dropQuery</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>dropQuery</name></expr></argument>,
					 <argument><expr><literal type="string">"DROP PUBLICATION IF EXISTS %s"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>publicationName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>dropCommandList</name> <init>= <expr><call><name>list_make2</name><argument_list>(<argument><expr><literal type="string">"SET LOCAL lock_timeout TO '1s'"</literal></expr></argument>,
									   <argument><expr><name><name>dropQuery</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>SendOptionalCommandListToWorkerOutsideTransactionWithConnection</name><argument_list>(
		<argument><expr><name>connection</name></expr></argument>,
		<argument><expr><name>dropCommandList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropReplicationSlotOutsideTransaction drops the replication slot with the given
 * name if it exists.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryDropReplicationSlotOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>replicationSlotName</name></decl></parameter>,
										 <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>,
										 <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlags</name> <init>= <expr><name>OUTSIDE_TRANSACTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetNodeUserDatabaseConnection</name><argument_list>(<argument><expr><name>connectionFlags</name></expr></argument>,
																<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>,
																<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>,
																<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>RemoteTransactionBegin</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>ExecuteOptionalRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>,
									 <argument><expr><literal type="string">"SET LOCAL lock_timeout TO '1s'"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>querySent</name> <init>= <expr><call><name>SendRemoteCommand</name><argument_list>(
		<argument><expr><name>connection</name></expr></argument>,
		<argument><expr><call><name>psprintf</name><argument_list>(
			<argument><expr><literal type="string">"select pg_drop_replication_slot(slot_name) from "</literal>
			<name>REPLICATION_SLOT_CATALOG_TABLE_NAME</name>
			<literal type="string">" where slot_name = %s"</literal></expr></argument>,
			<argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name>replicationSlotName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
		)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>querySent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>raiseInterrupts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>GetRemoteCommandResult</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>raiseInterrupts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsResponseOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RemoteTransactionCommit</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errorcode</name> <init>= <expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>errorcode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>errorcode</name></expr></argument>, <argument><expr><name>STR_ERRCODE_OBJECT_IN_USE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* throw a warning unless object is in use */</comment>
		<expr_stmt><expr><call><name>ReportResultError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>WARNING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RemoteTransactionAbort</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetRemoteTransaction</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TryDropUserOutsideTransaction drops the user with the given name if it exists.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryDropUserOutsideTransaction</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>username</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nodePort</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlags</name> <init>= <expr><name>OUTSIDE_TRANSACTION</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetNodeUserDatabaseConnection</name><argument_list>(<argument><expr><name>connectionFlags</name></expr></argument>,
																<argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>,
																<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>,
																<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * The DROP USER command should not propagate, so we temporarily disable
	 * DDL propagation.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>success</name> <init>= <expr><call><name>SendOptionalCommandListToWorkerOutsideTransactionWithConnection</name><argument_list>(
		<argument><expr><name>connection</name></expr></argument>,
		<argument><expr><call><name>list_make3</name><argument_list>(
			<argument><expr><literal type="string">"SET LOCAL lock_timeout TO '1s'"</literal></expr></argument>,
			<argument><expr><literal type="string">"SET LOCAL citus.enable_ddl_propagation TO OFF;"</literal></expr></argument>,
			<argument><expr><call><name>psprintf</name><argument_list>(<argument><expr><literal type="string">"DROP USER IF EXISTS %s;"</literal></expr></argument>,
					 <argument><expr><call><name>quote_identifier</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>success</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetNextOperationId allocates and returns a unique operationId for an operation
 * requiring potential cleanup. This allocation occurs both in shared memory and
 * in write ahead logs; writing to logs avoids the risk of having operationId collisions.
 */</comment>
<function><type><specifier>static</specifier> <name>OperationId</name></type>
<name>GetNextOperationId</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>OperationId</name></type> <name>operationdId</name> <init>= <expr><name>INVALID_OPERATION_ID</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * In regression tests, we would like to generate operation IDs consistently
	 * even if the tests run in parallel. Instead of the sequence, we can use
	 * the next_operation_id GUC to specify which operation ID the current session should
	 * generate next. The GUC is automatically increased by 1 every time a new
	 * operation ID is generated.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NextOperationId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>operationdId</name> <operator>=</operator> <name>NextOperationId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>NextOperationId</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<return>return <expr><name>operationdId</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Generate sequence using a subtransaction. else we can hold replication slot creation for operations */</comment>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>sequenceName</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>,
					 <argument><expr><name>PG_CATALOG</name></expr></argument>,
					 <argument><expr><name>OPERATIONID_SEQUENCE_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>StringInfo</name></type> <name>nextValueCommand</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>nextValueCommand</name></expr></argument>, <argument><expr><literal type="string">"SELECT nextval(%s);"</literal></expr></argument>,
					 <argument><expr><call><name>quote_literal_cstr</name><argument_list>(<argument><expr><name><name>sequenceName</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetConnectionForLocalQueriesOutsideTransaction</name><argument_list>(
		<argument><expr><call><name>CitusExtensionOwnerName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>queryResult</name> <init>= <expr><call><name>ExecuteOptionalRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name><name>nextValueCommand</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
												   <argument><expr><operator>&amp;</operator><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>queryResult</name> <operator>!=</operator> <name>RESPONSE_OKAY</name> <operator>||</operator> <operator>!</operator><call><name>IsResponseOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PQntuples</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<call><name>PQnfields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ReportResultError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>operationdId</name> <operator>=</operator> <call><name>SafeStringToUint64</name><argument_list>(<argument><expr><call><name>PQgetvalue</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> <comment type="block">/* nodeId column*/</comment>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>operationdId</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ListCleanupRecords lists all the current cleanup records.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>ListCleanupRecords</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pgDistCleanup</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><call><name>DistCleanupRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>recordList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>indexOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>,
													<argument><expr><name>indexOK</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><call><name>TupleToCleanupRecord</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>tupleDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>recordList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>recordList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ListCleanupRecordsForCurrentOperation lists all the cleanup records for
 * current operation.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>ListCleanupRecordsForCurrentOperation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* We must have a valid OperationId. Any operation requring cleanup
	 * will call RegisterOperationNeedingCleanup.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>CurrentOperationId</name> <operator>!=</operator> <name>INVALID_OPERATION_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>pgDistCleanup</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><call><name>DistCleanupRelationId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><call><name>RelationGetDescr</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_pg_dist_cleanup_operation_id</name></expr></argument>, <argument><expr><name>BTEqualStrategyNumber</name></expr></argument>,
				<argument><expr><name>F_INT8EQ</name></expr></argument>, <argument><expr><call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>CurrentOperationId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>scanIndexId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>useIndex</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>scanIndexId</name></expr></argument>, <argument><expr><name>useIndex</name></expr></argument>,
													<argument><expr><name>NULL</name></expr></argument>,
													<argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>recordList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name> <operator>=</operator> <call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><call><name>TupleToCleanupRecord</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>tupleDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>recordList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>recordList</name></expr></argument>, <argument><expr><name>record</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>recordList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TupleToCleanupRecord converts a pg_dist_cleanup record tuple into a CleanupRecord struct.
 */</comment>
<function><type><specifier>static</specifier> <name>CleanupRecord</name> <modifier>*</modifier></type>
<name>TupleToCleanupRecord</name><parameter_list>(<parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name></type> <name><name>datumArray</name><index>[<expr><name>Natts_pg_dist_cleanup</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name><name>isNullArray</name><index>[<expr><name>Natts_pg_dist_cleanup</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>heap_deform_tuple</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>, <argument><expr><name>tupleDescriptor</name></expr></argument>, <argument><expr><name>datumArray</name></expr></argument>, <argument><expr><name>isNullArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>CleanupRecord</name> <modifier>*</modifier></type><name>record</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CleanupRecord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>recordId</name></name> <operator>=</operator>
		<call><name>DatumGetUInt64</name><argument_list>(<argument><expr><name><name>datumArray</name><index>[<expr><name>Anum_pg_dist_cleanup_record_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>operationId</name></name> <operator>=</operator>
		<call><name>DatumGetUInt64</name><argument_list>(<argument><expr><name><name>datumArray</name><index>[<expr><name>Anum_pg_dist_cleanup_operation_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>objectType</name></name> <operator>=</operator>
		<call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>datumArray</name><index>[<expr><name>Anum_pg_dist_cleanup_object_type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>objectName</name></name> <operator>=</operator>
		<call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name><name>datumArray</name><index>[<expr><name>Anum_pg_dist_cleanup_object_name</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>nodeGroupId</name></name> <operator>=</operator>
		<call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>datumArray</name><index>[<expr><name>Anum_pg_dist_cleanup_node_group_id</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>record</name><operator>-&gt;</operator><name>policy</name></name> <operator>=</operator>
		<call><name>DatumGetInt32</name><argument_list>(<argument><expr><name><name>datumArray</name><index>[<expr><name>Anum_pg_dist_cleanup_policy_type</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>record</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CleanupRecordExists returns whether a cleanup record with the given
 * record ID exists in pg_dist_cleanup_record.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>CleanupRecordExists</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>recordId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pgDistCleanup</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><call><name>DistCleanupRelationId</name><argument_list>()</argument_list></call></expr></argument>,
										<argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>indexOK</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_pg_dist_cleanup_record_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT8EQ</name></expr></argument>, <argument><expr><call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>recordId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>,
													<argument><expr><call><name>DistCleanupPrimaryKeyIndexId</name><argument_list>()</argument_list></call></expr></argument>,
													<argument><expr><name>indexOK</name></expr></argument>,
													<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>recordExists</name> <init>= <expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>recordExists</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DeleteCleanupRecordByRecordId deletes a single pg_dist_cleanup_record entry.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DeleteCleanupRecordByRecordId</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>recordId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Relation</name></type> <name>pgDistCleanup</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><call><name>DistCleanupRelationId</name><argument_list>()</argument_list></call></expr></argument>,
										<argument><expr><name>RowExclusiveLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>scanKeyCount</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>scanKey</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>indexOK</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>scanKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>Anum_pg_dist_cleanup_record_id</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_INT8EQ</name></expr></argument>, <argument><expr><call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>recordId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scanDescriptor</name> <init>= <expr><call><name>systable_beginscan</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>,
													<argument><expr><call><name>DistCleanupPrimaryKeyIndexId</name><argument_list>()</argument_list></call></expr></argument>,
													<argument><expr><name>indexOK</name></expr></argument>,
													<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>scanKeyCount</name></expr></argument>, <argument><expr><name>scanKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><call><name>systable_getnext</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>heapTuple</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find cleanup record "</literal> <name>UINT64_FORMAT</name></expr></argument>,
							   <argument><expr><name>recordId</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>simple_heap_delete</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>heapTuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scanDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CommandCounterIncrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>pgDistCleanup</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetNextCleanupRecordId allocates and returns a unique recordid for a cleanup entry.
 * This allocation occurs both in shared memory and
 * in write ahead logs; writing to logs avoids the risk of having operationId collisions.
 */</comment>
<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>GetNextCleanupRecordId</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>recordId</name> <init>= <expr><name>INVALID_CLEANUP_RECORD_ID</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * In regression tests, we would like to generate record IDs consistently
	 * even if the tests run in parallel. Instead of the sequence, we can use
	 * the next_record_id GUC to specify which recordid ID the current session should
	 * generate next. The GUC is automatically increased by 1 every time a new
	 * record ID is generated.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>NextCleanupRecordId</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>recordId</name> <operator>=</operator> <name>NextCleanupRecordId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>NextCleanupRecordId</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

		<return>return <expr><name>recordId</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>RangeVar</name> <modifier>*</modifier></type><name>sequenceName</name> <init>= <expr><call><name>makeRangeVar</name><argument_list>(<argument><expr><name>PG_CATALOG</name></expr></argument>,
										  <argument><expr><name>CLEANUPRECORDID_SEQUENCE_NAME</name></expr></argument>,
										  <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>missingOK</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>sequenceId</name> <init>= <expr><call><name>RangeVarGetRelid</name><argument_list>(<argument><expr><name>sequenceName</name></expr></argument>, <argument><expr><name>NoLock</name></expr></argument>, <argument><expr><name>missingOK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>checkPermissions</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>nextval_internal</name><argument_list>(<argument><expr><name>sequenceId</name></expr></argument>, <argument><expr><name>checkPermissions</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * LockOperationId takes an exclusive lock to ensure that only one process
 * can cleanup operationId resources at the same time.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>LockOperationId</name><parameter_list>(<parameter><decl><type><name>OperationId</name></type> <name>operationId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sessionLock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>dontWait</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SET_LOCKTAG_CLEANUP_OPERATION_ID</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>operationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator> <call><name>LockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>, <argument><expr><name>sessionLock</name></expr></argument>, <argument><expr><name>dontWait</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TryLockOperationId takes an exclusive lock (with dontWait = true) to ensure that
 * only one process can cleanup operationId resources at the same time.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TryLockOperationId</name><parameter_list>(<parameter><decl><type><name>OperationId</name></type> <name>operationId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>LOCKTAG</name></type> <name>tag</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>sessionLock</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>dontWait</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>SET_LOCKTAG_CLEANUP_OPERATION_ID</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>operationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>LockAcquireResult</name></type> <name>lockResult</name> <init>= <expr><call><name>LockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><name>ExclusiveLock</name></expr></argument>, <argument><expr><name>sessionLock</name></expr></argument>,
											   <argument><expr><name>dontWait</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><operator>(</operator><name>lockResult</name> <operator>!=</operator> <name>LOCKACQUIRE_NOT_AVAIL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
