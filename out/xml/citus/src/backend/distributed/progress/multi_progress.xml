<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/progress/multi_progress.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * multi_progress.c
 *	  Routines for tracking long-running jobs and seeing their progress.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/function_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_progress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/dsm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>


<comment type="block">/* dynamic shared memory handle of the current progress */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint64</name></type> <name>currentProgressDSMHandle</name> <init>= <expr><name>DSM_HANDLE_INVALID</name></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ProgressMonitorData</name> <modifier>*</modifier></type> <name>MonitorDataFromDSMHandle</name><parameter_list>(<parameter><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name></decl></parameter>,
													  <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachedSegment</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * CreateProgressMonitor is used to create a place to store progress
 * information related to long running processes. The function creates a
 * dynamic shared memory segment consisting of a header regarding to the
 * process and an array of "steps" that the long running "operations" consists
 * of. After initializing the data in the array of steps, the shared memory
 * segment can be shared with other processes using RegisterProgressMonitor, by
 * giving it the value that's written to the dsmHandle argument.
 */</comment>
<function><type><name>ProgressMonitorData</name> <modifier>*</modifier></type>
<name>CreateProgressMonitor</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>stepCount</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>stepSize</name></decl></parameter>, <parameter><decl><type><name>dsm_handle</name> <modifier>*</modifier></type><name>dsmHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>stepSize</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>stepCount</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of steps and size of each step should be "</literal>
						<literal type="string">"positive values"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Size</name></type> <name>monitorSize</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>ProgressMonitorData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>stepSize</name> <operator>*</operator> <name>stepCount</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><call><name>dsm_create</name><argument_list>(<argument><expr><name>monitorSize</name></expr></argument>, <argument><expr><name>DSM_CREATE_NULL_IF_MAXSEGMENTS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create a dynamic shared memory segment to "</literal>
						<literal type="string">"keep track of progress of the current command"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>dsmHandle</name> <operator>=</operator> <call><name>dsm_segment_handle</name><argument_list>(<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ProgressMonitorData</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>MonitorDataFromDSMHandle</name><argument_list>(<argument><expr><operator>*</operator><name>dsmHandle</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dsmSegment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>stepCount</name></name> <operator>=</operator> <name>stepCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>monitor</name><operator>-&gt;</operator><name>processId</name></name> <operator>=</operator> <name>MyProcPid</name></expr>;</expr_stmt>
	<return>return <expr><name>monitor</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RegisterProgressMonitor shares dsmHandle with other postgres process by
 * storing it in pg_stat_get_progress_info output, to be parsed by a
 * progress retrieval command later on. This behavior may cause unrelated (but
 * hopefully harmless) rows in pg_stat_progress_vacuum output. The caller of
 * this function should provide a magic number, a unique 64 bit unsigned
 * integer, to distinguish different types of commands.
 *
 * IMPORTANT: After registering the progress monitor, all modification to the
 * data should be done using concurrency safe operations (i.e. locks and
 * atomics)
 */</comment>
<function><type><name>void</name></type>
<name>RegisterProgressMonitor</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>progressTypeMagicNumber</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>relationId</name></decl></parameter>,
						<parameter><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>pgstat_progress_start_command</name><argument_list>(<argument><expr><name>PROGRESS_COMMAND_VACUUM</name></expr></argument>, <argument><expr><name>relationId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_progress_update_param</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pgstat_progress_update_param</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>progressTypeMagicNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>currentProgressDSMHandle</name> <operator>=</operator> <name>dsmHandle</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetCurrentProgressMonitor function returns the header and steps array related to the
 * current progress. A progress monitor should be created by calling
 * CreateProgressMonitor, before calling this function.
 */</comment>
<function><type><name>ProgressMonitorData</name> <modifier>*</modifier></type>
<name>GetCurrentProgressMonitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ProgressMonitorData</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>MonitorDataFromDSMHandle</name><argument_list>(<argument><expr><name>currentProgressDSMHandle</name></expr></argument>,
															<argument><expr><operator>&amp;</operator><name>dsmSegment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>monitor</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FinalizeCurrentProgressMonitor releases the dynamic memory segment of the current
 * progress monitoring data structure and removes the process from
 * pg_stat_get_progress_info() output. If there's no such dynamic memory
 * segment this is a no-op.
 */</comment>
<function><type><name>void</name></type>
<name>FinalizeCurrentProgressMonitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>currentProgressDSMHandle</name> <operator>==</operator> <name>DSM_HANDLE_INVALID</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><call><name>dsm_find_mapping</name><argument_list>(<argument><expr><name>currentProgressDSMHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dsm_detach</name><argument_list>(<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pgstat_progress_end_command</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>currentProgressDSMHandle</name> <operator>=</operator> <name>DSM_HANDLE_INVALID</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * HasProgressMonitor returns true if there is a current progress monitor,
 * by checking the variable currentProgressDSMHandle. Returns false otherwise.
 */</comment>
<function><type><name>bool</name></type>
<name>HasProgressMonitor</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>currentProgressDSMHandle</name> <operator>!=</operator> <name>DSM_HANDLE_INVALID</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ProgressMonitorList returns the addresses of monitors of ongoing commands, associated
 * with the given identifier magic number. The function takes a pass in
 * pg_stat_get_progress_info output, filters the rows according to the given magic number,
 * and returns the list of addresses of dynamic shared memory segments. Notice that the
 * caller detach from the attached segments with a call to DetachFromDSMSegments function.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ProgressMonitorList</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>commandTypeMagicNumber</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachedDSMSegments</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * The expected magic number should reside in the first progress field and the
	 * actual segment handle in the second but the slot ordering is 1-indexed in the
	 * tuple table slot and there are 3 other fields before the progress fields in the
	 * pg_stat_get_progress_info output.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>magicNumberIndex</name> <init>= <expr><literal type="number">0</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dsmHandleIndex</name> <init>= <expr><literal type="number">1</literal> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <literal type="number">3</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Currently, Postgres' progress logging mechanism supports only the VACUUM
	 * operations. Therefore, we identify ourselves as a VACUUM command but only fill
	 * a couple of the available fields. Therefore the commands that use Citus' progress
	 * monitoring API will appear in pg_stat_progress_vacuum output.
	 */</comment>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>commandTypeText</name> <init>= <expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><literal type="string">"VACUUM"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>commandTypeDatum</name> <init>= <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><name>commandTypeText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>monitorList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>getProgressInfoFunctionOid</name> <init>= <expr><call><name>FunctionOid</name><argument_list>(<argument><expr><literal type="string">"pg_catalog"</literal></expr></argument>,
												 <argument><expr><literal type="string">"pg_stat_get_progress_info"</literal></expr></argument>,
												 <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>progressResultSet</name> <init>= <expr><call><name>FunctionCallGetTupleStore1</name><argument_list>(
		<argument><expr><name>pg_stat_get_progress_info</name></expr></argument>,
		<argument><expr><name>getProgressInfoFunctionOid</name></expr></argument>,
		<argument><expr><name>commandTypeDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>tupleTableSlot</name> <init>= <expr><call><name>MakeSingleTupleTableSlot</name><argument_list>(
		<argument><expr><name><name>progressResultSet</name><operator>-&gt;</operator><name>setDesc</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>TTSOpsMinimalTuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* iterate over tuples in tuple store, and send them to destination */</comment>
	<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>nextTuple</name> <init>= <expr><call><name>tuplestore_gettupleslot</name><argument_list>(<argument><expr><name><name>progressResultSet</name><operator>-&gt;</operator><name>setResult</name></name></expr></argument>,
												 <argument><expr><name>true</name></expr></argument>,
												 <argument><expr><name>false</name></expr></argument>,
												 <argument><expr><name>tupleTableSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>nextTuple</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>Datum</name></type> <name>magicNumberDatum</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>, <argument><expr><name>magicNumberIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>magicNumber</name> <init>= <expr><call><name>DatumGetUInt64</name><argument_list>(<argument><expr><name>magicNumberDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNull</name> <operator>&amp;&amp;</operator> <name>magicNumber</name> <operator>==</operator> <name>commandTypeMagicNumber</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type> <name>dsmHandleDatum</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>, <argument><expr><name>dsmHandleIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name> <init>= <expr><call><name>DatumGetUInt64</name><argument_list>(<argument><expr><name>dsmHandleDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>attachedSegment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>ProgressMonitorData</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><call><name>MonitorDataFromDSMHandle</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>,
																	<argument><expr><operator>&amp;</operator><name>attachedSegment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>monitor</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><name>attachedDSMSegments</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>attachedDSMSegments</name></expr></argument>, <argument><expr><name>attachedSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>monitorList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>monitorList</name></expr></argument>, <argument><expr><name>monitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>monitorList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * MonitorDataFromDSMHandle returns the progress monitoring data structure at the
 * given segment
 */</comment>
<function><type><name>ProgressMonitorData</name> <modifier>*</modifier></type>
<name>MonitorDataFromDSMHandle</name><parameter_list>(<parameter><decl><type><name>dsm_handle</name></type> <name>dsmHandle</name></decl></parameter>, <parameter><decl><type><name>dsm_segment</name> <modifier>*</modifier><modifier>*</modifier></type><name>attachedSegment</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><call><name>dsm_find_mapping</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>dsmSegment</name> <operator>=</operator> <call><name>dsm_attach</name><argument_list>(<argument><expr><name>dsmHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>dsmSegment</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ProgressMonitorData</name> <modifier>*</modifier></type><name>monitor</name> <init>= <expr><operator>(</operator><name>ProgressMonitorData</name> <operator>*</operator><operator>)</operator> <call><name>dsm_segment_address</name><argument_list>(
		<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><operator>*</operator><name>attachedSegment</name> <operator>=</operator> <name>dsmSegment</name></expr>;</expr_stmt>

	<return>return <expr><name>monitor</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ProgressMonitorSteps returns a pointer to the array of steps that are stored
 * in a progress monitor. This is simply the data right after the header, so
 * this function is trivial. The main purpose of this function is to make the
 * intent clear to readers of the code.
 *
 * NOTE: The pointer this function returns is explicitly not stored in the
 * header, because the header is shared between processes. The absolute pointer
 * to the steps can have a different value between processes though, because
 * the same piece of shared memory often has a different address in different
 * processes. So we calculate this pointer over and over to make sure we use
 * the right value for each process.
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type>
<name>ProgressMonitorSteps</name><parameter_list>(<parameter><decl><type><name>ProgressMonitorData</name> <modifier>*</modifier></type><name>monitor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>monitor</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DetachFromDSMSegments ensures that the process is detached from all of the segments in
 * the given list.
 */</comment>
<function><type><name>void</name></type>
<name>DetachFromDSMSegments</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>dsmSegmentList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>dsm_segment</name> <modifier>*</modifier></type><name>dsmSegment</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>dsmSegment</argument>, <argument>dsmSegmentList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>dsm_detach</name><argument_list>(<argument><expr><name>dsmSegment</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
