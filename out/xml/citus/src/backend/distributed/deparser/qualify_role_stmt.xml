<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/deparser/qualify_role_stmt.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * qualify_role_stmt.c
 *	  Functions specialized in fully qualifying all role statements. These
 *	  functions are dispatched from qualify.c
 *
 *	  Fully qualifying role statements consists of adding the current database
 *    name, session user, current use, and current configuration values.
 *
 *	  Goal would be that the deparser functions for these statements can
 *	  serialize the statement without any external lookups.
 *
 * Copyright (c), Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/deparser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>QualifyVarSetCurrent</name><parameter_list>(<parameter><decl><type><name>VariableSetStmt</name> <modifier>*</modifier></type><name>setStmt</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * QualifyAlterRoleSetStmt transforms a
 * ALTER ROLE .. SET ..
 * statement in place and makes the settings fully qualified.
 */</comment>
<function><type><name>void</name></type>
<name>QualifyAlterRoleSetStmt</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>AlterRoleSetStmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>AlterRoleSetStmt</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>VariableSetStmt</name> <modifier>*</modifier></type><name>setStmt</name> <init>= <expr><name><name>stmt</name><operator>-&gt;</operator><name>setstmt</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>setStmt</name><operator>-&gt;</operator><name>kind</name></name> <operator>==</operator> <name>VAR_SET_CURRENT</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>QualifyVarSetCurrent</name><argument_list>(<argument><expr><name>setStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * QualifyVarSetCurrent transforms a
 * FROM CURRENT
 * into a
 * SET config_name TO 'config_value'
 * VariableSetStmt in place and hence makes it fully qualified.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>QualifyVarSetCurrent</name><parameter_list>(<parameter><decl><type><name>VariableSetStmt</name> <modifier>*</modifier></type><name>setStmt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>configurationName</name> <init>= <expr><name><name>setStmt</name><operator>-&gt;</operator><name>name</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>configValue</name> <init>= <expr><call><name>GetConfigOptionByName</name><argument_list>(<argument><expr><name>configurationName</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>setStmt</name><operator>-&gt;</operator><name>kind</name></name> <operator>=</operator> <name>VAR_SET_VALUE</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>setStmt</name><operator>-&gt;</operator><name>args</name></name> <operator>=</operator> <call><name>list_make1</name><argument_list>(<argument><expr><call><name>MakeSetStatementArguments</name><argument_list>(<argument><expr><name>configurationName</name></expr></argument>, <argument><expr><name>configValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
