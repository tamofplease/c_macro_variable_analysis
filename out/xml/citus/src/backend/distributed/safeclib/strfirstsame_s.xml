<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/safeclib/strfirstsame_s.c"><comment type="block">/*------------------------------------------------------------------
 * strfirstsame_s.c
 *
 * November 2008, Bo Berry
 *
 * Copyright (c) 2008-2011 by Cisco Systems, Inc
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safeclib_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_lib.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/**
 * NAME
 *    strfirstsame_s
 *
 * SYNOPSIS
 *    #include "safe_str_lib.h"
 *    errno_t
 *    strfirstsame_s(const char *dest, rsize_t dmax,
 *                   const char *src,  rsize_t *index)
 *
 * DESCRIPTION
 *    Returns the index of the first character that is the
 *    same between dest and src.  The scanning stops at the
 *    fisrt null in dest or src, or after dmax characters.
 *
 * EXTENSION TO
 *    ISO/IEC TR 24731, Programming languages, environments
 *    and system software interfaces, Extensions to the C Library,
 *    Part I: Bounds-checking interfaces
 *
 * INPUT PARAMETERS
 *    dest     pointer to string to compare against
 *
 *    dmax     restricted maximum length of string dest
 *
 *    src      pointer to the string to be compared to dest
 *
 *    index    pointer to returned index
 *
 * OUTPUT PARAMETERS
 *    index    updated index
 *
 * RUNTIME CONSTRAINTS
 *    Neither dest nor src shall be a null pointer.
 *    indicator shall not be a null pointer.
 *    dmax shall not be 0
 *    dmax shall not be greater than RSIZE_MAX_STR
 *
 * RETURN VALUE
 *    index to first same char, when the return code is OK
 *
 *    EOK         index to first same char is returned
 *    ESNULLP     NULL pointer
 *    ESZEROL     zero length
 *    ESLEMAX     length exceeds max limit
 *    ESNOTFND    not found
 *
 * ALSO SEE
 *    strfirstchar_s(), strfirstdiff_s(), strlastchar_s(),
 *    strlastdiff_s(), strlastsame_s()
 *
 */</comment>
<function><type><name>errno_t</name></type>
<name>strfirstsame_s</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,  <parameter><decl><type><name>rsize_t</name> <modifier>*</modifier></type><name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>rp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strfirstsame_s: index is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>ESNULLP</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>dest</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strfirstsame_s: dest is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>ESNULLP</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>src</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strfirstsame_s: src is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>ESNULLP</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>==</operator> <literal type="number">0</literal></expr> )</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strfirstsame_s: dmax is 0"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>ESZEROL</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>&gt;</operator> <name>RSIZE_MAX_STR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strfirstsame_s: dmax exceeds max"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>ESLEMAX</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* hold reference point */</comment>
    <expr_stmt><expr><name>rp</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

    <comment type="block">/*
     * find the offset
     */</comment>
    <while>while <condition>(<expr><operator>*</operator><name>dest</name> <operator>&amp;&amp;</operator> <operator>*</operator><name>src</name> <operator>&amp;&amp;</operator> <name>dmax</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest</name> <operator>==</operator> <operator>*</operator><name>src</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>index</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>dest</name> <operator>-</operator> <name>rp</name><operator>)</operator></expr>;</expr_stmt>
            <return>return <expr><operator>(</operator><name>EOK</name><operator>)</operator></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>src</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><operator>(</operator><name>ESNOTFND</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<macro><name>EXPORT_SYMBOL</name><argument_list>(<argument>strfirstsame_s</argument>)</argument_list></macro>
</unit>
