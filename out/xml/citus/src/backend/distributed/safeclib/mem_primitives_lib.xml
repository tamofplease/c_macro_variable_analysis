<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/safeclib/mem_primitives_lib.c"><comment type="block">/*------------------------------------------------------------------
 * mem_primitives_lib.c - Unguarded Memory Copy Routines
 *
 * February 2005, Bo Berry
 *
 * Copyright (c) 2005-2009 Cisco Systems
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mem_primitives_lib.h"</cpp:file></cpp:include>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wpragmas"</cpp:literal></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wimplicit-fallthrough"</cpp:literal></cpp:pragma>
<comment type="block">/*
 * mem_primitives_lib.c  provides unguarded memory routines
 * that are used by the safe_mem_library.   These routines
 * may also be used by an application, but the application
 * is responsible for all parameter validation and alignment.
 */</comment>

<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_set - Sets memory to value
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_set(void *dest, uint32_t len, uint8_t value)
 *
 * DESCRIPTION
 *    Sets len bytes starting at dest to the specified value
 *
 * INPUT PARAMETERS
 *    dest - pointer to memory that will be set to value
 *
 *    len - number of bytes to be set
 *
 *    value - byte value
 *
 * OUTPUT PARAMETERS
 *    dest - is updated
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_set</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>lcount</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>lp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>value32</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>count</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>dp</name> <operator>=</operator> <name>dest</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>value32</name> <operator>=</operator> <name>value</name> <operator>|</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">16</literal><operator>)</operator> <operator>|</operator> <operator>(</operator><name>value</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/*
     * First, do the few bytes to get uint32_t aligned.
     */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>count</name> <operator>&amp;&amp;</operator> <operator>(</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dp</name> <operator>&amp;</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator> <operator>)</operator></expr>;</condition> <incr><expr><name>count</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
     * Then do the uint32_ts, unrolled the loop for performance
     */</comment>
    <expr_stmt><expr><name>lp</name> <operator>=</operator> <operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lcount</name> <operator>=</operator> <name>count</name> <operator>&gt;&gt;</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>lcount</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

        <switch>switch <condition>(<expr><name>lcount</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Here we do blocks of 8.  Once the remaining count
         * drops below 8, take the fast track to finish up.
         */</comment>
        <default>default:</default>
            <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lcount</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>

        <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>lp</name><operator>++</operator> <operator>=</operator> <name>value32</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>lcount</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></while> <comment type="block">/* end while */</comment>


    <expr_stmt><expr><name>dp</name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>lp</name></expr>;</expr_stmt>

    <comment type="block">/*
     * compute the number of remaining bytes
     */</comment>
    <expr_stmt><expr><name>count</name> <operator>&amp;=</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof><operator>-</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>

    <comment type="block">/*
     * remaining bytes
     */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>count</name></expr>;</condition> <incr><expr><name>dp</name><operator>++</operator></expr><operator>,</operator> <expr><name>count</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dp</name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_set16 - Sets memory to value
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_set16(uint16_t *dp, uint32_t len, uint16_t value)
 *
 * DESCRIPTION
 *    Sets len uint16_ts starting at dest to the specified value.
 *    Pointers must meet system alignment requirements.
 *
 * INPUT PARAMETERS
 *    dest - pointer to memory that will be set to value
 *
 *    len - number of uint16_ts to be set
 *
 *    value - uint16_t value
 *
 * OUTPUT PARAMETERS
 *    dest - is updated
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_set16</name> <parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint16_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

        <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Here we do blocks of 8.  Once the remaining count
         * drops below 8, take the fast track to finish up.
         */</comment>
        <default>default:</default>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></while> <comment type="block">/* end while */</comment>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_set32 - Sets memory to the uint32_t value
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_set32(uint32_t *dp, uint32_t len, uint32_t value)
 *
 * DESCRIPTION
 *    Sets len uint32_ts starting at dest to the specified value
 *    Pointers must meet system alignment requirements.
 *
 * INPUT PARAMETERS
 *    dest - pointer to memory that will be set to value
 *
 *    len - number of uint32_ts to be set
 *
 *    value - uint32_t value
 *
 * OUTPUT PARAMETERS
 *    dest - is updated
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_set32</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

        <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Here we do blocks of 8.  Once the remaining count
         * drops below 8, take the fast track to finish up.
         */</comment>
        <default>default:</default>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>

        <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
        <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></while> <comment type="block">/* end while */</comment>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_move - Move (handles overlap) memory
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_move(void *dest, const void *src, uint32_t len)
 *
 * DESCRIPTION
 *    Moves at most slen bytes from src to dest, up to dmax
 *    bytes.   Dest may overlap with src.
 *
 * INPUT PARAMETERS
 *    dest - pointer to the memory that will be replaced by src.
 *
 *    src - pointer to the memory that will be copied
 *          to dest
 *
 *    len - maximum number bytes of src that can be copied
 *
 * OUTPUT PARAMETERS
 *    dest - is updated
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_move</name> <parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wsize</name></cpp:macro>   <cpp:value>sizeof(uint32_t)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>wmask</name></cpp:macro>   <cpp:value>(wsize - 1)</cpp:value></cpp:define>

    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name> <init>= <expr><name>dest</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sp</name> <init>= <expr><name>src</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint32_t</name></type> <name>tsp</name></decl>;</decl_stmt>

    <comment type="block">/*
     * Determine if we need to copy forward or backward (overlap)
     */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dp</name> <operator>&lt;</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>sp</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Copy forward.
         */</comment>

        <comment type="block">/*
         * get a working copy of src for bit operations
         */</comment>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>sp</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Try to align both operands.  This cannot be done
         * unless the low bits match.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tsp</name> <operator>|</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dp</name><operator>)</operator> <operator>&amp;</operator> <name>wmask</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * determine how many bytes to copy to align operands
             */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tsp</name> <operator>^</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dp</name><operator>)</operator> <operator>&amp;</operator> <name>wmask</name> <operator>||</operator> <name>len</name> <operator>&lt;</operator> <name>wsize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>wsize</name> <operator>-</operator> <operator>(</operator><name>tsp</name> <operator>&amp;</operator> <name>wmask</name><operator>)</operator></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>tsp</name></expr>;</expr_stmt>

            <comment type="block">/*
             * make the alignment
             */</comment>
            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>tsp</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Now copy, then mop up any trailing bytes.
         */</comment>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name> <operator>/</operator> <name>wsize</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>tsp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>sp</name> <operator>+=</operator> <name>wsize</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>wsize</name></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>tsp</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * copy over the remaining bytes and we're done
         */</comment>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <name>wmask</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>tsp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>tsp</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/*
         * This section is used to copy backwards, to handle any
         * overlap.  The alignment requires (tps&amp;wmask) bytes to
         * align.
         */</comment>

        <comment type="block">/*
         * go to end of the memory to copy
         */</comment>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <comment type="block">/*
         * get a working copy of src for bit operations
         */</comment>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>sp</name></expr>;</expr_stmt>

        <comment type="block">/*
         * Try to align both operands.
         */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tsp</name> <operator>|</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dp</name><operator>)</operator> <operator>&amp;</operator> <name>wmask</name></expr>)</condition> <block>{<block_content>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>tsp</name> <operator>^</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>dp</name><operator>)</operator> <operator>&amp;</operator> <name>wmask</name> <operator>||</operator> <name>len</name> <operator>&lt;=</operator> <name>wsize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tsp</name> <operator>&amp;=</operator> <name>wmask</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>tsp</name></expr>;</expr_stmt>

            <comment type="block">/*
             * make the alignment
             */</comment>
            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>tsp</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * Now copy in uint32_t units, then mop up any trailing bytes.
         */</comment>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name> <operator>/</operator> <name>wsize</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>tsp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <do>do <block>{<block_content>
                <expr_stmt><expr><name>sp</name> <operator>-=</operator> <name>wsize</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>dp</name> <operator>-=</operator> <name>wsize</name></expr>;</expr_stmt>

                <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>sp</name></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>tsp</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
         * copy over the remaining bytes and we're done
         */</comment>
        <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <name>wmask</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tsp</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>tsp</name> <operator>=</operator> <name>len</name> <operator>&amp;</operator> <name>wmask</name></expr>;</expr_stmt>
            <do>do <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            </block_content>}</block> while <condition>(<expr><operator>--</operator><name>tsp</name></expr>)</condition>;</do>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_move8 - Move (handles overlap) memory
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_move8(void *dest, const void *src, uint32_t len)
 *
 * DESCRIPTION
 *    Moves at most len uint8_ts from sp to dp.
 *    The destination may overlap with source.
 *
 * INPUT PARAMETERS
 *    dp - pointer to the memory that will be replaced by sp.
 *
 *    sp - pointer to the memory that will be copied
 *         to dp
 *
 *    len - maximum number uint8_t of sp that can be copied
 *
 * OUTPUT PARAMETERS
 *    dp - pointer to the memory that will be replaced by sp.
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_move8</name> <parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
     * Determine if we need to copy forward or backward (overlap)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>dp</name> <operator>&lt;</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Copy forward.
         */</comment>

         <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

             <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
             <comment type="block">/*
              * Here we do blocks of 8.  Once the remaining count
              * drops below 8, take the fast track to finish up.
              */</comment>
             <default>default:</default>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                  <break>break;</break>

             <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>

             <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                 <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                 <break>break;</break>
             </block_content>}</block></switch>
         </block_content>}</block></while> <comment type="block">/* end while */</comment>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/*
         * This section is used to copy backwards, to handle any
         * overlap.  The alignment requires (tps&amp;wmask) bytes to
         * align.
         */</comment>


        <comment type="block">/*
         * go to end of the memory to copy
         */</comment>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

            <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * Here we do blocks of 8.  Once the remaining count
             * drops below 8, take the fast track to finish up.
             */</comment>
            <default>default:</default>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                 <break>break;</break>

            <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>

            <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while> <comment type="block">/* end while */</comment>
    </block_content>}</block></else></if_stmt>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_move16 - Move (handles overlap) memory
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_move16(void *dest, const void *src, uint32_t len)
 *
 * DESCRIPTION
 *    Moves at most len uint16_ts from sp to dp.
 *    The destination may overlap with source.
 *
 * INPUT PARAMETERS
 *    dp - pointer to the memory that will be replaced by sp.
 *
 *    sp - pointer to the memory that will be copied
 *         to dp
 *
 *    len - maximum number uint16_t of sp that can be copied
 *
 * OUTPUT PARAMETERS
 *    dp - is updated
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_move16</name> <parameter_list>(<parameter><decl><type><name>uint16_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint16_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
     * Determine if we need to copy forward or backward (overlap)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>dp</name> <operator>&lt;</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Copy forward.
         */</comment>

         <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

             <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
             <comment type="block">/*
              * Here we do blocks of 8.  Once the remaining count
              * drops below 8, take the fast track to finish up.
              */</comment>
             <default>default:</default>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                  <break>break;</break>

             <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>

             <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                 <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                 <break>break;</break>
             </block_content>}</block></switch>
         </block_content>}</block></while> <comment type="block">/* end while */</comment>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/*
         * This section is used to copy backwards, to handle any
         * overlap.  The alignment requires (tps&amp;wmask) bytes to
         * align.
         */</comment>

        <comment type="block">/*
         * go to end of the memory to copy
         */</comment>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

            <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * Here we do blocks of 8.  Once the remaining count
             * drops below 8, take the fast track to finish up.
             */</comment>
            <default>default:</default>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                 <break>break;</break>

            <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>

            <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while> <comment type="block">/* end while */</comment>
    </block_content>}</block></else></if_stmt>

    <return>return;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**
 * NAME
 *    mem_prim_move32 - Move (handles overlap) memory
 *
 * SYNOPSIS
 *    #include "mem_primitives_lib.h"
 *    void
 *    mem_prim_move32(void *dest, const void *src, uint32_t len)
 *
 * DESCRIPTION
 *    Moves at most len uint32_ts from sp to dp.
 *    The destination may overlap with source.
 *
 * INPUT PARAMETERS
 *    dp - pointer to the memory that will be replaced by sp.
 *
 *    sp - pointer to the memory that will be copied
 *         to dp
 *
 *    len - maximum number uint32_t of sp that can be copied
 *
 * OUTPUT PARAMETERS
 *    dp - is updated
 *
 * RETURN VALUE
 *    none
 *
 */</comment>
<function><type><name>void</name></type>
<name>mem_prim_move32</name> <parameter_list>(<parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>dp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint32_t</name> <modifier>*</modifier></type><name>sp</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <comment type="block">/*
     * Determine if we need to copy forward or backward (overlap)
     */</comment>
    <if_stmt><if>if <condition>(<expr><name>dp</name> <operator>&lt;</operator> <name>sp</name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*
         * Copy forward.
         */</comment>

         <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

             <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
             <comment type="block">/*
              * Here we do blocks of 8.  Once the remaining count
              * drops below 8, take the fast track to finish up.
              */</comment>
             <default>default:</default>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                  <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                  <break>break;</break>

             <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>

             <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
             <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><name>dp</name><operator>++</operator> <operator>=</operator> <operator>*</operator><name>sp</name><operator>++</operator></expr>;</expr_stmt>
                 <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                 <break>break;</break>
             </block_content>}</block></switch>
         </block_content>}</block></while> <comment type="block">/* end while */</comment>

    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="block">/*
         * This section is used to copy backwards, to handle any
         * overlap.
         */</comment>

        <comment type="block">/*
         * go to end of the memory to copy
         */</comment>
        <expr_stmt><expr><name>sp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dp</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><name>len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

            <switch>switch <condition>(<expr><name>len</name></expr>)</condition> <block>{<block_content>
            <comment type="block">/*
             * Here we do blocks of 8.  Once the remaining count
             * drops below 8, take the fast track to finish up.
             */</comment>
            <default>default:</default>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt> <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                 <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
                 <break>break;</break>

            <case>case <expr><literal type="number">15</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">14</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">13</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">12</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">11</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">10</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">9</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">8</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>

            <case>case <expr><literal type="number">7</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">6</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">5</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">4</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">3</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">2</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
            <case>case <expr><literal type="number">1</literal></expr>:</case>  <expr_stmt><expr><operator>*</operator><operator>--</operator><name>dp</name> <operator>=</operator> <operator>*</operator><operator>--</operator><name>sp</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></while> <comment type="block">/* end while */</comment>
    </block_content>}</block></else></if_stmt>

    <return>return;</return>
</block_content>}</block></function>
</unit>
