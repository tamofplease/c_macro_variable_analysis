<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/safeclib/strismixedcase_s.c"><comment type="block">/*------------------------------------------------------------------
 * strismixedcase_s.c
 *
 * November 2008, Bo Berry
 *
 * Copyright (c) 2008-2011, 2013 by Cisco Systems, Inc
 * All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use,
 * copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following
 * conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
 * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safeclib_private.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_str_lib.h"</cpp:file></cpp:include>


<comment type="block" format="doxygen">/**
 * NAME
 *    strismixedcase_s
 *
 * SYNOPSIS
 *    #include "safe_str_lib.h"
 *    bool
 *    strismixedcase_s(const char *dest, rsize_t dmax)
 *
 * DESCRIPTION
 *    This function checks that the entire string is mixed
 *    case.  The scanning stops at the first null or after
 *    dmax characters.
 *
 * EXTENSION TO
 *    ISO/IEC TR 24731, Programming languages, environments
 *    and system software interfaces, Extensions to the C Library,
 *    Part I: Bounds-checking interfaces
 *
 * INPUT PARAMETERS
 *    dest       pointer to string
 *
 *    dmax       maximum length of string
 *
 * OUTPUT PARAMETERS
 *    none
 *
 * RUNTIME CONSTRAINTS
 *    dest shall not be a null pointer.
 *    dmax shall not equal zero.
 *    dmax shall not be greater than RSIZE_MAX_STR.
 *
 * RETURN VALUE
 *    true       string is mixed case
 *    false      string is not mixed case or error
 *
 * ALSO SEE
 *    strisalphanumeric_s(), strisascii_s(), strisdigit_s(),
 *    strishex_s(), strislowercase_s(),
 *    strisuppercase_s()
 *
 */</comment>
<function><type><name>bool</name></type>
<name>strismixedcase_s</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>rsize_t</name></type> <name>dmax</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dest</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strismixedcase_s: "</literal>
                   <literal type="string">"dest is null"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESNULLP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strismixedcase_s: "</literal>
                   <literal type="string">"dmax is 0"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESZEROL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>dmax</name> <operator>&gt;</operator> <name>RSIZE_MAX_STR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>invoke_safe_str_constraint_handler</name><argument_list>(<argument><expr><literal type="string">"strismixedcase_s: "</literal>
                   <literal type="string">"dmax exceeds max"</literal></expr></argument>,
                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>ESLEMAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dest</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>*</operator><name>dest</name></expr>)</condition> <block>{<block_content>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>*</operator><name>dest</name> <operator>&gt;=</operator> <literal type="char">'a'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>dest</name> <operator>&lt;=</operator> <literal type="char">'z'</literal><operator>)</operator><operator>)</operator>  <operator>||</operator>
            <operator>(</operator><operator>(</operator><operator>*</operator><name>dest</name> <operator>&gt;=</operator> <literal type="char">'A'</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>dest</name> <operator>&lt;=</operator> <literal type="char">'Z'</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>dest</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name>dmax</name><operator>--</operator></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <return>return <expr><operator>(</operator><name>false</name><operator>)</operator></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><operator>(</operator><name>true</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<macro><name>EXPORT_SYMBOL</name><argument_list>(<argument>strismixedcase_s</argument>)</argument_list></macro>
</unit>
