<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/executor/directed_acyclic_graph_execution.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * directed_acyclic_graph_execution_logic.c
 *
 * Logic to run tasks in their dependency order.
 *
 * Copyright (c) Citus Data, Inc.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/hash_helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/adaptive_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/directed_acyclic_graph_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transmit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_transaction.h"</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>TaskHashKey</name>
<block>{
	<decl_stmt><decl><type><name>uint64</name></type> <name>jobId</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>taskId</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * The padding field is needed to make sure the struct contains no
	 * automatic padding, which is not allowed for hashmap keys.
	 */</comment>
	<decl_stmt><decl><type><name>uint32</name></type> <name>padding</name></decl>;</decl_stmt>
}</block></struct></type><name>TaskHashKey</name>;</typedef>

<typedef>typedef <type><struct>struct <name>TaskHashEntry</name>
<block>{
	<decl_stmt><decl><type><name>TaskHashKey</name></type> <name>key</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
}</block></struct></type><name>TaskHashEntry</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsAllDependencyCompleted</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AddCompletedTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>curCompletedTasks</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>FindExecutableTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>allTasks</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>RemoveMergeTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsTaskAlreadyCompleted</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * ExecuteTasksInDependencyOrder executes the given tasks except the excluded
 * tasks in their dependency order. To do so, it iterates all
 * the tasks and finds the ones that can be executed at that time, it tries to
 * execute all of them in parallel. The parallelism is bound by MaxAdaptiveExecutorPoolSize.
 */</comment>
<function><type><name>void</name></type>
<name>ExecuteTasksInDependencyOrder</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>allTasks</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>excludedTasks</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>jobIds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert_valid_hash_key3</name><argument_list>(<argument><expr><name>TaskHashKey</name></expr></argument>, <argument><expr><name>jobId</name></expr></argument>, <argument><expr><name>taskId</name></expr></argument>, <argument><expr><name>padding</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name> <init>= <expr><call><name>CreateSimpleHash</name><argument_list>(<argument><expr><name>TaskHashKey</name></expr></argument>, <argument><expr><name>TaskHashEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* We only execute depended jobs' tasks, therefore to not execute */</comment>
	<comment type="block">/* top level tasks, we add them to the completedTasks. */</comment>
	<expr_stmt><expr><call><name>AddCompletedTasks</name><argument_list>(<argument><expr><name>excludedTasks</name></expr></argument>, <argument><expr><name>completedTasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>curTasks</name> <init>= <expr><call><name>FindExecutableTasks</name><argument_list>(<argument><expr><name>allTasks</name></expr></argument>, <argument><expr><name>completedTasks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>curTasks</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* merge tasks do not need to be executed */</comment>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>executableTasks</name> <init>= <expr><call><name>RemoveMergeTasks</name><argument_list>(<argument><expr><name>curTasks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>executableTasks</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ExecuteTaskList</name><argument_list>(<argument><expr><name>ROW_MODIFY_NONE</name></expr></argument>, <argument><expr><name>executableTasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>AddCompletedTasks</name><argument_list>(<argument><expr><name>curTasks</name></expr></argument>, <argument><expr><name>completedTasks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>curTasks</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>


<comment type="block">/*
 * FindExecutableTasks finds the tasks that can be executed currently,
 * which means that all of their dependencies are executed. If a task
 * is already executed, it is not added to the result.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>FindExecutableTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>allTasks</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>curTasks</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>task</argument>, <argument>allTasks</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>IsAllDependencyCompleted</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>completedTasks</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>IsTaskAlreadyCompleted</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>completedTasks</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>curTasks</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>curTasks</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>curTasks</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RemoveMergeTasks returns a copy of taskList that excludes all the
 * merge tasks. We do this because merge tasks are currently only a
 * logical concept that does not need to be executed.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>RemoveMergeTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>prunedTaskList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach_ptr</name><argument_list>(<argument>task</argument>, <argument>taskList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>taskType</name></name> <operator>!=</operator> <name>MERGE_TASK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>prunedTaskList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>prunedTaskList</name></expr></argument>, <argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>prunedTaskList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AddCompletedTasks adds the givens tasks to completedTasks HTAB.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AddCompletedTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>curCompletedTasks</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>task</argument>, <argument>curCompletedTasks</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TaskHashKey</name></type> <name>taskKey</name> <init>= <expr><block>{ <expr><name><name>task</name><operator>-&gt;</operator><name>jobId</name></name></expr>, <expr><name><name>task</name><operator>-&gt;</operator><name>taskId</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>completedTasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskKey</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * IsTaskAlreadyCompleted returns true if the given task
 * is found in the completedTasks HTAB.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsTaskAlreadyCompleted</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>TaskHashKey</name></type> <name>taskKey</name> <init>= <expr><block>{ <expr><name><name>task</name><operator>-&gt;</operator><name>jobId</name></name></expr>, <expr><name><name>task</name><operator>-&gt;</operator><name>taskId</name></name></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>completedTasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskKey</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>found</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * IsAllDependencyCompleted return true if the given task's
 * dependencies are completed.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsAllDependencyCompleted</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>targetTask</name></decl></parameter>, <parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>completedTasks</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>task</argument>, <argument>targetTask-&gt;dependentTaskList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TaskHashKey</name></type> <name>taskKey</name> <init>= <expr><block>{ <expr><name><name>task</name><operator>-&gt;</operator><name>jobId</name></name></expr>, <expr><name><name>task</name><operator>-&gt;</operator><name>taskId</name></name></expr> }</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>completedTasks</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>taskKey</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
