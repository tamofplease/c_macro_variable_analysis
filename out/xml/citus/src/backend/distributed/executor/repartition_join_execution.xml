<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/executor/repartition_join_execution.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * repartition_join_execution.c
 *
 * This file contains repartition specific logic.
 * ExecuteDependentTasks takes a list of top level tasks. Its logic is as follows:
 * - It generates all the tasks by descending in the tasks tree. Note that each task
 *  has a dependentTaskList.
 * - It generates FetchTask queryStrings with the MapTask queries. It uses the first replicate to
 *  fetch data when replication factor is &gt; 1. Note that if a task fails in any replica adaptive executor
 *  gives an error, so if we come to a fetchTask we know for sure that its dependedMapTask is executed in all
 *  replicas.
 * - It creates schemas in each worker in a single transaction to store intermediate results.
 * - It iterates all tasks and finds the ones whose dependencies are already executed, and executes them with
 *  adaptive executor logic.
 *
 *
 * Repartition queries do not begin a transaction even if we are in
 * a transaction block. As we don't begin a transaction, they won't see the
 * DDLs that happened earlier in the transaction because we don't have that
 * transaction id with repartition queries. Therefore we error in this case.
 *
 * Copyright (c) Citus Data, Inc.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/hash_helpers.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/adaptive_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/directed_acyclic_graph_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/task_execution_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/repartition_join_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transmit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_transaction.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>ExtractJobsInJobTree</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TraverseJobTree</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>curJob</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>jobs</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * ExecuteDependentTasks executes all tasks except the top level tasks
 * in order from the task tree. At a time, it can execute different tasks from
 * different jobs.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>ExecuteDependentTasks</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>topLevelTasks</name></decl></parameter>, <parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>topLevelJob</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>allTasks</name> <init>= <expr><call><name>CreateTaskListForJobTree</name><argument_list>(<argument><expr><name>topLevelTasks</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobIds</name> <init>= <expr><call><name>ExtractJobsInJobTree</name><argument_list>(<argument><expr><name>topLevelJob</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExecuteTasksInDependencyOrder</name><argument_list>(<argument><expr><name>allTasks</name></expr></argument>, <argument><expr><name>topLevelTasks</name></expr></argument>, <argument><expr><name>jobIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>jobIds</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ExtractJobsInJobTree returns all job ids in the job tree
 * where the given job is root.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>ExtractJobsInJobTree</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>jobIds</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TraverseJobTree</name><argument_list>(<argument><expr><name>job</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>jobIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>jobIds</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TraverseJobTree does a dfs in the current job and adds
 * all of its job ids.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TraverseJobTree</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>curJob</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><modifier>*</modifier></type><name>jobIds</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name> <modifier>*</modifier></type><name>jobIdPointer</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><operator>*</operator><name>jobIdPointer</name> <operator>=</operator> <name><name>curJob</name><operator>-&gt;</operator><name>jobId</name></name></expr>;</expr_stmt>

	<expr_stmt><expr><operator>*</operator><name>jobIds</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><operator>*</operator><name>jobIds</name></expr></argument>, <argument><expr><name>jobIdPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>childJob</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>childJob</argument>, <argument>curJob-&gt;dependentJobList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><call><name>TraverseJobTree</name><argument_list>(<argument><expr><name>childJob</name></expr></argument>, <argument><expr><name>jobIds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
