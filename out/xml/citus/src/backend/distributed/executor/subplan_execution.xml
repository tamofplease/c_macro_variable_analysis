<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/executor/subplan_execution.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * subplan_execution.c
 *
 * Functions for execution subplans prior to distributed table execution.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_result_pruning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_results.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/recursive_planning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/subplan_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datetime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SECOND_TO_MILLI_SECOND</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MICRO_TO_MILLI_SECOND</name></cpp:macro> <cpp:value>0.001</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int</name></type> <name>MaxIntermediateResult</name> <init>= <expr><literal type="number">1048576</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* maximum size in KB the intermediate result can grow to */</comment>
<comment type="block">/* when this is true, we enforce intermediate result size limit in all executors */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>SubPlanLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * ExecuteSubPlans executes a list of subplans from a distributed plan
 * by sequentially executing each plan from the top.
 */</comment>
<function><type><name>void</name></type>
<name>ExecuteSubPlans</name><parameter_list>(<parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>uint64</name></type> <name>planId</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>planId</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>subPlanList</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>subPlanList</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>subPlanList</name> <operator>==</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* no subplans to execute */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>intermediateResultsHash</name> <init>= <expr><call><name>MakeIntermediateResultHTAB</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>RecordSubplanExecutionsOnNodes</name><argument_list>(<argument><expr><name>intermediateResultsHash</name></expr></argument>, <argument><expr><name>distributedPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make sure that this transaction has a distributed transaction ID.
	 *
	 * Intermediate results of subplans will be stored in a directory that is
	 * derived from the distributed transaction ID.
	 */</comment>
	<expr_stmt><expr><call><name>UseCoordinatedTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>DistributedSubPlan</name> <modifier>*</modifier></type><name>subPlan</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>subPlan</argument>, <argument>subPlanList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>plannedStmt</name> <init>= <expr><name><name>subPlan</name><operator>-&gt;</operator><name>plan</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint32</name></type> <name>subPlanId</name> <init>= <expr><name><name>subPlan</name><operator>-&gt;</operator><name>subPlanId</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ParamListInfo</name></type> <name>params</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resultId</name> <init>= <expr><call><name>GenerateResultId</name><argument_list>(<argument><expr><name>planId</name></expr></argument>, <argument><expr><name>subPlanId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>remoteWorkerNodeList</name> <init>=
			<expr><call><name>FindAllWorkerNodesUsingSubplan</name><argument_list>(<argument><expr><name>intermediateResultsHash</name></expr></argument>, <argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
			<expr><call><name>SearchIntermediateResult</name><argument_list>(<argument><expr><name>intermediateResultsHash</name></expr></argument>, <argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>SubPlanLevel</name><operator>++</operator></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>copyDest</name> <init>=
			<expr><call><name>CreateRemoteFileDestReceiver</name><argument_list>(<argument><expr><name>resultId</name></expr></argument>, <argument><expr><name>estate</name></expr></argument>, <argument><expr><name>remoteWorkerNodeList</name></expr></argument>,
										 <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>TimestampTz</name></type> <name>startTimestamp</name> <init>= <expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ExecutePlanIntoDestReceiver</name><argument_list>(<argument><expr><name>plannedStmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>, <argument><expr><name>copyDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * EXPLAIN ANALYZE instrumentations. Calculating these are very light-weight,
		 * so always populate them regardless of EXPLAIN ANALYZE or not.
		 */</comment>
		<decl_stmt><decl><type><name>long</name></type> <name>durationSeconds</name> <init>= <expr><literal type="number">0.0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>durationMicrosecs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>TimestampDifference</name><argument_list>(<argument><expr><name>startTimestamp</name></expr></argument>, <argument><expr><call><name>GetCurrentTimestamp</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>durationSeconds</name></expr></argument>,
							<argument><expr><operator>&amp;</operator><name>durationMicrosecs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>subPlan</name><operator>-&gt;</operator><name>durationMillisecs</name></name> <operator>=</operator> <name>durationSeconds</name> <operator>*</operator> <name>SECOND_TO_MILLI_SECOND</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subPlan</name><operator>-&gt;</operator><name>durationMillisecs</name></name> <operator>+=</operator> <name>durationMicrosecs</name> <operator>*</operator> <name>MICRO_TO_MILLI_SECOND</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>subPlan</name><operator>-&gt;</operator><name>bytesSentPerWorker</name></name> <operator>=</operator> <call><name>RemoteFileDestReceiverBytesSent</name><argument_list>(<argument><expr><name>copyDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subPlan</name><operator>-&gt;</operator><name>remoteWorkerCount</name></name> <operator>=</operator> <call><name>list_length</name><argument_list>(<argument><expr><name>remoteWorkerNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>subPlan</name><operator>-&gt;</operator><name>writeLocalFile</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><name>SubPlanLevel</name><operator>--</operator></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>
</unit>
