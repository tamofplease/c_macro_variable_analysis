<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/executor/multi_server_executor.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * multi_server_executor.c
 *
 * Function definitions for distributed task execution for adaptive
 * executor.
 * routines are implemented backend-side logic; and they trigger executions
 * on the client-side via function hooks that they load.
 *
 * Copyright (c) Citus Data, Inc.
 *
 * $Id$
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/coordinator_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/subplan_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/tuple_destination.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>int</name></type> <name>RemoteTaskCheckInterval</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* per cycle sleep interval in millisecs */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>TaskExecutorType</name> <init>= <expr><name>MULTI_EXECUTOR_ADAPTIVE</name></expr></init></decl>;</decl_stmt> <comment type="block">/* distributed executor type */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>EnableRepartitionJoins</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * JobExecutorType selects the executor type for the given distributedPlan using the task
 * executor type config value. The function then checks if the given distributedPlan needs
 * more resources than those provided to it by other config values, and issues
 * warnings accordingly. If the selected executor type cannot execute the given
 * distributedPlan, the function errors out.
 */</comment>
<function><type><name>MultiExecutorType</name></type>
<name>JobExecutorType</name><parameter_list>(<parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Job</name> <modifier>*</modifier></type><name>job</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>workerJob</name></name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>insertSelectQuery</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We go through
		 * MULTI_EXECUTOR_NON_PUSHABLE_INSERT_SELECT because
		 * the executor already knows how to handle adaptive
		 * executor when necessary.
		 */</comment>
		<return>return <expr><name>MULTI_EXECUTOR_NON_PUSHABLE_INSERT_SELECT</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If we have repartition jobs with adaptive executor and repartition
	 * joins are not enabled, error out.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>dependentJobCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>dependentJobList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableRepartitionJoins</name> <operator>&amp;&amp;</operator> <name>dependentJobCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"the query contains a join that requires repartitioning"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Set citus.enable_repartition_joins to on to enable "</literal>
								<literal type="string">"repartitioning"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Debug distribution column value if possible. The distributed planner sometimes
	 * defers creating the tasks, so the task list might be NIL. Still, it sets the
	 * partitionKeyValue and we print it here.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>job</name><operator>-&gt;</operator><name>taskList</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>IsLoggableLevel</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Const</name> <modifier>*</modifier></type><name>partitionValueConst</name> <init>= <expr><name><name>job</name><operator>-&gt;</operator><name>partitionKeyValue</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>partitionValueConst</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>partitionValueConst</name><operator>-&gt;</operator><name>constisnull</name></name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Datum</name></type> <name>partitionColumnValue</name> <init>= <expr><name><name>partitionValueConst</name><operator>-&gt;</operator><name>constvalue</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>Oid</name></type> <name>partitionColumnType</name> <init>= <expr><name><name>partitionValueConst</name><operator>-&gt;</operator><name>consttype</name></name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>partitionColumnString</name> <init>= <expr><call><name>DatumToString</name><argument_list>(<argument><expr><name>partitionColumnValue</name></expr></argument>,
														<argument><expr><name>partitionColumnType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"query has a single distribution column value: "</literal>
									<literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>partitionColumnString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>MULTI_EXECUTOR_ADAPTIVE</name></expr>;</return>
</block_content>}</block></function>
</unit>
