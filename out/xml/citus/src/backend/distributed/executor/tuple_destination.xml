<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/executor/tuple_destination.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/subplan_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/tuple_destination.h"</cpp:file></cpp:include>


<comment type="block">/*
 * TupleStoreTupleDestination is internal representation of a TupleDestination
 * which forwards tuples to a tuple store.
 */</comment>
<typedef>typedef <type><struct>struct <name>TupleStoreTupleDestination</name>
<block>{
	<decl_stmt><decl><type><name>TupleDestination</name></type> <name>pub</name></decl>;</decl_stmt>

	<comment type="block">/* destination of tuples */</comment>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupleStore</name></decl>;</decl_stmt>

	<comment type="block">/* how does tuples look like? */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDesc</name></decl>;</decl_stmt>
}</block></struct></type> <name>TupleStoreTupleDestination</name>;</typedef>

<comment type="block">/*
 * TupleDestDestReceiver is internal representation of a DestReceiver which
 * forards tuples to a tuple destination.
 */</comment>
<typedef>typedef <type><struct>struct <name>TupleDestDestReceiver</name>
<block>{
	<decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>tupleDest</name></decl>;</decl_stmt>

	<comment type="block">/* parameters to pass to tupleDest-&gt;putTuple() */</comment>
	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>placementIndex</name></decl>;</decl_stmt>
}</block></struct></type> <name>TupleDestDestReceiver</name>;</typedef>


<comment type="block">/* forward declarations for local functions */</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TupleStoreTupleDestPutTuple</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>,
										<parameter><decl><type><name>int</name></type> <name>placementIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>,
										<parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>tupleLibpqSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>EnsureIntermediateSizeLimitNotExceeded</name><parameter_list>(<parameter><decl><type><name>TupleDestinationStats</name> <modifier>*</modifier></type>
												   <name>tupleDestinationStats</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleDesc</name></type> <name>TupleStoreTupleDestTupleDescForQuery</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type>
													  <name>queryNumber</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TupleDestNonePutTuple</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>,
								  <parameter><decl><type><name>int</name></type> <name>placementIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>,
								  <parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>tupleLibpqSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TupleDesc</name></type> <name>TupleDestNoneTupleDescForQuery</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TupleDestDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
										 <parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDesc</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>TupleDestDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
										 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TupleDestDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>TupleDestDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * CreateTupleStoreTupleDest creates a TupleDestination which forwards tuples to
 * a tupleStore.
 */</comment>
<function><type><name>TupleDestination</name> <modifier>*</modifier></type>
<name>CreateTupleStoreTupleDest</name><parameter_list>(<parameter><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupleStore</name></decl></parameter>, <parameter><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleStoreTupleDestination</name> <modifier>*</modifier></type><name>tupleStoreTupleDest</name> <init>= <expr><call><name>palloc0</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleStoreTupleDestination</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>tupleStoreTupleDest</name><operator>-&gt;</operator><name>tupleStore</name></name> <operator>=</operator> <name>tupleStore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tupleStoreTupleDest</name><operator>-&gt;</operator><name>tupleDesc</name></name> <operator>=</operator> <name>tupleDescriptor</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tupleStoreTupleDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>putTuple</name></name> <operator>=</operator> <name>TupleStoreTupleDestPutTuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tupleStoreTupleDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>tupleDescForQuery</name></name> <operator>=</operator>
		<name>TupleStoreTupleDestTupleDescForQuery</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>tupleDestination</name> <init>= <expr><operator>&amp;</operator><name><name>tupleStoreTupleDest</name><operator>-&gt;</operator><name>pub</name></name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tupleDestination</name><operator>-&gt;</operator><name>tupleDestinationStats</name></name> <operator>=</operator>
		<operator>(</operator><name>TupleDestinationStats</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleDestinationStats</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>TupleDestination</name> <operator>*</operator><operator>)</operator> <name>tupleStoreTupleDest</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TupleStoreTupleDestPutTuple implements TupleDestination-&gt;putTuple for
 * TupleStoreTupleDestination.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TupleStoreTupleDestPutTuple</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>,
							<parameter><decl><type><name>int</name></type> <name>placementIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>,
							<parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>tupleLibpqSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleStoreTupleDestination</name> <modifier>*</modifier></type><name>tupleDest</name> <init>= <expr><operator>(</operator><name>TupleStoreTupleDestination</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Remote execution sets tupleLibpqSize, however it is 0 for local execution. We prefer
	 * to use tupleLibpqSize for  the remote execution because that reflects the exact data
	 * transfer size over the network. For local execution, we rely on the size of the
	 * tuple.
	 */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>tupleSize</name> <init>= <expr><name>tupleLibpqSize</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>tupleSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>tupleSize</name> <operator>=</operator> <call><name>HeapTupleHeaderGetDatumLength</name><argument_list>(<argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Enfoce citus.max_intermediate_result_size for subPlans if
	 * the caller requested.
	 */</comment>
	<decl_stmt><decl><type><name>TupleDestinationStats</name> <modifier>*</modifier></type><name>tupleDestinationStats</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>tupleDestinationStats</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>SubPlanLevel</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tupleDestinationStats</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>tupleDestinationStats</name><operator>-&gt;</operator><name>totalIntermediateResultSize</name></name> <operator>+=</operator> <name>tupleSize</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>EnsureIntermediateSizeLimitNotExceeded</name><argument_list>(<argument><expr><name>tupleDestinationStats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* do the actual work */</comment>
	<expr_stmt><expr><call><name>tuplestore_puttuple</name><argument_list>(<argument><expr><name><name>tupleDest</name><operator>-&gt;</operator><name>tupleStore</name></name></expr></argument>, <argument><expr><name>heapTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we record tuples received over network */</comment>
	<expr_stmt><expr><name><name>task</name><operator>-&gt;</operator><name>totalReceivedTupleData</name></name> <operator>+=</operator> <name>tupleLibpqSize</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * EnsureIntermediateSizeLimitNotExceeded is a helper function for checking the current
 * state of the tupleDestinationStats and throws error if necessary.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>EnsureIntermediateSizeLimitNotExceeded</name><parameter_list>(<parameter><decl><type><name>TupleDestinationStats</name> <modifier>*</modifier></type><name>tupleDestinationStats</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tupleDestinationStats</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* unexpected, still prefer defensive approach */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We only care about subPlans. Also, if user disabled, no need to
	 * check  further.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>SubPlanLevel</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>MaxIntermediateResult</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> <name>maxIntermediateResultInBytes</name> <init>= <expr><name>MaxIntermediateResult</name> <operator>*</operator> <literal type="number">1024L</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>tupleDestinationStats</name><operator>-&gt;</operator><name>totalIntermediateResultSize</name></name> <operator>&lt;</operator> <name>maxIntermediateResultInBytes</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We have not reached the size limit that the user requested, so
		 * nothing to do for now.
		 */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"the intermediate result size exceeds "</literal>
						   <literal type="string">"citus.max_intermediate_result_size (currently %d kB)"</literal></expr></argument>,
						   <argument><expr><name>MaxIntermediateResult</name></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"Citus restricts the size of intermediate "</literal>
							  <literal type="string">"results of complex subqueries and CTEs to "</literal>
							  <literal type="string">"avoid accidentally pulling large result sets "</literal>
							  <literal type="string">"into once place."</literal></expr></argument>)</argument_list></call><operator>,</operator>
					<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"To run the current query, set "</literal>
							<literal type="string">"citus.max_intermediate_result_size to a higher"</literal>
							<literal type="string">" value or -1 to disable."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TupleStoreTupleDestTupleDescForQuery implements TupleDestination-&gt;TupleDescForQuery
 * for TupleStoreTupleDestination.
 */</comment>
<function><type><specifier>static</specifier> <name>TupleDesc</name></type>
<name>TupleStoreTupleDestTupleDescForQuery</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>queryNumber</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>TupleStoreTupleDestination</name> <modifier>*</modifier></type><name>tupleDest</name> <init>= <expr><operator>(</operator><name>TupleStoreTupleDestination</name> <operator>*</operator><operator>)</operator> <name>self</name></expr></init></decl>;</decl_stmt>

	<return>return <expr><name><name>tupleDest</name><operator>-&gt;</operator><name>tupleDesc</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CreateTupleDestNone creates a tuple destination which ignores the tuples.
 */</comment>
<function><type><name>TupleDestination</name> <modifier>*</modifier></type>
<name>CreateTupleDestNone</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>tupleDest</name> <init>= <expr><call><name>palloc0</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleDestination</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>tupleDest</name><operator>-&gt;</operator><name>putTuple</name></name> <operator>=</operator> <name>TupleDestNonePutTuple</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tupleDest</name><operator>-&gt;</operator><name>tupleDescForQuery</name></name> <operator>=</operator> <name>TupleDestNoneTupleDescForQuery</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>TupleDestination</name> <operator>*</operator><operator>)</operator> <name>tupleDest</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TupleDestNonePutTuple implements TupleDestination-&gt;putTuple for
 * no-op tuple destination.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TupleDestNonePutTuple</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>,
					  <parameter><decl><type><name>int</name></type> <name>placementIndex</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>,
					  <parameter><decl><type><name>HeapTuple</name></type> <name>heapTuple</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>tupleLibpqSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * TupleDestNoneTupleDescForQuery implements TupleDestination-&gt;TupleDescForQuery
 * for no-op tuple destination.
 */</comment>
<function><type><specifier>static</specifier> <name>TupleDesc</name></type>
<name>TupleDestNoneTupleDescForQuery</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>self</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>queryNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CreateTupleDestDestReceiver creates a dest receiver which forwards tuples
 * to a tuple destination.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreateTupleDestDestReceiver</name><parameter_list>(<parameter><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>tupleDest</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>placementIndex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDestDestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TupleDestDestReceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>TupleDestDestReceiverStartup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>TupleDestDestReceiverReceive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>TupleDestDestReceiverShutdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>TupleDestDestReceiverDestroy</name></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>tupleDest</name></name> <operator>=</operator> <name>tupleDest</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>task</name></name> <operator>=</operator> <name>task</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>destReceiver</name><operator>-&gt;</operator><name>placementIndex</name></name> <operator>=</operator> <name>placementIndex</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>destReceiver</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TupleDestDestReceiverStartup implements DestReceiver-&gt;rStartup for
 * TupleDestDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TupleDestDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
							 <parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDesc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * TupleDestDestReceiverReceive implements DestReceiver-&gt;receiveSlot for
 * TupleDestDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>TupleDestDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
							 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDestDestReceiver</name> <modifier>*</modifier></type><name>tupleDestReceiver</name> <init>= <expr><operator>(</operator><name>TupleDestDestReceiver</name> <operator>*</operator><operator>)</operator> <name>destReceiver</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleDestination</name> <modifier>*</modifier></type><name>tupleDest</name> <init>= <expr><name><name>tupleDestReceiver</name><operator>-&gt;</operator><name>tupleDest</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><name><name>tupleDestReceiver</name><operator>-&gt;</operator><name>task</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>placementIndex</name> <init>= <expr><name><name>tupleDestReceiver</name><operator>-&gt;</operator><name>placementIndex</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * DestReceiver doesn't support multiple result sets with different shapes.
	 */</comment>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>queryCount</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>queryNumber</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>heapTuple</name> <init>= <expr><call><name>ExecFetchSlotHeapTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> <name>tupleLibpqSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name><name>tupleDest</name><operator>-&gt;</operator><name>putTuple</name></name><argument_list>(<argument><expr><name>tupleDest</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>placementIndex</name></expr></argument>, <argument><expr><name>queryNumber</name></expr></argument>, <argument><expr><name>heapTuple</name></expr></argument>,
						<argument><expr><name>tupleLibpqSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TupleDestDestReceiverShutdown implements DestReceiver-&gt;rShutdown for
 * TupleDestDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TupleDestDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>


<comment type="block">/*
 * TupleDestDestReceiverDestroy implements DestReceiver-&gt;rDestroy for
 * TupleDestDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>TupleDestDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>destReceiver</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do */</comment>
</block_content>}</block></function>
</unit>
