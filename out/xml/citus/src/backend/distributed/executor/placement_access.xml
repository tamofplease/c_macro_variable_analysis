<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/executor/placement_access.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * citus_custom_scan.c
 *
 * Definitions of the functions used in generating the placement accesses
 * for distributed query execution.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/placement_access.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>BuildPlacementSelectList</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>BuildPlacementDDLList</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>BuildPlacementAccessList</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>,
									   <parameter><decl><type><name>ShardPlacementAccessType</name></type> <name>accessType</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * PlacementAccessListForTask returns a list of placement accesses for a given
 * task and task placement.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>PlacementAccessListForTask</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>taskPlacement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>placementAccessList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name> <init>= <expr><name><name>task</name><operator>-&gt;</operator><name>relationShardList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>addAnchorAccess</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardPlacementAccessType</name></type> <name>accessType</name> <init>= <expr><name>PLACEMENT_ACCESS_SELECT</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>taskType</name></name> <operator>==</operator> <name>MODIFY_TASK</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* DML command */</comment>
		<expr_stmt><expr><name>addAnchorAccess</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>accessType</name> <operator>=</operator> <name>PLACEMENT_ACCESS_DML</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name><name>task</name><operator>-&gt;</operator><name>taskType</name></name> <operator>==</operator> <name>DDL_TASK</name> <operator>||</operator> <name><name>task</name><operator>-&gt;</operator><name>taskType</name></name> <operator>==</operator> <name>VACUUM_ANALYZE_TASK</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* DDL command */</comment>
		<expr_stmt><expr><name>addAnchorAccess</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>accessType</name> <operator>=</operator> <name>PLACEMENT_ACCESS_DDL</name></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>relationShardList</name> <operator>==</operator> <name>NIL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* SELECT query that does not touch any shard placements */</comment>
		<expr_stmt><expr><name>addAnchorAccess</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>accessType</name> <operator>=</operator> <name>PLACEMENT_ACCESS_SELECT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>addAnchorAccess</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ShardPlacementAccess</name> <modifier>*</modifier></type><name>placementAccess</name> <init>=
			<expr><call><name>CreatePlacementAccess</name><argument_list>(<argument><expr><name>taskPlacement</name></expr></argument>, <argument><expr><name>accessType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>placementAccessList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>placementAccessList</name></expr></argument>, <argument><expr><name>placementAccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We've already added anchor shardId's placement access to the list. Now,
	 * add the other placements in the relationShardList.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>accessType</name> <operator>==</operator> <name>PLACEMENT_ACCESS_DDL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * All relations appearing inter-shard DDL commands should be marked
		 * with DDL access.
		 */</comment>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardAccessList</name> <init>=
			<expr><call><name>BuildPlacementDDLList</name><argument_list>(<argument><expr><name><name>taskPlacement</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>relationShardList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>placementAccessList</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>placementAccessList</name></expr></argument>, <argument><expr><name>relationShardAccessList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<comment type="block">/*
		 * In case of SELECTs or DML's, we add SELECT placement accesses to the
		 * elements in relationShardList. For SELECT queries, it is trivial, since
		 * the query is literally accesses the relationShardList in the same query.
		 *
		 * For DMLs, create placement accesses for placements that appear in a
		 * subselect.
		 */</comment>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardAccessList</name> <init>=
			<expr><call><name>BuildPlacementSelectList</name><argument_list>(<argument><expr><name><name>taskPlacement</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>, <argument><expr><name>relationShardList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>placementAccessList</name> <operator>=</operator> <call><name>list_concat</name><argument_list>(<argument><expr><name>placementAccessList</name></expr></argument>, <argument><expr><name>relationShardAccessList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>placementAccessList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * BuildPlacementSelectList builds a list of SELECT placement accesses
 * which can be used to call StartPlacementListConnection or
 * GetPlacementListConnection. If the node group does not have a placement
 * (e.g. in case of a broadcast join) then the shard is skipped.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>BuildPlacementSelectList</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>BuildPlacementAccessList</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>relationShardList</name></expr></argument>, <argument><expr><name>PLACEMENT_ACCESS_SELECT</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * BuildPlacementDDLList is a warpper around BuildPlacementAccessList() for DDL access.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>BuildPlacementDDLList</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>BuildPlacementAccessList</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>, <argument><expr><name>relationShardList</name></expr></argument>, <argument><expr><name>PLACEMENT_ACCESS_DDL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * BuildPlacementAccessList returns a list of placement accesses for the given
 * relationShardList and the access type.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>BuildPlacementAccessList</name><parameter_list>(<parameter><decl><type><name>int32</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>,
						 <parameter><decl><type><name>ShardPlacementAccessType</name></type> <name>accessType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>placementAccessList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>RelationShard</name> <modifier>*</modifier></type><name>relationShard</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>relationShard</argument>, <argument>relationShardList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>placement</name> <init>= <expr><call><name>ActiveShardPlacementOnGroup</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>,
																<argument><expr><name><name>relationShard</name><operator>-&gt;</operator><name>shardId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>placement</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>ShardPlacementAccess</name> <modifier>*</modifier></type><name>placementAccess</name> <init>= <expr><call><name>CreatePlacementAccess</name><argument_list>(<argument><expr><name>placement</name></expr></argument>,
																	  <argument><expr><name>accessType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>placementAccessList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>placementAccessList</name></expr></argument>, <argument><expr><name>placementAccess</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<return>return <expr><name>placementAccessList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CreatePlacementAccess returns a new ShardPlacementAccess for the given placement
 * and access type.
 */</comment>
<function><type><name>ShardPlacementAccess</name> <modifier>*</modifier></type>
<name>CreatePlacementAccess</name><parameter_list>(<parameter><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>placement</name></decl></parameter>, <parameter><decl><type><name>ShardPlacementAccessType</name></type> <name>accessType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ShardPlacementAccess</name> <modifier>*</modifier></type><name>placementAccess</name> <init>= <expr><operator>(</operator><name>ShardPlacementAccess</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(
		<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardPlacementAccess</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>placementAccess</name><operator>-&gt;</operator><name>placement</name></name> <operator>=</operator> <name>placement</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>placementAccess</name><operator>-&gt;</operator><name>accessType</name></name> <operator>=</operator> <name>accessType</name></expr>;</expr_stmt>

	<return>return <expr><name>placementAccess</name></expr>;</return>
</block_content>}</block></function>
</unit>
