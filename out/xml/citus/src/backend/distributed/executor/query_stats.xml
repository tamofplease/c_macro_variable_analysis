<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/executor/query_stats.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * query_stats.c
 *    Statement-level statistics for distributed queries.
 *    Code is mostly taken from postgres/contrib/pg_stat_statements
 *    and adapted to citus.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_version_constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/function_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/hash_helpers.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/query_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/tuplestore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/fd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STATS_DUMP_FILE</name></cpp:macro> <cpp:value>"pg_stat/citus_query_stats.stat"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATEMENTS_COLS</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATAMENTS_QUERY_ID</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATAMENTS_USER_ID</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATAMENTS_DB_ID</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATAMENTS_EXECUTOR_TYPE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATAMENTS_PARTITION_KEY</name></cpp:macro> <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CITUS_STAT_STATAMENTS_CALLS</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_DECREASE_FACTOR</name></cpp:macro> <cpp:value>(0.99)</cpp:value></cpp:define>    <comment type="block">/* decreased every CitusQueryStatsEntryDealloc */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STICKY_DECREASE_FACTOR</name></cpp:macro> <cpp:value>(0.50)</cpp:value></cpp:define>   <comment type="block">/* factor for sticky entries */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_DEALLOC_PERCENT</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>         <comment type="block">/* free this % of entries at once */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USAGE_INIT</name></cpp:macro> <cpp:value>(1.0)</cpp:value></cpp:define>                <comment type="block">/* including initial planning */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_KEY_LENGTH</name></cpp:macro> <cpp:value>NAMEDATALEN</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint32</name></type> <name>CITUS_QUERY_STATS_FILE_HEADER</name> <init>= <expr><literal type="number">0x0d756e0f</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* time interval in seconds for maintenance daemon to call CitusQueryStatsSynchronizeEntries */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>StatStatementsPurgeInterval</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* maximum number of entries in queryStats hash, controlled by GUC citus.stat_statements_max */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>StatStatementsMax</name> <init>= <expr><literal type="number">50000</literal></expr></init></decl>;</decl_stmt>

<comment type="block">/* tracking all or none, for citus_stat_statements, controlled by GUC citus.stat_statements_track */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>StatStatementsTrack</name> <init>= <expr><name>STAT_STATEMENTS_TRACK_NONE</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Hashtable key that defines the identity of a hashtable entry.  We use the
 * same hash as pg_stat_statements
 */</comment>
<typedef>typedef <type><struct>struct <name>QueryStatsHashKey</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>userid</name></decl>;</decl_stmt>                     <comment type="block">/* user OID */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>dbid</name></decl>;</decl_stmt>                       <comment type="block">/* database OID */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>queryid</name></decl>;</decl_stmt>                 <comment type="block">/* query identifier */</comment>
	<decl_stmt><decl><type><name>MultiExecutorType</name></type> <name>executorType</name></decl>;</decl_stmt> <comment type="block">/* executor type */</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>partitionKey</name><index>[<expr><name>MAX_KEY_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>QueryStatsHashKey</name>;</typedef>

<comment type="block">/*
 * Statistics per query and executor type
 */</comment>
<typedef>typedef <type><struct>struct <name>queryStatsEntry</name>
<block>{
	<decl_stmt><decl><type><name>QueryStatsHashKey</name></type> <name>key</name></decl>;</decl_stmt>   <comment type="block">/* hash key of entry - MUST BE FIRST */</comment>
	<decl_stmt><decl><type><name>int64</name></type> <name>calls</name></decl>;</decl_stmt>       <comment type="block">/* # of times executed */</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>usage</name></decl>;</decl_stmt>      <comment type="block">/* hashtable usage factor */</comment>
	<decl_stmt><decl><type><name>slock_t</name></type> <name>mutex</name></decl>;</decl_stmt>     <comment type="block">/* protects the counters only */</comment>
}</block></struct></type> <name>QueryStatsEntry</name>;</typedef>

<comment type="block">/*
 * Global shared state
 */</comment>
<typedef>typedef <type><struct>struct <name>QueryStatsSharedState</name>
<block>{
	<decl_stmt><decl><type><name>LWLockId</name></type> <name>lock</name></decl>;</decl_stmt>                      <comment type="block">/* protects hashtable search/modification */</comment>
	<decl_stmt><decl><type><name>double</name></type> <name>cur_median_usage</name></decl>;</decl_stmt>            <comment type="block">/* current median usage in hashtable */</comment>
}</block></struct></type> <name>QueryStatsSharedState</name>;</typedef>

<comment type="block">/* lookup table for existing pg_stat_statements entries */</comment>
<typedef>typedef <type><struct>struct <name>ExistingStatsHashKey</name>
<block>{
	<decl_stmt><decl><type><name>Oid</name></type> <name>userid</name></decl>;</decl_stmt>                     <comment type="block">/* user OID */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>dbid</name></decl>;</decl_stmt>                       <comment type="block">/* database OID */</comment>
	<decl_stmt><decl><type><name>uint64</name></type> <name>queryid</name></decl>;</decl_stmt>                 <comment type="block">/* query identifier */</comment>
}</block></struct></type> <name>ExistingStatsHashKey</name>;</typedef>

<comment type="block">/* saved hook address in case of unload */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* Links to shared memory state */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>QueryStatsSharedState</name> <modifier>*</modifier></type><name>queryStats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type><name>queryStatsHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*--- Functions --- */</comment>

<function_decl><type><name>Datum</name></type> <name>citus_query_stats_reset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>Datum</name></type> <name>citus_query_stats</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_stat_statements_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_query_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_executor_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>CitusExecutorName</name><parameter_list>(<parameter><decl><type><name>MultiExecutorType</name></type> <name>executorType</name></decl></parameter>)</parameter_list>;</function_decl>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusQueryStatsShmemStartup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusQueryStatsShmemShutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>QueryStatsEntry</name> <modifier>*</modifier></type> <name>CitusQueryStatsEntryAlloc</name><parameter_list>(<parameter><decl><type><name>QueryStatsHashKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sticky</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusQueryStatsEntryDealloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusQueryStatsEntryReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>CitusQuerysStatsHashFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>CitusQuerysStatsMatchFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type> <name>BuildExistingQueryIdHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>GetPGStatStatementsMax</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusQueryStatsRemoveExpiredEntries</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>existingQueryIdHash</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type>
<name>InitializeCitusQueryStats</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<comment type="block">/* on PG 15, we use shmem_request_hook_type */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <name>PG_VERSION_15</name></expr></cpp:if>

	<comment type="block">/* allocate shared memory */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>CitusQueryStatsSharedMemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>, <argument><expr><literal type="string">"requesting named LWLockTranch for %s"</literal></expr></argument>, <argument><expr><name>STATS_SHARED_MEM_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><name>STATS_SHARED_MEM_NAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<comment type="block">/* Install hook */</comment>
	<expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>CitusQueryStatsShmemStartup</name></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusQueryStatsShmemStartup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>header</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>num</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Create or attach to the shared memory state */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* global access lock */</comment>
	<expr_stmt><expr><name>queryStats</name> <operator>=</operator> <call><name>ShmemInitStruct</name><argument_list>(<argument><expr><name>STATS_SHARED_MEM_NAME</name></expr></argument>,
								 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsSharedState</name></expr></argument>)</argument_list></sizeof></expr></argument>,
								 <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* First time through ... */</comment>
		<expr_stmt><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <operator>&amp;</operator><operator>(</operator><call><name>GetNamedLWLockTranche</name><argument_list>(<argument><expr><name>STATS_SHARED_MEM_NAME</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>lock</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>info</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsHashKey</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>CitusQuerysStatsHashFn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>match</name></name> <operator>=</operator> <name>CitusQuerysStatsMatchFn</name></expr>;</expr_stmt>

	<comment type="block">/* allocate stats shared memory hash */</comment>
	<expr_stmt><expr><name>queryStatsHash</name> <operator>=</operator> <call><name>ShmemInitHash</name><argument_list>(<argument><expr><literal type="string">"citus_query_stats hash"</literal></expr></argument>,
								   <argument><expr><name>StatStatementsMax</name></expr></argument>, <argument><expr><name>StatStatementsMax</name></expr></argument>,
								   <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,
								   <argument><expr><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_COMPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>on_shmem_exit</name><argument_list>(<argument><expr><name>CitusQueryStatsShmemShutdown</name></expr></argument>, <argument><expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Done if some other process already completed our initialization.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Load stat file, don't care about locking */</comment>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>AllocateFile</name><argument_list>(<argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>, <argument><expr><name>PG_BINARY_R</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>errno</name> <operator>==</operator> <name>ENOENT</name></expr>)</condition>
		<block>{<block_content>
			<return>return;</return>         <comment type="block">/* ignore not-found error */</comment>
		</block_content>}</block></if></if_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* check is header is valid */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal> <operator>||</operator>
		<name>header</name> <operator>!=</operator> <name>CITUS_QUERY_STATS_FILE_HEADER</name></expr>)</condition>
	<block>{<block_content>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* get number of entries */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>QueryStatsEntry</name></type> <name>temp</name></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>temp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<goto>goto <name>error</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Skip loading "sticky" entries */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>temp</name><operator>.</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>CitusQueryStatsEntryAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>temp</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* copy in the actual stats */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>calls</name></name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>calls</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>usage</name></name> <operator>=</operator> <name><name>temp</name><operator>.</operator><name>usage</name></name></expr>;</expr_stmt>

		<comment type="block">/* don't initialize spinlock, already done */</comment>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Remove the file so it's not included in backups/replicas, etc. A new file will be
	 * written on next shutdown.
	 */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return;</return>

<label><name>error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read citus_query_stats file \"%s\": %m"</literal></expr></argument>,
					<argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* delete bogus file, don't care of errors in this case */</comment>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsShmemShutdown is a shmem_shutdown hook,
 * it dumps statistics into file.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusQueryStatsShmemShutdown</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<comment type="block">/* Don't try to dump during a crash. */</comment>
	<if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>queryStats</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>AllocateFile</name><argument_list>(<argument><expr><name>CITUS_STATS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>, <argument><expr><name>PG_BINARY_W</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>file</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>CITUS_QUERY_STATS_FILE_HEADER</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>num_entries</name> <init>= <expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>num_entries</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* note: we assume hash_seq_term won't change errno */</comment>
			<expr_stmt><expr><call><name>hash_seq_term</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>error</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<if_stmt><if>if <condition>(<expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>file</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
		<goto>goto <name>error</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Rename file inplace
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>CITUS_STATS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>, <argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not rename citus_query_stats file \"%s\": %m"</literal></expr></argument>,
						<argument><expr><name>CITUS_STATS_DUMP_FILE</name> <literal type="string">".tmp"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return;</return>

<label><name>error</name>:</label>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>LOG</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not read citus_query_stats file \"%s\": %m"</literal></expr></argument>,
					<argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>file</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>FreeFile</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>CITUS_STATS_DUMP_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsSharedMemSize calculates and returns shared memory size
 * required to keep query statistics.
 */</comment>
<function><type><name>Size</name></type>
<name>CitusQueryStatsSharedMemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>StatStatementsMax</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><call><name>MAXALIGN</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsSharedState</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>hash_estimate_size</name><argument_list>(<argument><expr><name>StatStatementsMax</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsExecutorsEntry is the function to update statistics
 * for a given query id.
 */</comment>
<function><type><name>void</name></type>
<name>CitusQueryStatsExecutorsEntry</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>queryId</name></decl></parameter>, <parameter><decl><type><name>MultiExecutorType</name></type> <name>executorType</name></decl></parameter>,
							  <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>partitionKey</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>QueryStatsHashKey</name></type> <name>key</name></decl>;</decl_stmt>

	<comment type="block">/* Safety check... */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>queryStats</name> <operator>||</operator> <operator>!</operator><name>queryStatsHash</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* early return if tracking is disabled */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>StatStatementsTrack</name></expr>)</condition>
	<block>{<block_content>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Set up key for hashtable search */</comment>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <call><name>GetUserId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <name>MyDatabaseId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>queryid</name></name> <operator>=</operator> <name>queryId</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>key</name><operator>.</operator><name>executorType</name></name> <operator>=</operator> <name>executorType</name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>partitionKey</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>partitionKey</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>partitionKey</name></name></expr></argument>, <argument><expr><name>partitionKey</name></expr></argument>, <argument><expr><name>MAX_KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Lookup the hash table entry with shared lock. */</comment>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>QueryStatsEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>,
															 <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Create new entry, if not present */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Need exclusive lock to make a new hashtable entry - promote */</comment>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* OK to create a new hashtable entry */</comment>
		<expr_stmt><expr><name>entry</name> <operator>=</operator> <call><name>CitusQueryStatsEntryAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Grab the spinlock while updating the counters (see comment about
	 * locking rules at the head of the pg_stat_statements file)
	 */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>QueryStatsEntry</name> <modifier>*</modifier></type><name>e</name> <init>= <expr><operator>(</operator><specifier>volatile</specifier> <name>QueryStatsEntry</name> <operator>*</operator><operator>)</operator> <name>entry</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* "Unstick" entry if it was previously sticky */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>e</name><operator>-&gt;</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>usage</name></name> <operator>=</operator> <name>USAGE_INIT</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>e</name><operator>-&gt;</operator><name>calls</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>e</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Allocate a new hashtable entry.
 * caller must hold an exclusive lock on queryStats-&gt;lock
 */</comment>
<function><type><specifier>static</specifier> <name>QueryStatsEntry</name> <modifier>*</modifier></type>
<name>CitusQueryStatsEntryAlloc</name><parameter_list>(<parameter><decl><type><name>QueryStatsHashKey</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>sticky</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>StatStatementsMaxLong</name> <init>= <expr><name>StatStatementsMax</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Make space if needed */</comment>
	<while>while <condition>(<expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>StatStatementsMaxLong</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CitusQueryStatsEntryDealloc</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* Find or create an entry with desired hash code */</comment>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><operator>(</operator><name>QueryStatsEntry</name> <operator>*</operator><operator>)</operator> <call><name>hash_search</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>, <argument><expr><name>key</name></expr></argument>,
															 <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* New entry, initialize it */</comment>

		<comment type="block">/* set the appropriate initial usage count */</comment>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>usage</name></name> <operator>=</operator> <ternary><condition><expr><name>sticky</name></expr> ?</condition><then> <expr><name><name>queryStats</name><operator>-&gt;</operator><name>cur_median_usage</name></name></expr> </then><else>: <expr><name>USAGE_INIT</name></expr></else></ternary></expr>;</expr_stmt>

		<comment type="block">/* re-initialize the mutex each time ... we assume no one using it */</comment>
		<expr_stmt><expr><call><name>SpinLockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>calls</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>usage</name></name> <operator>=</operator> <operator>(</operator><literal type="number">0.0</literal><operator>)</operator></expr>;</expr_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * entry_cmp is qsort comparator for sorting into increasing usage order
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>entry_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>double</name></type> <name>l_usage</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>QueryStatsEntry</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>lhs</name><operator>)</operator><operator>-&gt;</operator><name>usage</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>r_usage</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name>QueryStatsEntry</name> <operator>*</operator><specifier>const</specifier> <operator>*</operator><operator>)</operator> <name>rhs</name><operator>)</operator><operator>-&gt;</operator><name>usage</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>l_usage</name> <operator>&lt;</operator> <name>r_usage</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>l_usage</name> <operator>&gt;</operator> <name>r_usage</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><operator>+</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsEntryDealloc deallocates least used entries.
 * Caller must hold an exclusive lock on queryStats-&gt;lock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusQueryStatsEntryDealloc</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Sort entries by usage and deallocate USAGE_DEALLOC_PERCENT of them.
	 * While we're scanning the table, apply the decay factor to the usage
	 * values.
	 */</comment>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier><modifier>*</modifier></type><name>entries</name> <init>= <expr><call><name>palloc</name><argument_list>(<argument><expr><call><name>hash_get_num_entries</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call> <operator>*</operator>
									   <sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entries</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>entry</name></expr>;</expr_stmt>

		<comment type="block">/* "Sticky" entries get a different usage decay rate. */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>usage</name></name> <operator>*=</operator> <name>STICKY_DECREASE_FACTOR</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>usage</name></name> <operator>*=</operator> <name>USAGE_DECREASE_FACTOR</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>SafeQsort</name><argument_list>(<argument><expr><name>entries</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>QueryStatsEntry</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>entry_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Record the (approximate) median usage */</comment>
		<expr_stmt><expr><name><name>queryStats</name><operator>-&gt;</operator><name>cur_median_usage</name></name> <operator>=</operator> <name><name>entries</name><index>[<expr><name>i</name> <operator>/</operator> <literal type="number">2</literal></expr>]</index></name><operator>-&gt;</operator><name>usage</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>nvictims</name> <init>= <expr><call><name>Max</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><name>i</name> <operator>*</operator> <name>USAGE_DEALLOC_PERCENT</name> <operator>/</operator> <literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>nvictims</name> <operator>=</operator> <call><name>Min</name><argument_list>(<argument><expr><name>nvictims</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nvictims</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entries</name><index>[<expr><name>i</name></expr>]</index></name><operator>-&gt;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>entries</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsEntryReset resets statistics.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusQueryStatsEntryReset</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQuerysStatsHashFn calculates and returns hash value for a key
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>CitusQuerysStatsHashFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>QueryStatsHashKey</name> <modifier>*</modifier></type><name>k</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>QueryStatsHashKey</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>k</name><operator>-&gt;</operator><name>partitionKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>userid</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>queryid</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>executorType</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>partitionKey</name></name><operator>)</operator></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(
							<argument><expr><name><name>k</name><operator>-&gt;</operator><name>partitionKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>userid</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>dbid</name></name></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_any</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><operator>(</operator><name><name>k</name><operator>-&gt;</operator><name>queryid</name></name><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>^</operator>
			   <call><name>hash_uint32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name><name>k</name><operator>-&gt;</operator><name>executorType</name></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQuerysStatsMatchFn compares two keys - zero means match.
 * See definition of HashCompareFunc in hsearch.h for more info.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>CitusQuerysStatsMatchFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key2</name></decl></parameter>, <parameter><decl><type><name>Size</name></type> <name>keysize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>QueryStatsHashKey</name> <modifier>*</modifier></type><name>k1</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>QueryStatsHashKey</name> <operator>*</operator><operator>)</operator> <name>key1</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>QueryStatsHashKey</name> <modifier>*</modifier></type><name>k2</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>QueryStatsHashKey</name> <operator>*</operator><operator>)</operator> <name>key2</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>k1</name><operator>-&gt;</operator><name>userid</name></name> <operator>==</operator> <name><name>k2</name><operator>-&gt;</operator><name>userid</name></name> <operator>&amp;&amp;</operator>
		<name><name>k1</name><operator>-&gt;</operator><name>dbid</name></name> <operator>==</operator> <name><name>k2</name><operator>-&gt;</operator><name>dbid</name></name> <operator>&amp;&amp;</operator>
		<name><name>k1</name><operator>-&gt;</operator><name>queryid</name></name> <operator>==</operator> <name><name>k2</name><operator>-&gt;</operator><name>queryid</name></name> <operator>&amp;&amp;</operator>
		<name><name>k1</name><operator>-&gt;</operator><name>executorType</name></name> <operator>==</operator> <name><name>k2</name><operator>-&gt;</operator><name>executorType</name></name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Reset statistics.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_stat_statements_reset</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CitusQueryStatsEntryReset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_query_stats returns query stats kept in memory.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_query_stats</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupdesc</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>currentUserId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>canSeeStats</name> <init>= <expr><call><name>superuser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>queryStats</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"citus_query_stats: shared memory not initialized"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_member_of_role</name><argument_list>(<argument><expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>ROLE_PG_READ_ALL_STATS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>canSeeStats</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupstore</name> <init>= <expr><call><name>SetupTuplestore</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tupdesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


	<comment type="block">/* exclusive lock on queryStats-&gt;lock is acquired and released inside the function */</comment>
	<expr_stmt><expr><call><name>CitusQueryStatsSynchronizeEntries</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_SHARED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><name>CITUS_STAT_STATEMENTS_COLS</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><name>CITUS_STAT_STATEMENTS_COLS</name></expr>]</index></name></decl>;</decl_stmt>

		<comment type="block">/* following vars are to keep data for processing after spinlock release */</comment>
		<decl_stmt><decl><type><name>uint64</name></type> <name>queryid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>userid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Oid</name></type> <name>dbid</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MultiExecutorType</name></type> <name>executorType</name> <init>= <expr><name>MULTI_EXECUTOR_INVALID_FIRST</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>partitionKey</name><index>[<expr><name>MAX_KEY_LENGTH</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int64</name></type> <name>calls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>partitionKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_KEY_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Skip entry if unexecuted (ie, it's a pending "sticky" entry) or
		 * the user does not have permission to view it.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>calls</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><operator>(</operator><name>currentUserId</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>userid</name></name> <operator>||</operator> <name>canSeeStats</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>queryid</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>queryid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>userid</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>userid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbid</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>dbid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name>executorType</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>executorType</name></name></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>partitionKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>memcpy_s</name><argument_list>(<argument><expr><name>partitionKey</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>partitionKey</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>partitionKey</name></name></expr></argument>,
					 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>partitionKey</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>calls</name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>calls</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>SpinLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><name>CITUS_STAT_STATAMENTS_QUERY_ID</name></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>queryid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>CITUS_STAT_STATAMENTS_USER_ID</name></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>userid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>CITUS_STAT_STATAMENTS_DB_ID</name></expr>]</index></name> <operator>=</operator> <call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><name>dbid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><name>CITUS_STAT_STATAMENTS_EXECUTOR_TYPE</name></expr>]</index></name> <operator>=</operator> <call><name>UInt32GetDatum</name><argument_list>(
			<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <name>executorType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>partitionKey</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name><name>values</name><index>[<expr><name>CITUS_STAT_STATAMENTS_PARTITION_KEY</name></expr>]</index></name> <operator>=</operator> <call><name>CStringGetTextDatum</name><argument_list>(
				<argument><expr><name>partitionKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><name><name>nulls</name><index>[<expr><name>CITUS_STAT_STATAMENTS_PARTITION_KEY</name></expr>]</index></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><name>CITUS_STAT_STATAMENTS_CALLS</name></expr>]</index></name> <operator>=</operator> <call><name>Int64GetDatumFast</name><argument_list>(<argument><expr><name>calls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>, <argument><expr><name>tupdesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* clean up and return the tuplestore */</comment>
	<expr_stmt><expr><call><name>tuplestore_donestoring</name><argument_list>(<argument><expr><name>tupstore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsSynchronizeEntries removes all entries in queryStats hash
 * that does not have matching queryId in pg_stat_statements.
 *
 * A function called inside (CitusQueryStatsRemoveExpiredEntries) acquires
 * an exclusive lock on queryStats-&gt;lock.
 */</comment>
<function><type><name>void</name></type>
<name>CitusQueryStatsSynchronizeEntries</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>existingQueryIdHash</name> <init>= <expr><call><name>BuildExistingQueryIdHash</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>existingQueryIdHash</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CitusQueryStatsRemoveExpiredEntries</name><argument_list>(<argument><expr><name>existingQueryIdHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>hash_destroy</name><argument_list>(<argument><expr><name>existingQueryIdHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * BuildExistingQueryIdHash goes over entries in pg_stat_statements and prepare
 * a hash table of queryId's. The function returns null if
 * public.pg_stat_statements(bool) function is not available. Returned hash
 * table is allocated on the CurrentMemoryContext, and caller is responsible
 * for deallocation.
 */</comment>
<function><type><specifier>static</specifier> <name>HTAB</name> <modifier>*</modifier></type>
<name>BuildExistingQueryIdHash</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>userIdAttributeNumber</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>dbIdAttributeNumber</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_14</name></expr></cpp:if>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>queryIdAttributeNumber</name> <init>= <expr><literal type="number">4</literal></expr></init></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>queryIdAttributeNumber</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl_stmt><decl><type><name>Datum</name></type> <name>commandTypeDatum</name> <init>= <expr><operator>(</operator><name>Datum</name><operator>)</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>missingOK</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>pgStatStatementsOid</name> <init>= <expr><call><name>FunctionOidExtended</name><argument_list>(<argument><expr><literal type="string">"public"</literal></expr></argument>, <argument><expr><literal type="string">"pg_stat_statements"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
												  <argument><expr><name>missingOK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>pgStatStatementsOid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>


	<comment type="block">/* fetch pg_stat_statements.max, it is expected to be available, if not bail out */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pgStatStatementsMax</name> <init>= <expr><call><name>GetPGStatStatementsMax</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>pgStatStatementsMax</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Cannot access pg_stat_statements.max"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>fmgrPGStatStatements</name> <init>= <expr><operator>(</operator><name>FmgrInfo</name> <operator>*</operator><operator>)</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>commandTypeDatum</name> <operator>=</operator> <call><name>BoolGetDatum</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>fmgr_info</name><argument_list>(<argument><expr><name>pgStatStatementsOid</name></expr></argument>, <argument><expr><name>fmgrPGStatStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>statStatementsReturnSet</name> <init>= <expr><call><name>FunctionCallGetTupleStore1</name><argument_list>(
		<argument><expr><name><name>fmgrPGStatStatements</name><operator>-&gt;</operator><name>fn_addr</name></name></expr></argument>,
		<argument><expr><name>pgStatStatementsOid</name></expr></argument>,
		<argument><expr><name>commandTypeDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>tupleTableSlot</name> <init>= <expr><call><name>MakeSingleTupleTableSlot</name><argument_list>(
		<argument><expr><name><name>statStatementsReturnSet</name><operator>-&gt;</operator><name>setDesc</name></name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>TTSOpsMinimalTuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Allocate more hash slots (twice as much) than necessary to minimize
	 * collisions.
	 */</comment>
	<expr_stmt><expr><call><name>assert_valid_hash_key3</name><argument_list>(<argument><expr><name>ExistingStatsHashKey</name></expr></argument>, <argument><expr><name>userid</name></expr></argument>, <argument><expr><name>dbid</name></expr></argument>, <argument><expr><name>queryid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>queryIdHashTable</name> <init>= <expr><call><name>CreateSimpleHashSetWithNameAndSize</name><argument_list>(
		<argument><expr><name>ExistingStatsHashKey</name></expr></argument>,
		<argument><expr><literal type="string">"pg_stats_statements queryId hash"</literal></expr></argument>,
		<argument><expr><name>pgStatStatementsMax</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* iterate over tuples in tuple store, and add queryIds to hash table */</comment>
	<while>while <condition>(<expr><name>true</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>isNull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>bool</name></type> <name>tuplePresent</name> <init>= <expr><call><name>tuplestore_gettupleslot</name><argument_list>(<argument><expr><name><name>statStatementsReturnSet</name><operator>-&gt;</operator><name>setResult</name></name></expr></argument>,
													<argument><expr><name>true</name></expr></argument>,
													<argument><expr><name>false</name></expr></argument>,
													<argument><expr><name>tupleTableSlot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>tuplePresent</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>Datum</name></type> <name>userIdDatum</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>, <argument><expr><name>userIdAttributeNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>dbIdDatum</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>, <argument><expr><name>dbIdAttributeNumber</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>queryIdDatum</name> <init>= <expr><call><name>slot_getattr</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>, <argument><expr><name>queryIdAttributeNumber</name></expr></argument>,
										  <argument><expr><operator>&amp;</operator><name>isNull</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


		<comment type="block">/*
		 * queryId may be returned as NULL when current user is not authorized to see other
		 * users' stats.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isNull</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ExistingStatsHashKey</name></type> <name>key</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>userIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>dbIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>key</name><operator>.</operator><name>queryid</name></name> <operator>=</operator> <call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>queryIdDatum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>queryIdHashTable</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>ExecClearTuple</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>ExecDropSingleTupleTableSlot</name><argument_list>(<argument><expr><name>tupleTableSlot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tuplestore_end</name><argument_list>(<argument><expr><name><name>statStatementsReturnSet</name><operator>-&gt;</operator><name>setResult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>fmgrPGStatStatements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>queryIdHashTable</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetPGStatStatementsMax returns GUC value pg_stat_statements.max. The
 * function returns 0 if for some reason it can not access
 * pg_stat_statements.max value.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>GetPGStatStatementsMax</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><literal type="string">"pg_stat_statements.max"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>maxValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pgssMax</name> <init>= <expr><call><name>GetConfigOption</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Retrieving pg_stat_statements.max can fail if the extension is loaded
	 * after citus in shared_preload_libraries, or not at all.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>pgssMax</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>maxValue</name> <operator>=</operator> <call><name>pg_strtoint32</name><argument_list>(<argument><expr><name>pgssMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>maxValue</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CitusQueryStatsRemoveExpiredEntries iterates over queryStats hash entries
 * and removes entries with keys that do not exists in the provided hash of
 * queryIds.
 *
 * Acquires and releases exclusive lock on queryStats-&gt;lock.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusQueryStatsRemoveExpiredEntries</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>existingQueryIdHash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASH_SEQ_STATUS</name></type> <name>hash_seq</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QueryStatsEntry</name> <modifier>*</modifier></type><name>entry</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>removedCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>canSeeStats</name> <init>= <expr><call><name>superuser</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>currentUserId</name> <init>= <expr><call><name>GetUserId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>is_member_of_role</name><argument_list>(<argument><expr><name>currentUserId</name></expr></argument>, <argument><expr><name>ROLE_PG_READ_ALL_STATS</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>canSeeStats</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>hash_seq_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>, <argument><expr><name>queryStatsHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>entry</name> <operator>=</operator> <call><name>hash_seq_search</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hash_seq</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ExistingStatsHashKey</name></type> <name>existingStatsKey</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * pg_stat_statements returns NULL in the queryId field for queries
		 * belonging to other users. Those queries are therefore not reflected
		 * in the existingQueryIdHash, but that does not mean that we should
		 * remove them as they are relevant to other users.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>currentUserId</name> <operator>==</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>userid</name></name> <operator>||</operator> <name>canSeeStats</name><operator>)</operator></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name><name>existingStatsKey</name><operator>.</operator><name>userid</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>userid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>existingStatsKey</name><operator>.</operator><name>dbid</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>dbid</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>existingStatsKey</name><operator>.</operator><name>queryid</name></name> <operator>=</operator> <name><name>entry</name><operator>-&gt;</operator><name>key</name><operator>.</operator><name>queryid</name></name></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>existingQueryIdHash</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>existingStatsKey</name></expr></argument>, <argument><expr><name>HASH_FIND</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>hash_search</name><argument_list>(<argument><expr><name>queryStatsHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>HASH_REMOVE</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>removedCount</name><operator>++</operator></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name><name>queryStats</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>removedCount</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG2</name></expr></argument>, <argument><expr><literal type="string">"citus_stat_statements removed %d expired entries"</literal></expr></argument>, <argument><expr><name>removedCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_executor_name is a UDF that returns the name of the executor
 * given the internal enum value.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_executor_name</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiExecutorType</name></type> <name>executorType</name> <init>= <expr><call><name>PG_GETARG_UINT32</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>executorName</name> <init>= <expr><call><name>CitusExecutorName</name><argument_list>(<argument><expr><name>executorType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_TEXT_P</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>executorName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusExecutorName returns the name of the executor given the internal
 * enum value.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>CitusExecutorName</name><parameter_list>(<parameter><decl><type><name>MultiExecutorType</name></type> <name>executorType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<switch>switch <condition>(<expr><name>executorType</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>MULTI_EXECUTOR_ADAPTIVE</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><literal type="string">"adaptive"</literal></expr>;</return>
		</block_content>}</block>

		<case>case <expr><name>MULTI_EXECUTOR_NON_PUSHABLE_INSERT_SELECT</name></expr>:</case>
		<block>{<block_content>
			<return>return <expr><literal type="string">"insert-select"</literal></expr>;</return>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<return>return <expr><literal type="string">"unknown"</literal></expr>;</return>
		</block_content>}</block>
	</block_content>}</block></switch>
</block_content>}</block></function>
</unit>
