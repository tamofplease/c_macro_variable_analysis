<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/executor/partitioned_intermediate_results.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * partition_intermediate_results.c
 *   Functions for writing partitioned intermediate results.
 *
 * Copyright (c), Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/nbtree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_results.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_dist_shard.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/tuplestore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/array_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/function.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/makefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/primnodes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/pquery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>


<comment type="block">/*
 * PartitionedResultDestReceiver is used for streaming tuples into a set of
 * partitioned result files.
 */</comment>
<typedef>typedef <type><struct>struct <name>PartitionedResultDestReceiver</name>
<block>{
	<comment type="block">/* public DestReceiver interface */</comment>
	<decl_stmt><decl><type><name>DestReceiver</name></type> <name>pub</name></decl>;</decl_stmt>

	<comment type="block">/* on lazy startup we only startup the DestReceiver once they receive a tuple */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>lazyStartup</name></decl>;</decl_stmt>

	<comment type="block">/*
	 * Stores the arguments passed to the PartidionedResultDestReceiver's rStarup
	 * function. These arguments are reused when lazyStartup has been set to true.
	 * On the processing of a first tuple for a partitionDestReceiver since rStartup it
	 * will pass the arguments here to the rStartup function of partitionDestReceiver to
	 * prepare it for receiving tuples.
	 *
	 * Even though not used without lazyStartup we just always populate these with the
	 * last invoked arguments for our rStartup.
	 */</comment>
	<struct>struct
	<block>{
		<comment type="block">/*
		 * operation as passed to rStartup, mostly the CmdType of the command being
		 * streamed into this DestReceiver
		 */</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>operation</name></decl>;</decl_stmt>

		<comment type="block">/*
		 * TupleDesc describing the layout of the tuples being streamed into the
		 * DestReceiver.
		 */</comment>
		<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name></decl>;</decl_stmt>
	}</block> <decl><name>startupArguments</name></decl>;</struct>

	<comment type="block">/* which column of streamed tuples to use as partition column */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>partitionColumnIndex</name></decl>;</decl_stmt>

	<comment type="block">/* The number of partitions being partitioned into */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>partitionCount</name></decl>;</decl_stmt>

	<comment type="block">/* used for deciding which partition a shard belongs to. */</comment>
	<decl_stmt><decl><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type><name>shardSearchInfo</name></decl>;</decl_stmt>

	<comment type="block">/* Tuples matching shardSearchInfo[i] are sent to partitionDestReceivers[i]. */</comment>
	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type><name>partitionDestReceivers</name></decl>;</decl_stmt>

	<comment type="block">/* keeping track of which partitionDestReceivers have been started */</comment>
	<decl_stmt><decl><type><name>Bitmapset</name> <modifier>*</modifier></type><name>startedDestReceivers</name></decl>;</decl_stmt>

	<comment type="block">/* whether NULL partition column values are allowed */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>allowNullPartitionColumnValues</name></decl>;</decl_stmt>
}</block></struct></type> <name>PartitionedResultDestReceiver</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>Portal</name></type> <name>StartPortalForQueryExecution</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PartitionedResultDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
												 <parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDescriptor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>PartitionedResultDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
												 <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PartitionedResultDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>PartitionedResultDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>copyDest</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* exports for SQL callable functions */</comment>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>worker_partition_query_result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/*
 * worker_partition_query_result executes a query and writes the results into a
 * set of local files according to the partition scheme and the partition column.
 */</comment>
<function><type><name>Datum</name></type>
<name>worker_partition_query_result</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ReturnSetInfo</name> <modifier>*</modifier></type><name>resultInfo</name> <init>= <expr><operator>(</operator><name>ReturnSetInfo</name> <operator>*</operator><operator>)</operator> <name><name>fcinfo</name><operator>-&gt;</operator><name>resultinfo</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>resultIdPrefixText</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resultIdPrefixString</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>resultIdPrefixText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* verify that resultIdPrefix doesn't contain invalid characters */</comment>
	<expr_stmt><expr><call><name>QueryResultFileName</name><argument_list>(<argument><expr><name>resultIdPrefixString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>queryText</name> <init>= <expr><call><name>PG_GETARG_TEXT_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>queryString</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>queryText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>partitionColumnIndex</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>partitionMethodOid</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name>partitionMethod</name> <init>= <expr><call><name>LookupDistributionMethod</name><argument_list>(<argument><expr><name>partitionMethodOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>partitionMethod</name> <operator>!=</operator> <name>DISTRIBUTE_BY_HASH</name> <operator>&amp;&amp;</operator> <name>partitionMethod</name> <operator>!=</operator> <name>DISTRIBUTE_BY_RANGE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"only hash and range partitiong schemes are supported"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>minValuesArray</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>minValuesCount</name> <init>= <expr><call><name>ArrayObjectCount</name><argument_list>(<argument><expr><name>minValuesArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>maxValuesArray</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxValuesCount</name> <init>= <expr><call><name>ArrayObjectCount</name><argument_list>(<argument><expr><name>maxValuesArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>binaryCopy</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>allowNullPartitionColumnValues</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>generateEmptyResults</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsMultiStatementTransaction</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"worker_partition_query_result can only be used in a "</literal>
							   <literal type="string">"transaction block"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Make sure that this transaction has a distributed transaction ID.
	 *
	 * Intermediate results will be stored in a directory that is derived
	 * from the distributed transaction ID.
	 */</comment>
	<expr_stmt><expr><call><name>EnsureDistributedTransactionId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>CreateIntermediateResultsDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>minValuesCount</name> <operator>!=</operator> <name>maxValuesCount</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>,
				<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
				 <call><name>errmsg</name><argument_list>(
					 <argument><expr><literal type="string">"min values and max values must have the same number of elements"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>partitionCount</name> <init>= <expr><name>minValuesCount</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>partitionCount</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"number of partitions cannot be 0"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* start execution early in order to extract the tuple descriptor */</comment>
	<decl_stmt><decl><type><name>Portal</name></type> <name>portal</name> <init>= <expr><call><name>StartPortalForQueryExecution</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* extract the partition column */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>tupleDescriptor</name> <init>= <expr><name><name>portal</name><operator>-&gt;</operator><name>tupDesc</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>tupleDescriptor</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"query must generate a set of rows"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>partitionColumnIndex</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>partitionColumnIndex</name> <operator>&gt;=</operator> <name><name>tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"partition column index must be between 0 and %d"</literal></expr></argument>,
							   <argument><expr><name><name>tupleDescriptor</name><operator>-&gt;</operator><name>natts</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>FormData_pg_attribute</name> <modifier>*</modifier></type><name>partitionColumnAttr</name> <init>= <expr><call><name>TupleDescAttr</name><argument_list>(<argument><expr><name>tupleDescriptor</name></expr></argument>,
															   <argument><expr><name>partitionColumnIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>partitionColumn</name> <init>= <expr><call><name>makeVar</name><argument_list>(<argument><expr><name>partitionColumnIndex</name></expr></argument>, <argument><expr><name>partitionColumnIndex</name></expr></argument>,
								   <argument><expr><name><name>partitionColumnAttr</name><operator>-&gt;</operator><name>atttypid</name></name></expr></argument>,
								   <argument><expr><name><name>partitionColumnAttr</name><operator>-&gt;</operator><name>atttypmod</name></name></expr></argument>,
								   <argument><expr><name><name>partitionColumnAttr</name><operator>-&gt;</operator><name>attcollation</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* construct an artificial CitusTableCacheEntry for shard pruning */</comment>
	<decl_stmt><decl><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type><name>shardSearchInfo</name> <init>=
		<expr><call><name>QueryTupleShardSearchInfo</name><argument_list>(<argument><expr><name>minValuesArray</name></expr></argument>, <argument><expr><name>maxValuesArray</name></expr></argument>,
								  <argument><expr><name>partitionMethod</name></expr></argument>, <argument><expr><name>partitionColumn</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* prepare the output destination */</comment>
	<decl_stmt><decl><type><name>EState</name> <modifier>*</modifier></type><name>estate</name> <init>= <expr><call><name>CreateExecutorState</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>tupleContext</name> <init>= <expr><call><name>GetPerTupleMemoryContext</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* create all dest receivers */</comment>
	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type><name>dests</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>partitionCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DestReceiver</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>partitionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partitionIndex</name> <operator>&lt;</operator> <name>partitionCount</name></expr>;</condition> <incr><expr><name>partitionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>StringInfo</name></type> <name>resultId</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>resultId</name></expr></argument>, <argument><expr><literal type="string">"%s_%d"</literal></expr></argument>, <argument><expr><name>resultIdPrefixString</name></expr></argument>, <argument><expr><name>partitionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>filePath</name> <init>= <expr><call><name>QueryResultFileName</name><argument_list>(<argument><expr><name><name>resultId</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>partitionDest</name> <init>= <expr><call><name>CreateFileDestReceiver</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>, <argument><expr><name>tupleContext</name></expr></argument>,
															 <argument><expr><name>binaryCopy</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>dests</name><index>[<expr><name>partitionIndex</name></expr>]</index></name> <operator>=</operator> <name>partitionDest</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<comment type="block">/*
	 * If we are asked to generated empty results, use non-lazy startup.
	 *
	 * The rStartup of the FileDestReceiver will be called for all partitions
	 * and generate empty files, which may still have binary header/footer.
	 */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>lazyStartup</name> <init>= <expr><operator>!</operator><name>generateEmptyResults</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name> <init>= <expr><call><name>CreatePartitionedResultDestReceiver</name><argument_list>(
		<argument><expr><name>partitionColumnIndex</name></expr></argument>,
		<argument><expr><name>partitionCount</name></expr></argument>,
		<argument><expr><name>shardSearchInfo</name></expr></argument>,
		<argument><expr><name>dests</name></expr></argument>,
		<argument><expr><name>lazyStartup</name></expr></argument>,
		<argument><expr><name>allowNullPartitionColumnValues</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* execute the query */</comment>
	<expr_stmt><expr><call><name>PortalRun</name><argument_list>(<argument><expr><name>portal</name></expr></argument>, <argument><expr><name>FETCH_ALL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>dest</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* construct the output result */</comment>
	<decl_stmt><decl><type><name>TupleDesc</name></type> <name>returnTupleDesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Tuplestorestate</name> <modifier>*</modifier></type><name>tupleStore</name> <init>= <expr><call><name>SetupTuplestore</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>returnTupleDesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>resultInfo</name><operator>-&gt;</operator><name>returnMode</name></name> <operator>=</operator> <name>SFRM_Materialize</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultInfo</name><operator>-&gt;</operator><name>setResult</name></name> <operator>=</operator> <name>tupleStore</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultInfo</name><operator>-&gt;</operator><name>setDesc</name></name> <operator>=</operator> <name>returnTupleDesc</name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>partitionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partitionIndex</name> <operator>&lt;</operator> <name>partitionCount</name></expr>;</condition> <incr><expr><name>partitionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint64</name></type> <name>recordsWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>bytesWritten</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nulls</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>FileDestReceiverStats</name><argument_list>(<argument><expr><name><name>dests</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>recordsWritten</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>nulls</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>nulls</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>Int32GetDatum</name><argument_list>(<argument><expr><name>partitionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>recordsWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>UInt64GetDatum</name><argument_list>(<argument><expr><name>bytesWritten</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>tuplestore_putvalues</name><argument_list>(<argument><expr><name>tupleStore</name></expr></argument>, <argument><expr><name>returnTupleDesc</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>nulls</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>PortalDrop</name><argument_list>(<argument><expr><name>portal</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>FreeExecutorState</name><argument_list>(<argument><expr><name>estate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name><name>dest</name><operator>-&gt;</operator><name>rDestroy</name></name><argument_list>(<argument><expr><name>dest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * StartPortalForQueryExecution creates and starts a portal which can be
 * used for running the given query.
 */</comment>
<function><type><specifier>static</specifier> <name>Portal</name></type>
<name>StartPortalForQueryExecution</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>queryString</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>ParseQueryString</name><argument_list>(<argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>cursorOptions</name> <init>= <expr><name>CURSOR_OPT_PARALLEL_OK</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>queryPlan</name> <init>= <expr><call><name>pg_plan_query</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cursorOptions</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Portal</name></type> <name>portal</name> <init>= <expr><call><name>CreateNewPortal</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* don't display the portal in pg_cursors, it is for internal use only */</comment>
	<expr_stmt><expr><name><name>portal</name><operator>-&gt;</operator><name>visible</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PortalDefineQuery</name><argument_list>(<argument><expr><name>portal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>, <argument><expr><name>CMDTAG_SELECT</name></expr></argument>,
					  <argument><expr><call><name>list_make1</name><argument_list>(<argument><expr><name>queryPlan</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>eflags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PortalStart</name><argument_list>(<argument><expr><name>portal</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>eflags</name></expr></argument>, <argument><expr><call><name>GetActiveSnapshot</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>portal</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * QueryTupleShardSearchInfo returns a CitusTableCacheEntry which has enough
 * information so that FindShardInterval() can find the shard corresponding
 * to a tuple.
 */</comment>
<function><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type>
<name>QueryTupleShardSearchInfo</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>minValuesArray</name></decl></parameter>, <parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>maxValuesArray</name></decl></parameter>,
						  <parameter><decl><type><name>char</name></type> <name>partitionMethod</name></decl></parameter>, <parameter><decl><type><name>Var</name> <modifier>*</modifier></type><name>partitionColumn</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>minValues</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>maxValues</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>minValueNulls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>maxValueNulls</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>minValuesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>maxValuesCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>intervalTypeId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>intervalTypeMod</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>minValuesArray</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>minValues</name></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>minValueNulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>minValuesCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>maxValuesArray</name></expr></argument>, <argument><expr><name>TEXTOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxValues</name></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>maxValueNulls</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>maxValuesCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>partitionCount</name> <init>= <expr><name>minValuesCount</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>maxValuesCount</name> <operator>==</operator> <name>partitionCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>GetIntervalTypeInfo</name><argument_list>(<argument><expr><name>partitionMethod</name></expr></argument>, <argument><expr><name>partitionColumn</name></expr></argument>,
						<argument><expr><operator>&amp;</operator><name>intervalTypeId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>intervalTypeMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>shardColumnCompare</name> <init>= <expr><call><name>GetFunctionInfo</name><argument_list>(<argument><expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>,
												   <argument><expr><name>BTREE_AM_OID</name></expr></argument>, <argument><expr><name>BTORDER_PROC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>shardIntervalCompare</name> <init>= <expr><call><name>GetFunctionInfo</name><argument_list>(<argument><expr><name>intervalTypeId</name></expr></argument>,
													 <argument><expr><name>BTREE_AM_OID</name></expr></argument>, <argument><expr><name>BTORDER_PROC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>FmgrInfo</name> <modifier>*</modifier></type><name>hashFunction</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>partitionMethod</name> <operator>==</operator> <name>DISTRIBUTE_BY_HASH</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>TypeCacheEntry</name> <modifier>*</modifier></type><name>typeEntry</name> <init>= <expr><call><name>lookup_type_cache</name><argument_list>(<argument><expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>,
													  <argument><expr><name>TYPECACHE_HASH_PROC_FINFO</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name>hashFunction</name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>FmgrInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fmgr_info_copy</name><argument_list>(<argument><expr><name>hashFunction</name></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>typeEntry</name><operator>-&gt;</operator><name>hash_proc_finfo</name></name><operator>)</operator></expr></argument>, <argument><expr><name>CurrentMemoryContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name><name>hashFunction</name><operator>-&gt;</operator><name>fn_oid</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"no hash function defined for type %s"</literal></expr></argument>,
								   <argument><expr><call><name>format_type_be</name><argument_list>(<argument><expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>vartype</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier><modifier>*</modifier></type><name>shardIntervalArray</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>partitionCount</name> <operator>*</operator>
												 <sizeof>sizeof<argument_list>(<argument><expr><name>ShardInterval</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>partitionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partitionIndex</name> <operator>&lt;</operator> <name>partitionCount</name></expr>;</condition> <incr><expr><name>partitionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name><name>datumArray</name><index>[<expr><name>Natts_pg_dist_shard</name></expr>]</index></name> <init>= <expr><block>{
			<expr><index>[<expr><name>Anum_pg_dist_shard_logicalrelid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>InvalidOid</name></expr>,
			<expr><index>[<expr><name>Anum_pg_dist_shard_shardid</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>partitionIndex</name></expr>,
			<expr><index>[<expr><name>Anum_pg_dist_shard_shardstorage</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name>SHARD_STORAGE_VIRTUAL</name></expr>,
			<expr><index>[<expr><name>Anum_pg_dist_shard_shardminvalue</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>minValues</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr>,
			<expr><index>[<expr><name>Anum_pg_dist_shard_shardmaxvalue</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>maxValues</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr>
		}</block></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name><name>nullsArray</name><index>[<expr><name>Natts_pg_dist_shard</name></expr>]</index></name> <init>= <expr><block>{
			<expr><index>[<expr><name>Anum_pg_dist_shard_shardminvalue</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>minValueNulls</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr>,
			<expr><index>[<expr><name>Anum_pg_dist_shard_shardmaxvalue</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index> <operator>=</operator> <name><name>maxValueNulls</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr>
		}</block></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>shardIntervalArray</name><index>[<expr><name>partitionIndex</name></expr>]</index></name> <operator>=</operator>
			<call><name>DeformedDistShardTupleToShardInterval</name><argument_list>(<argument><expr><name>datumArray</name></expr></argument>, <argument><expr><name>nullsArray</name></expr></argument>,
												  <argument><expr><name>intervalTypeId</name></expr></argument>, <argument><expr><name>intervalTypeMod</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>shardIntervalArray</name><index>[<expr><name>partitionIndex</name></expr>]</index></name><operator>-&gt;</operator><name>shardIndex</name> <operator>=</operator> <name>partitionIndex</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<decl_stmt><decl><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>CitusTableCacheEntry</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>partitionMethod</name></name> <operator>=</operator> <name>partitionMethod</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>partitionColumn</name></name> <operator>=</operator> <name>partitionColumn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>shardIntervalCompareFunction</name></name> <operator>=</operator> <name>shardIntervalCompare</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>shardColumnCompareFunction</name></name> <operator>=</operator> <name>shardColumnCompare</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hashFunction</name></name> <operator>=</operator> <name>hashFunction</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>sortedShardIntervalArray</name></name> <operator>=</operator>
		<call><name>SortShardIntervalArray</name><argument_list>(<argument><expr><name>shardIntervalArray</name></expr></argument>, <argument><expr><name>partitionCount</name></expr></argument>,
							   <argument><expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>varcollid</name></name></expr></argument>, <argument><expr><name>shardIntervalCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hasUninitializedShardInterval</name></name> <operator>=</operator>
		<call><name>HasUninitializedShardInterval</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>sortedShardIntervalArray</name></name></expr></argument>, <argument><expr><name>partitionCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>hasOverlappingShardInterval</name></name> <operator>=</operator>
		<name><name>result</name><operator>-&gt;</operator><name>hasUninitializedShardInterval</name></name> <operator>||</operator>
		<call><name>HasOverlappingShardInterval</name><argument_list>(<argument><expr><name><name>result</name><operator>-&gt;</operator><name>sortedShardIntervalArray</name></name></expr></argument>, <argument><expr><name>partitionCount</name></expr></argument>,
									<argument><expr><name><name>partitionColumn</name><operator>-&gt;</operator><name>varcollid</name></name></expr></argument>, <argument><expr><name>shardIntervalCompare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ErrorIfInconsistentShardIntervals</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>result</name><operator>-&gt;</operator><name>shardIntervalArrayLength</name></name> <operator>=</operator> <name>partitionCount</name></expr>;</expr_stmt>

	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CreatePartitionedResultDestReceiver sets up a partitioned dest receiver.
 */</comment>
<function><type><name>DestReceiver</name> <modifier>*</modifier></type>
<name>CreatePartitionedResultDestReceiver</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>partitionColumnIndex</name></decl></parameter>,
									<parameter><decl><type><name>int</name></type> <name>partitionCount</name></decl></parameter>,
									<parameter><decl><type><name>CitusTableCacheEntry</name> <modifier>*</modifier></type><name>shardSearchInfo</name></decl></parameter>,
									<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier><modifier>*</modifier></type><name>partitionedDestReceivers</name></decl></parameter>,
									<parameter><decl><type><name>bool</name></type> <name>lazyStartup</name></decl></parameter>,
									<parameter><decl><type><name>bool</name></type> <name>allowNullPartitionColumnValues</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionedResultDestReceiver</name> <modifier>*</modifier></type><name>resultDest</name> <init>=
		<expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>PartitionedResultDestReceiver</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* set up the DestReceiver function pointers */</comment>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>receiveSlot</name></name> <operator>=</operator> <name>PartitionedResultDestReceiverReceive</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rStartup</name></name> <operator>=</operator> <name>PartitionedResultDestReceiverStartup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rShutdown</name></name> <operator>=</operator> <name>PartitionedResultDestReceiverShutdown</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>rDestroy</name></name> <operator>=</operator> <name>PartitionedResultDestReceiverDestroy</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>mydest</name></name> <operator>=</operator> <name>DestCopyOut</name></expr>;</expr_stmt>

	<comment type="block">/* setup routing parameters */</comment>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>partitionColumnIndex</name></name> <operator>=</operator> <name>partitionColumnIndex</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>partitionCount</name></name> <operator>=</operator> <name>partitionCount</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>shardSearchInfo</name></name> <operator>=</operator> <name>shardSearchInfo</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>partitionDestReceivers</name></name> <operator>=</operator> <name>partitionedDestReceivers</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>startedDestReceivers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>lazyStartup</name></name> <operator>=</operator> <name>lazyStartup</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>resultDest</name><operator>-&gt;</operator><name>allowNullPartitionColumnValues</name></name> <operator>=</operator> <name>allowNullPartitionColumnValues</name></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><name>DestReceiver</name> <operator>*</operator><operator>)</operator> <name>resultDest</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PartitionedResultDestReceiverStartup implements the rStartup interface of
 * PartitionedResultDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PartitionedResultDestReceiverStartup</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>operation</name></decl></parameter>,
									 <parameter><decl><type><name>TupleDesc</name></type> <name>inputTupleDescriptor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionedResultDestReceiver</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>PartitionedResultDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>startupArguments</name><operator>.</operator><name>tupleDescriptor</name></name> <operator>=</operator> <call><name>CreateTupleDescCopy</name><argument_list>(<argument><expr><name>inputTupleDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>startupArguments</name><operator>.</operator><name>operation</name></name> <operator>=</operator> <name>operation</name></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>lazyStartup</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we are initialized, rest happens when needed*/</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* no lazy startup, lets startup our partitionedDestReceivers */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>partitionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partitionIndex</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>partitionCount</name></name></expr>;</condition> <incr><expr><name>partitionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>partitionDest</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>partitionDestReceivers</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>partitionDest</name><operator>-&gt;</operator><name>rStartup</name></name><argument_list>(<argument><expr><name>partitionDest</name></expr></argument>, <argument><expr><name>operation</name></expr></argument>, <argument><expr><name>inputTupleDescriptor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name></expr></argument>,
													<argument><expr><name>partitionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * PartitionedResultDestReceiverReceive implements the receiveSlot interface of
 * PartitionedResultDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>PartitionedResultDestReceiverReceive</name><parameter_list>(<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionedResultDestReceiver</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>PartitionedResultDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>slot_getallattrs</name><argument_list>(<argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>columnValues</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_values</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name> <modifier>*</modifier></type><name>columnNulls</name> <init>= <expr><name><name>slot</name><operator>-&gt;</operator><name>tts_isnull</name></name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>partitionIndex</name></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>columnNulls</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>partitionColumnIndex</name></name></expr>]</index></name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>self</name><operator>-&gt;</operator><name>allowNullPartitionColumnValues</name></name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * NULL values go into the first partition for both hash- and range-
			 * partitioning, since that is the only way to guarantee that there is
			 * always a partition for NULL and that it is always the same partition.
			 */</comment>
			<expr_stmt><expr><name>partitionIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_NULL_VALUE_NOT_ALLOWED</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"the partition column value cannot be NULL"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>partitionColumnValue</name> <init>= <expr><name><name>columnValues</name><index>[<expr><name><name>self</name><operator>-&gt;</operator><name>partitionColumnIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ShardInterval</name> <modifier>*</modifier></type><name>shardInterval</name> <init>= <expr><call><name>FindShardInterval</name><argument_list>(<argument><expr><name>partitionColumnValue</name></expr></argument>,
														 <argument><expr><name><name>self</name><operator>-&gt;</operator><name>shardSearchInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>shardInterval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_OBJECT_NOT_IN_PREREQUISITE_STATE</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not find shard for partition column "</literal>
								   <literal type="string">"value"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>partitionIndex</name> <operator>=</operator> <name><name>shardInterval</name><operator>-&gt;</operator><name>shardIndex</name></name></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>partitionDest</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>partitionDestReceivers</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* check if this partitionDestReceiver has been started before, start if not */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bms_is_member</name><argument_list>(<argument><expr><name>partitionIndex</name></expr></argument>, <argument><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name><name>partitionDest</name><operator>-&gt;</operator><name>rStartup</name></name><argument_list>(<argument><expr><name>partitionDest</name></expr></argument>,
								<argument><expr><name><name>self</name><operator>-&gt;</operator><name>startupArguments</name><operator>.</operator><name>operation</name></name></expr></argument>,
								<argument><expr><name><name>self</name><operator>-&gt;</operator><name>startupArguments</name><operator>.</operator><name>tupleDescriptor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name> <operator>=</operator> <call><name>bms_add_member</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name></expr></argument>,
													<argument><expr><name>partitionIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* forward the tuple to the appropriate dest receiver */</comment>
	<expr_stmt><expr><call><name><name>partitionDest</name><operator>-&gt;</operator><name>receiveSlot</name></name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>partitionDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PartitionedResultDestReceiverShutdown implements the rShutdown interface of
 * PartitionedResultDestReceiver by calling rShutdown on all started
 * partitionedDestReceivers.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PartitionedResultDestReceiverShutdown</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionedResultDestReceiver</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>PartitionedResultDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>i</name> <operator>=</operator> <call><name>bms_next_member</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>partitionDest</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>partitionDestReceivers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name><name>partitionDest</name><operator>-&gt;</operator><name>rShutdown</name></name><argument_list>(<argument><expr><name>partitionDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<comment type="block">/* empty the set of started receivers which allows them to be restarted again */</comment>
	<expr_stmt><expr><call><name>bms_free</name><argument_list>(<argument><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>self</name><operator>-&gt;</operator><name>startedDestReceivers</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * PartitionedResultDestReceiverDestroy implements the rDestroy interface of
 * PartitionedResultDestReceiver.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>PartitionedResultDestReceiverDestroy</name><parameter_list>(<parameter><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>dest</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PartitionedResultDestReceiver</name> <modifier>*</modifier></type><name>self</name> <init>= <expr><operator>(</operator><name>PartitionedResultDestReceiver</name> <operator>*</operator><operator>)</operator> <name>dest</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* we destroy all dest receivers, irregardless if they have been started or not */</comment>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>partitionIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partitionIndex</name> <operator>&lt;</operator> <name><name>self</name><operator>-&gt;</operator><name>partitionCount</name></name></expr>;</condition> <incr><expr><name>partitionIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DestReceiver</name> <modifier>*</modifier></type><name>partitionDest</name> <init>= <expr><name><name>self</name><operator>-&gt;</operator><name>partitionDestReceivers</name><index>[<expr><name>partitionIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>partitionDest</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name><name>partitionDest</name><operator>-&gt;</operator><name>rDestroy</name></name><argument_list>(<argument><expr><name>partitionDest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>
</unit>
