<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/shared_library_init.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * shared_library_init.c
 *	  Functionality related to the initialization of the Citus extension.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<comment type="block">/* necessary to get alloca on illumos */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__sun</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;alloca.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_authid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/objectaccess.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"citus_version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/explain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/backend_data.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/background_jobs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/causal_clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_depended_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_nodefuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/commands/utility_hook.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/cte_inline.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/distributed_deadlock_detection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/errormessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/insert_select_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_result_pruning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_multi_copy.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_distributed_join_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/locally_reserved_shared_connections.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/maintenanced.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_cleaner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/coordinator_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_sync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_explain.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_join_order.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_logical_replication.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_logical_optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/distributed_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/combine_query_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_router_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_server_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_dist_partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/placement_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/priority.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/query_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/recursive_planning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/reference_table_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/relation_access_tracking.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/run_from_same_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_cleaner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_transfer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shared_connection_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shardsplit_shared_memory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/query_pushdown_planning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/time_constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/query_stats.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_rebalancer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shared_library_init.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/statistics_collection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/subplan_execution.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/resource_lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_recovery.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/utils/directory.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_log_messages.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_shard_visibility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/adaptive_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq/auth.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/atomics.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"replication/walsender.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/paths.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcop/tcopprot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/guc_tables.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/syscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/varlena.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"columnar/columnar.h"</cpp:file></cpp:include>

<comment type="block">/* marks shared object as one loadable by the postgres version compiled against */</comment>
<expr_stmt><expr><name>PG_MODULE_MAGIC</name></expr>;</expr_stmt>

<decl_stmt><decl><type><name>ColumnarSupportsIndexAM_type</name></type> <name>extern_ColumnarSupportsIndexAM</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>CompressionTypeStr_type</name></type> <name>extern_CompressionTypeStr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>IsColumnarTableAmTable_type</name></type> <name>extern_IsColumnarTableAmTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>ReadColumnarOptions_type</name></type> <name>extern_ReadColumnarOptions</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * Define "pass-through" functions so that a SQL function defined as one of
 * these symbols in the citus module can use the definition in the columnar
 * module.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><parameter_list>(<parameter><type><name>funcname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>static PGFunction CppConcat(extern_, funcname); \
	PG_FUNCTION_INFO_V1(funcname); \
	Datum funcname(PG_FUNCTION_ARGS) \
	{ \
		return CppConcat(extern_, funcname)(fcinfo); \
	}</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INIT_COLUMNAR_SYMBOL</name><parameter_list>(<parameter><type><name>typename</name></type></parameter>, <parameter><type><name>funcname</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>CppConcat(extern_, funcname) = \
		(typename) (void *) lookup_external_function(handle, # funcname)</cpp:value></cpp:define>

<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>columnar_handler</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>alter_columnar_table_set</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>alter_columnar_table_reset</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>upgrade_columnar_storage</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>downgrade_columnar_storage</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>columnar_relation_storageid</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>columnar_storage_info</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>columnar_store_memory_stats</argument>)</argument_list></macro>
<macro><name>DEFINE_COLUMNAR_PASSTHROUGH_FUNC</name><argument_list>(<argument>test_columnar_storage_write_new_page</argument>)</argument_list></macro>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DUMMY_REAL_TIME_EXECUTOR_ENUM_VALUE</name></cpp:macro> <cpp:value>9999999</cpp:value></cpp:define>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>CitusVersion</name> <init>= <expr><name>CITUS_VERSION</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>DeprecatedEmptyString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>MitmfifoEmptyString</name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>DeprecatedDeferShardDeleteOnMove</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>DeprecatedDeferShardDeleteOnSplit</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>DeprecatedReplicateReferenceTablesOnActivate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* deprecated GUC value that should not be used anywhere outside this file */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ReplicationModel</name> <init>= <expr><name>REPLICATION_MODEL_STREAMING</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* we override the application_name assign_hook and keep a pointer to the old one */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>GucStringAssignHook</name></type> <name>OldApplicationNameAssignHook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>object_access_hook_type</name></type> <name>PrevObjectAccessHook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_15</name></expr></cpp:if>
<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_request_hook_type</name></type> <name>prev_shmem_request_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><name>void</name></type> <name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_15</name></expr></cpp:if>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>citus_shmem_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusObjectAccessHook</name><parameter_list>(<parameter><decl><type><name>ObjectAccessType</name></type> <name>access</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>int</name></type>
								  <name>subId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DoInitialCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ResizeStackToMaximumDepth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>multi_log_hook</name><parameter_list>(<parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RegisterConnectionCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RegisterExternalClientBackendCounterDecrement</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusCleanupConnectionsAtExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DecrementExternalClientBackendCounterAtExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CreateRequiredDirectories</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>RegisterCitusConfigVariables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>OverridePostgresConfigAssignHooks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ErrorIfNotASuitableDeadlockFactor</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>,
											  <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>WarnIfDeprecatedExecutorUsed</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>WarnIfReplicationModelIsSet</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>NoticeIfSubqueryPushdownEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShowShardsForAppNamePrefixesCheckHook</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>,
												  <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ShowShardsForAppNamePrefixesAssignHook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>ApplicationNameAssignHook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CpuPriorityAssignHook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>NodeConninfoGucCheckHook</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>NodeConninfoGucAssignHook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>MaxSharedPoolSizeGucShowHook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type> <name>LocalPoolSizeGucShowHook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>StatisticsCollectionGucCheckHook</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type>
											 <name>source</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>CitusAuthHook</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsSuperuser</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>userName</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <name>ClientAuthentication_hook_type</name></type> <name>original_client_auth_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* *INDENT-OFF* */</comment>
<comment type="block">/* GUC enum definitions */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>propagate_set_commands_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"none"</literal></expr>, <expr><name>PROPSETCMD_NONE</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"local"</literal></expr>, <expr><name>PROPSETCMD_LOCAL</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>stat_statements_track_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"none"</literal></expr>, <expr><name>STAT_STATEMENTS_TRACK_NONE</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"all"</literal></expr>, <expr><name>STAT_STATEMENTS_TRACK_ALL</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>task_assignment_policy_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"greedy"</literal></expr>, <expr><name>TASK_ASSIGNMENT_GREEDY</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"first-replica"</literal></expr>, <expr><name>TASK_ASSIGNMENT_FIRST_REPLICA</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"round-robin"</literal></expr>, <expr><name>TASK_ASSIGNMENT_ROUND_ROBIN</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>replication_model_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"statement"</literal></expr>, <expr><name>REPLICATION_MODEL_COORDINATOR</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"streaming"</literal></expr>, <expr><name>REPLICATION_MODEL_STREAMING</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>task_executor_type_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"adaptive"</literal></expr>, <expr><name>MULTI_EXECUTOR_ADAPTIVE</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"real-time"</literal></expr>, <expr><name>DUMMY_REAL_TIME_EXECUTOR_ENUM_VALUE</name></expr>, <expr><name>false</name></expr> }</block></expr>, <comment type="block">/* keep it for backward comp. */</comment>
	<expr><block>{ <expr><literal type="string">"task-tracker"</literal></expr>, <expr><name>MULTI_EXECUTOR_ADAPTIVE</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>use_secondary_nodes_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"never"</literal></expr>, <expr><name>USE_SECONDARY_NODES_NEVER</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"always"</literal></expr>, <expr><name>USE_SECONDARY_NODES_ALWAYS</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>coordinator_aggregation_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"disabled"</literal></expr>, <expr><name>COORDINATOR_AGGREGATION_DISABLED</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"row-gather"</literal></expr>, <expr><name>COORDINATOR_AGGREGATION_ROW_GATHER</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>log_level_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"off"</literal></expr>, <expr><name>CITUS_LOG_LEVEL_OFF</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"debug5"</literal></expr>, <expr><name>DEBUG5</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"debug4"</literal></expr>, <expr><name>DEBUG4</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"debug3"</literal></expr>, <expr><name>DEBUG3</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"debug2"</literal></expr>, <expr><name>DEBUG2</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"debug1"</literal></expr>, <expr><name>DEBUG1</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"debug"</literal></expr>, <expr><name>DEBUG2</name></expr>, <expr><name>true</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"log"</literal></expr>, <expr><name>LOG</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"info"</literal></expr>, <expr><name>INFO</name></expr>, <expr><name>true</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"notice"</literal></expr>, <expr><name>NOTICE</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"warning"</literal></expr>, <expr><name>WARNING</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"error"</literal></expr>, <expr><name>ERROR</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>local_table_join_policies</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"never"</literal></expr>, <expr><name>LOCAL_JOIN_POLICY_NEVER</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"prefer-local"</literal></expr>, <expr><name>LOCAL_JOIN_POLICY_PREFER_LOCAL</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"prefer-distributed"</literal></expr>, <expr><name>LOCAL_JOIN_POLICY_PREFER_DISTRIBUTED</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"auto"</literal></expr>, <expr><name>LOCAL_JOIN_POLICY_AUTO</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>multi_shard_modify_connection_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"parallel"</literal></expr>, <expr><name>PARALLEL_CONNECTION</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"sequential"</literal></expr>, <expr><name>SEQUENTIAL_CONNECTION</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>explain_analyze_sort_method_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"execution-time"</literal></expr>, <expr><name>EXPLAIN_ANALYZE_SORT_BY_TIME</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"taskId"</literal></expr>, <expr><name>EXPLAIN_ANALYZE_SORT_BY_TASK_ID</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr> }</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>create_object_propagation_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{<expr><literal type="string">"deferred"</literal></expr>,  <expr><name>CREATE_OBJECT_PROPAGATION_DEFERRED</name></expr>,  <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"automatic"</literal></expr>, <expr><name>CREATE_OBJECT_PROPAGATION_AUTOMATIC</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"immediate"</literal></expr>, <expr><name>CREATE_OBJECT_PROPAGATION_IMMEDIATE</name></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{<expr><name>NULL</name></expr>,        <expr><literal type="number">0</literal></expr>,                                   <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * This used to choose CPU priorities for GUCs. For most other integer options
 * we use the -1 value as inherit/default/unset. For CPU priorities this isn't
 * possible, because they can actually have negative values. So we need a value
 * outside of the range that's valid for priorities. But if this is only one
 * more or less than the valid values, this can also be quite confusing for
 * people that don't know the exact range of valid values.
 *
 * So, instead we opt for using an enum that contains all valid priority values
 * as strings, as well as the "inherit" string to indicate that the priority
 * value should not be changed.
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>config_enum_entry</name></name></type> <name><name>cpu_priority_options</name><index>[]</index></name> <init>= <expr><block>{
	<expr><block>{ <expr><literal type="string">"inherit"</literal></expr>, <expr><name>CPU_PRIORITY_INHERIT</name></expr>, <expr><name>false</name></expr> }</block></expr>,
	<expr><block>{ <expr><literal type="string">"-20"</literal></expr>, <expr><operator>-</operator><literal type="number">20</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-19"</literal></expr>, <expr><operator>-</operator><literal type="number">19</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-18"</literal></expr>, <expr><operator>-</operator><literal type="number">18</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-17"</literal></expr>, <expr><operator>-</operator><literal type="number">17</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-16"</literal></expr>, <expr><operator>-</operator><literal type="number">16</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-15"</literal></expr>, <expr><operator>-</operator><literal type="number">15</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-14"</literal></expr>, <expr><operator>-</operator><literal type="number">14</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-13"</literal></expr>, <expr><operator>-</operator><literal type="number">13</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-12"</literal></expr>, <expr><operator>-</operator><literal type="number">12</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-11"</literal></expr>, <expr><operator>-</operator><literal type="number">11</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-10"</literal></expr>, <expr><operator>-</operator><literal type="number">10</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-9"</literal></expr>, <expr><operator>-</operator><literal type="number">9</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-8"</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-7"</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-6"</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-5"</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-4"</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-3"</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-2"</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"-1"</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"0"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"1"</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"2"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"3"</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"4"</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"5"</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"6"</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"7"</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"8"</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"9"</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"10"</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"11"</literal></expr>, <expr><literal type="number">11</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"12"</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"13"</literal></expr>, <expr><literal type="number">13</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"14"</literal></expr>, <expr><literal type="number">14</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"15"</literal></expr>, <expr><literal type="number">15</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"16"</literal></expr>, <expr><literal type="number">16</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"17"</literal></expr>, <expr><literal type="number">17</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"18"</literal></expr>, <expr><literal type="number">18</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><literal type="string">"19"</literal></expr>, <expr><literal type="number">19</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
	<expr><block>{ <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>}</block></expr>
}</block></expr></init></decl>;</decl_stmt>


<comment type="block">/* *INDENT-ON* */</comment>


<comment type="block">/* shared library initialization function */</comment>
<function><type><name>void</name></type>
<name>_PG_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>process_shared_preload_libraries_in_progress</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Citus can only be loaded via shared_preload_libraries"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Add citus to shared_preload_libraries configuration "</literal>
								<literal type="string">"variable in postgresql.conf in master and workers. Note "</literal>
								<literal type="string">"that citus should be at the beginning of "</literal>
								<literal type="string">"shared_preload_libraries."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Register contstraint_handler hooks of safestringlib first. This way
	 * loading the extension will error out if one of these constraints are hit
	 * during load.
	 */</comment>
	<expr_stmt><expr><call><name>set_str_constraint_handler_s</name><argument_list>(<argument><expr><name>ereport_constraint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>set_mem_constraint_handler_s</name><argument_list>(<argument><expr><name>ereport_constraint_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Perform checks before registering any hooks, to avoid erroring out in a
	 * partial state.
	 *
	 * In many cases (e.g. planner and utility hook, to run inside
	 * pg_stat_statements et. al.) we have to be loaded before other hooks
	 * (thus as the innermost/last running hook) to be able to do our
	 * duties. For simplicity insist that all hooks are previously unused.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>planner_hook</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>ProcessUtility_hook</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
		<name>ExecutorStart_hook</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name>ExecutorRun_hook</name> <operator>!=</operator> <name>NULL</name> <operator>||</operator>
		<name>ExplainOneQuery_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Citus has to be loaded first"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Place citus at the beginning of "</literal>
								<literal type="string">"shared_preload_libraries."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ResizeStackToMaximumDepth</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Extend the database directory structure before continuing with
	 * initialization - one of the later steps might require them to exist.
	 * If in a sub-process (windows / EXEC_BACKEND) this already has been
	 * done.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>CreateRequiredDirectories</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>InitConnParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Register Citus configuration variables. Do so before intercepting
	 * hooks or calling initialization functions, in case we want to do the
	 * latter in a configuration dependent manner.
	 */</comment>
	<expr_stmt><expr><call><name>RegisterCitusConfigVariables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make our additional node types known */</comment>
	<expr_stmt><expr><call><name>RegisterNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* make our custom scan nodes known */</comment>
	<expr_stmt><expr><call><name>RegisterCitusCustomScanMethods</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* intercept planner */</comment>
	<expr_stmt><expr><name>planner_hook</name> <operator>=</operator> <name>distributed_planner</name></expr>;</expr_stmt>

	<comment type="block">/* register for planner hook */</comment>
	<expr_stmt><expr><name>set_rel_pathlist_hook</name> <operator>=</operator> <name>multi_relation_restriction_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>set_join_pathlist_hook</name> <operator>=</operator> <name>multi_join_restriction_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorStart_hook</name> <operator>=</operator> <name>CitusExecutorStart</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExecutorRun_hook</name> <operator>=</operator> <name>CitusExecutorRun</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ExplainOneQuery_hook</name> <operator>=</operator> <name>CitusExplainOneQuery</name></expr>;</expr_stmt>

	<comment type="block">/* register hook for error messages */</comment>
	<expr_stmt><expr><name>emit_log_hook</name> <operator>=</operator> <name>multi_log_hook</name></expr>;</expr_stmt>


	<comment type="block">/*
	 * Register hook for counting client backends that
	 * are successfully authenticated.
	 */</comment>
	<expr_stmt><expr><name>original_client_auth_hook</name> <operator>=</operator> <name>ClientAuthentication_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>ClientAuthentication_hook</name> <operator>=</operator> <name>CitusAuthHook</name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_15</name></expr></cpp:if>
	<expr_stmt><expr><name>prev_shmem_request_hook</name> <operator>=</operator> <name>shmem_request_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_request_hook</name> <operator>=</operator> <name>citus_shmem_request</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><call><name>InitializeMaintenanceDaemon</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize coordinated transaction management */</comment>
	<expr_stmt><expr><call><name>InitializeTransactionManagement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitializeBackendManagement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitializeConnectionManagement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitPlacementConnectionManagement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitRelationAccessHash</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitializeCitusQueryStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitializeSharedConnectionStats</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitializeLocallyReservedSharedConnections</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>InitializeClusterClockMem</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize shard split shared memory handle management */</comment>
	<expr_stmt><expr><call><name>InitializeShardSplitSMHandleManagement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* enable modification of pg_catalog tables during pg_upgrade */</comment>
	<if_stmt><if>if <condition>(<expr><name>IsBinaryUpgrade</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>SetConfigOption</name><argument_list>(<argument><expr><literal type="string">"allow_system_table_mods"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>, <argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
						<argument><expr><name>PGC_S_OVERRIDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * In postmasters execution of _PG_init, IsUnderPostmaster will be false and
	 * we want to do the cleanup at that time only, otherwise there is a chance that
	 * there will be parallel queries and we might do a cleanup for things that are
	 * already in use. This is only needed in Windows.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>DoInitialCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>PrevObjectAccessHook</name> <operator>=</operator> <name>object_access_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>object_access_hook</name> <operator>=</operator> <name>CitusObjectAccessHook</name></expr>;</expr_stmt>


	<comment type="block">/* ensure columnar module is loaded at the right time */</comment>
	<expr_stmt><expr><call><name>load_file</name><argument_list>(<argument><expr><name>COLUMNAR_MODULE_NAME</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Register utility hook. This must be done after loading columnar, so
	 * that the citus hook is called first, followed by the columnar hook,
	 * followed by standard_ProcessUtility. That allows citus to distribute
	 * ALTER TABLE commands before columnar strips out the columnar-specific
	 * options.
	 */</comment>
	<expr_stmt><expr><name>PrevProcessUtility</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ProcessUtility_hook</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then>
						 <expr><name>ProcessUtility_hook</name></expr> </then><else>: <expr><name>standard_ProcessUtility</name></expr></else></ternary></expr>;</expr_stmt>
	<expr_stmt><expr><name>ProcessUtility_hook</name> <operator>=</operator> <name>multi_ProcessUtility</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Acquire symbols for columnar functions that citus calls.
	 */</comment>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>handle</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* use load_external_function() the first time to initialize the handle */</comment>
	<expr_stmt><expr><name>extern_ColumnarSupportsIndexAM</name> <operator>=</operator> <operator>(</operator><name>ColumnarSupportsIndexAM_type</name><operator>)</operator> <operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator>
									 <call><name>load_external_function</name><argument_list>(<argument><expr><name>COLUMNAR_MODULE_NAME</name></expr></argument>,
															<argument><expr><literal type="string">"ColumnarSupportsIndexAM"</literal></expr></argument>,
															<argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>CompressionTypeStr_type</name></expr></argument>, <argument><expr><name>CompressionTypeStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>IsColumnarTableAmTable_type</name></expr></argument>, <argument><expr><name>IsColumnarTableAmTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>ReadColumnarOptions_type</name></expr></argument>, <argument><expr><name>ReadColumnarOptions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* initialize symbols for "pass-through" functions */</comment>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>columnar_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>alter_columnar_table_set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>alter_columnar_table_reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>upgrade_columnar_storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>downgrade_columnar_storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>columnar_relation_storageid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>columnar_storage_info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>columnar_store_memory_stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>INIT_COLUMNAR_SYMBOL</name><argument_list>(<argument><expr><name>PGFunction</name></expr></argument>, <argument><expr><name>test_columnar_storage_write_new_page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_15</name></expr></cpp:if>

<comment type="block">/*
 * Requests any additional shared memory required for citus.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>citus_shmem_request</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>prev_shmem_request_hook</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>prev_shmem_request_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>BackendManagementShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>SharedConnectionStatsShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>MaintenanceDaemonShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>CitusQueryStatsSharedMemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>LogicalClockShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RequestNamedLWLockTranche</name><argument_list>(<argument><expr><name>STATS_SHARED_MEM_NAME</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * DoInitialCleanup does cleanup at start time.
 * Currently it:
 * - Removes intermediate result directories ( in case there are any leftovers)
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DoInitialCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CleanupJobCacheDirectory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * Stack size increase during high memory load may cause unexpected crashes.
 * With this alloca call, we are increasing stack size explicitly, so that if
 * it is not possible to increase stack size, we will get an OOM error instead
 * of a crash.
 *
 * This function is called on backend startup. The allocated memory will
 * automatically be released at the end of the function's scope. However, we'd
 * have already expanded the stack and it wouldn't shrink back. So, in a sense,
 * per backend we're securing max_stack_depth kB's of memory on the stack upfront.
 *
 * Not all the backends require max_stack_depth kB's on the stack, so we might end
 * up with unnecessary allocations. However, the default value is 2MB, which seems
 * an acceptable trade-off. Also, allocating memory upfront may perform better
 * under some circumstances.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ResizeStackToMaximumDepth</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
	<decl_stmt><decl><type><name>long</name></type> <name>max_stack_depth_bytes</name> <init>= <expr><name>max_stack_depth</name> <operator>*</operator> <literal type="number">1024L</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Explanation of IGNORE-BANNED:
	 * alloca is safe to use here since we limit the allocated size. We cannot
	 * use malloc as a replacement, since we actually want to grow the stack
	 * here.
	 */</comment>
	<decl_stmt><decl><type><specifier>volatile</specifier> <name>char</name> <modifier>*</modifier></type><name>stack_resizer</name> <init>= <expr><call><name>alloca</name><argument_list>(<argument><expr><name>max_stack_depth_bytes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <comment type="block">/* IGNORE-BANNED */</comment>

	<comment type="block">/*
	 * Different architectures might have different directions while
	 * growing the stack. So, touch both ends.
	 */</comment>
	<expr_stmt><expr><name><name>stack_resizer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>stack_resizer</name><index>[<expr><name>max_stack_depth_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<comment type="block">/*
	 * Passing the address to external function also prevents the function
	 * from being optimized away, and the debug elog can also help with
	 * diagnosis if needed.
	 */</comment>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><literal type="string">"entry stack is at %p, increased to %p, the top and bottom values of "</literal>
				 <literal type="string">"the stack is %d and %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>stack_resizer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name><name>stack_resizer</name><index>[<expr><name>max_stack_depth_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
		 <argument><expr><name><name>stack_resizer</name><index>[<expr><name>max_stack_depth_bytes</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>stack_resizer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * multi_log_hook intercepts postgres log commands. We use this to override
 * postgres error messages when they're not specific enough for the users.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>multi_log_hook</name><parameter_list>(<parameter><decl><type><name>ErrorData</name> <modifier>*</modifier></type><name>edata</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Show the user a meaningful error message when a backend is cancelled
	 * by the distributed deadlock detection. Also reset the state for this,
	 * since the next cancelation of the backend might have another reason.
	 */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>clearState</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>edata</name><operator>-&gt;</operator><name>elevel</name></name> <operator>==</operator> <name>ERROR</name> <operator>&amp;&amp;</operator> <name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name> <operator>==</operator> <name>ERRCODE_QUERY_CANCELED</name> <operator>&amp;&amp;</operator>
		<call><name>MyBackendGotCancelledDueToDeadlock</name><argument_list>(<argument><expr><name>clearState</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>sqlerrcode</name></name> <operator>=</operator> <name>ERRCODE_T_R_DEADLOCK_DETECTED</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * This hook is called by EmitErrorReport() when emitting the ereport
		 * either to frontend or to the server logs. And some callers of
		 * EmitErrorReport() (e.g.: errfinish()) seems to assume that string
		 * fields of given ErrorData object needs to be freed. For this reason,
		 * we copy the message into heap here.
		 */</comment>
		<expr_stmt><expr><name><name>edata</name><operator>-&gt;</operator><name>message</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><literal type="string">"canceling the transaction since it was "</literal>
								 <literal type="string">"involved in a distributed deadlock"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * StartupCitusBackend initializes per-backend infrastructure, and is called
 * the first time citus is used in a database.
 *
 * NB: All code here has to be able to cope with this routine being called
 * multiple times in the same backend.  This will e.g. happen when the
 * extension is created, upgraded or dropped. Due to the way we detect the
 * extension being dropped this can also happen when autovacuum runs ANALYZE on
 * pg_dist_partition, see InvalidateDistRelationCacheCallback for details.
 */</comment>
<function><type><name>void</name></type>
<name>StartupCitusBackend</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>InitializeMaintenanceDaemonBackend</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * For query backends this will be a no-op, because InitializeBackendData
	 * is already called from the CitusAuthHook. But for background workers we
	 * still need to initialize the backend data.
	 */</comment>
	<expr_stmt><expr><call><name>InitializeBackendData</name><argument_list>(<argument><expr><name>application_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * If this is an external connection or a background workers this will
	 * generate the global PID for this connection. For internal connections
	 * this is a no-op, since InitializeBackendData will already have extracted
	 * the gpid from the application_name.
	 */</comment>
	<expr_stmt><expr><call><name>AssignGlobalPID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>RegisterConnectionCleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetCurrentClientMinMessageLevelName returns the name of the
 * the GUC client_min_messages for its specified value.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>GetClientMinMessageLevelNameForValue</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>minMessageLevel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_enum</name></name></type> <name>record</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>record</name><operator>.</operator><name>options</name></name> <operator>=</operator> <name>log_level_options</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>clientMinMessageLevelName</name> <init>= <expr><call><name>config_enum_lookup_by_value</name><argument_list>(<argument><expr><operator>&amp;</operator><name>record</name></expr></argument>,
																		<argument><expr><name>minMessageLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>clientMinMessageLevelName</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RegisterConnectionCleanup cleans up any resources left at the end of the
 * session. We prefer to cleanup before shared memory exit to make sure that
 * this session properly releases anything hold in the shared memory.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RegisterConnectionCleanup</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>registeredCleanup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>registeredCleanup</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>before_shmem_exit</name><argument_list>(<argument><expr><name>CitusCleanupConnectionsAtExit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>registeredCleanup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * RegisterExternalClientBackendCounterDecrement is called when the backend terminates.
 * For all client backends, we register a callback that will undo
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RegisterExternalClientBackendCounterDecrement</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>registeredCleanup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>registeredCleanup</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>before_shmem_exit</name><argument_list>(<argument><expr><name>DecrementExternalClientBackendCounterAtExit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>registeredCleanup</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CitusCleanupConnectionsAtExit is called before_shmem_exit() of the
 * backend for the purposes of any clean-up needed.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusCleanupConnectionsAtExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* properly close all the cached connections */</comment>
	<expr_stmt><expr><call><name>ShutdownAllConnections</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Make sure that we give the shared connections back to the shared
	 * pool if any. This operation is a no-op if the reserved connections
	 * are already given away.
	 */</comment>
	<expr_stmt><expr><call><name>DeallocateReservedConnections</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we don't want any monitoring view/udf to show already exited backends */</comment>
	<expr_stmt><expr><call><name>SetActiveMyBackend</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>UnSetGlobalPID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DecrementExternalClientBackendCounterAtExit is called before_shmem_exit() of the
 * backend for the purposes decrementing
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DecrementExternalClientBackendCounterAtExit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DecrementExternalClientBackendCounter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * CreateRequiredDirectories - Create directories required for Citus to
 * function.
 *
 * These used to be created by initdb, but that's not possible anymore.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CreateRequiredDirectories</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>subdirs</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"pg_foreign_file"</literal></expr>,
		<expr><literal type="string">"pg_foreign_file/cached"</literal></expr>,
		<expr><operator>(</operator><literal type="string">"base/"</literal> <name>PG_JOB_CACHE_DIR</name><operator>)</operator></expr>
	}</block></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>dirNo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>dirNo</name> <operator>&lt;</operator> <call><name>lengthof</name><argument_list>(<argument><expr><name>subdirs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>dirNo</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>mkdir</name><argument_list>(<argument><expr><name><name>subdirs</name><index>[<expr><name>dirNo</name></expr>]</index></name></expr></argument>, <argument><expr><name>S_IRWXU</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>errno</name> <operator>!=</operator> <name>EEXIST</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode_for_file_access</name><argument_list>()</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"could not create directory \"%s\": %m"</literal></expr></argument>,
								   <argument><expr><name><name>subdirs</name><index>[<expr><name>dirNo</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/* Register Citus configuration variables. */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>RegisterCitusConfigVariables</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.all_modifications_commutative"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Bypasses commutativity checks when enabled"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>AllModificationsCommutative</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.allow_modifications_from_workers_to_replicated_tables"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables modifications from workers to replicated "</literal>
					 <literal type="string">"tables such as reference tables or hash "</literal>
					 <literal type="string">"distributed tables with replication factor "</literal>
					 <literal type="string">"greater than 1."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allowing modifications from the worker nodes "</literal>
					 <literal type="string">"requires extra locking which might decrease "</literal>
					 <literal type="string">"the throughput. Disabling this GUC skips the "</literal>
					 <literal type="string">"extra locking and prevents modifications from "</literal>
					 <literal type="string">"worker nodes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>AllowModificationsFromWorkersToReplicatedTables</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.allow_nested_distributed_execution"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables distributed execution within a task "</literal>
					 <literal type="string">"of another distributed execution."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Nested distributed execution can happen when Citus "</literal>
					 <literal type="string">"pushes down a call to a user-defined function within "</literal>
					 <literal type="string">"a distributed query, and the function contains another "</literal>
					 <literal type="string">"distributed query. In this scenario, Citus makes no "</literal>
					 <literal type="string">"guarantess with regards to correctness and it is therefore "</literal>
					 <literal type="string">"disallowed by default. This setting can be used to allow "</literal>
					 <literal type="string">"nested distributed execution."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>AllowNestedDistributedExecution</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.allow_unsafe_constraints"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables unique constraints and exclusion constraints "</literal>
					 <literal type="string">"that do not include a distribution column."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"To enforce global uniqueness, Citus normally requires "</literal>
					 <literal type="string">"that unique constraints and exclusion constraints contain "</literal>
					 <literal type="string">"the distribution column. If the tuple does not include the "</literal>
					 <literal type="string">"distribution column, Citus cannot ensure that the same value "</literal>
					 <literal type="string">"is not present in another shard. However, in some cases the "</literal>
					 <literal type="string">"index creator knows that uniqueness within the shard implies "</literal>
					 <literal type="string">"global uniqueness (e.g. when indexing an expression derived "</literal>
					 <literal type="string">"from the distribution column) and adding the distribution column "</literal>
					 <literal type="string">"separately may not be desirable. This setting can then be used "</literal>
					 <literal type="string">"to disable the check."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>AllowUnsafeConstraints</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.allow_unsafe_locks_from_workers"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables acquiring a distributed lock from a worker "</literal>
					 <literal type="string">"when the coordinator is not in the metadata"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set to false by default. If set to true, enables "</literal>
					 <literal type="string">"acquiring a distributed lock from a worker "</literal>
					 <literal type="string">"when the coordinator is not in the metadata. "</literal>
					 <literal type="string">"This type of lock is unsafe because the worker will not be "</literal>
					 <literal type="string">"able to lock the coordinator; the coordinator will be able to "</literal>
					 <literal type="string">"intialize distributed operations on the resources locked "</literal>
					 <literal type="string">"by the worker. This can lead to concurrent operations from the "</literal>
					 <literal type="string">"coordinator and distributed deadlocks since the coordinator "</literal>
					 <literal type="string">"and the workers would not acquire locks across the same nodes "</literal>
					 <literal type="string">"in the same order."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableAcquiringUnsafeLockFromWorkers</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.background_task_queue_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Time to wait between checks for scheduled background tasks."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>BackgroundTaskQueueCheckInterval</name></expr></argument>,
		<argument><expr><literal type="number">5000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">3600</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.check_available_space_before_move"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled will check free disk space before a shard move"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Free disk space will be checked when this setting is enabled before each shard move."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CheckAvailableSpaceBeforeMove</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.cluster_name"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Which cluster this node is a part of"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CurrentCluster</name></expr></argument>,
		<argument><expr><literal type="string">"default"</literal></expr></argument>,
		<argument><expr><name>PGC_SU_BACKEND</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.coordinator_aggregation_strategy"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the strategy for when an aggregate cannot be pushed down. "</literal>
					 <literal type="string">"'row-gather' will pull up intermediate rows to the coordinator, "</literal>
					 <literal type="string">"while 'disabled' will error if coordinator aggregation is necessary"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CoordinatorAggregationStrategy</name></expr></argument>,
		<argument><expr><name>COORDINATOR_AGGREGATION_ROW_GATHER</name></expr></argument>,
		<argument><expr><name>coordinator_aggregation_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.copy_switchover_threshold"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the threshold for copy to be switched "</literal>
					 <literal type="string">"over per connection."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Data size threshold to switch over the active placement for "</literal>
					 <literal type="string">"a connection. If this is too low, overhead of starting COPY "</literal>
					 <literal type="string">"commands will hurt the performance. If this is too high, "</literal>
					 <literal type="string">"buffered data will use lots of memory. 4MB is a good balance "</literal>
					 <literal type="string">"between memory usage and performance. Note that this is irrelevant "</literal>
					 <literal type="string">"in the common case where we open one connection per placement."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CopySwitchOverThresholdBytes</name></expr></argument>,
		<argument><expr><literal type="number">4</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_BYTE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomRealVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.count_distinct_error_rate"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Desired error rate when calculating count(distinct) "</literal>
					 <literal type="string">"approximates using the postgresql-hll extension. "</literal>
					 <literal type="string">"0.0 disables approximations for count(distinct); 1.0 "</literal>
					 <literal type="string">"provides no guarantees about the accuracy of results."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CountDistinctErrorRate</name></expr></argument>,
		<argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">1.0</literal></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This doesn't use cpu_priority_options on purpose, because we always need
	 * to know the actual priority value so that `RESET citus.cpu_priority`
	 * actually changes the priority back.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.cpu_priority"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the CPU priority of the current backend."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Lower numbers cause more favorable scheduling, so the "</literal>
					 <literal type="string">"queries that this backend runs will be able to use more "</literal>
					 <literal type="string">"CPU resources compared to queries from other backends. "</literal>
					 <literal type="string">"WARNING: Changing this setting can lead to a pnemomenom "</literal>
					 <literal type="string">"called 'priority inversion', due to locks being held "</literal>
					 <literal type="string">"between different backends. This means that processes "</literal>
					 <literal type="string">"might be scheduled in the exact oposite way of what you "</literal>
					 <literal type="string">"want, i.e. processes that you want scheduled a lot, are "</literal>
					 <literal type="string">"scheduled very little. So use this setting at your own "</literal>
					 <literal type="string">"risk."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CpuPriority</name></expr></argument>,
		<argument><expr><call><name>GetOwnPriority</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><operator>-</operator><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">19</literal></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>CpuPriorityAssignHook</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.cpu_priority_for_logical_replication_senders"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the CPU priority for backends that send logical "</literal>
					 <literal type="string">"replication changes to other nodes for online shard "</literal>
					 <literal type="string">"moves and splits."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Lower numbers cause more favorable scheduling, so the "</literal>
					 <literal type="string">"backends used to do the shard move will get more CPU "</literal>
					 <literal type="string">"resources. 'inherit' is a special value and disables "</literal>
					 <literal type="string">"overriding the CPU priority for backends that send "</literal>
					 <literal type="string">"logical replication changes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CpuPriorityLogicalRepSender</name></expr></argument>,
		<argument><expr><name>CPU_PRIORITY_INHERIT</name></expr></argument>, <argument><expr><name>cpu_priority_options</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.create_object_propagation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Controls the behavior of CREATE statements in transactions for "</literal>
					 <literal type="string">"supported objects"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When creating new objects in transactions this setting is used to "</literal>
					 <literal type="string">"determine the behavior for propagating. When objects are created "</literal>
					 <literal type="string">"in a multi-statement transaction block Citus needs to switch to "</literal>
					 <literal type="string">"sequential mode (if not already) to make sure the objects are "</literal>
					 <literal type="string">"visible to later statements on shards. The switch to sequential is "</literal>
					 <literal type="string">"not always desired. By changing this behavior the user can trade "</literal>
					 <literal type="string">"off performance for full transactional consistency on the creation "</literal>
					 <literal type="string">"of new objects."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CreateObjectPropagationMode</name></expr></argument>,
		<argument><expr><name>CREATE_OBJECT_PROPAGATION_IMMEDIATE</name></expr></argument>, <argument><expr><name>create_object_propagation_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.defer_drop_after_shard_move"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Deprecated, Citus always defers drop after shard move"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DeprecatedDeferShardDeleteOnMove</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.defer_drop_after_shard_split"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Deprecated, Citus always defers drop after shard split"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DeprecatedDeferShardDeleteOnSplit</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.defer_shard_delete_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the time to wait between background deletion for shards."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shards that are marked for deferred deletion need to be deleted in "</literal>
					 <literal type="string">"the background at a later time. This is done at a regular interval "</literal>
					 <literal type="string">"configured here. The deletion is executed optimistically, it tries "</literal>
					 <literal type="string">"to take a lock on a shard to clean, if the lock can't be acquired "</literal>
					 <literal type="string">"the background worker moves on. When set to -1 this background "</literal>
					 <literal type="string">"process is skipped."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DeferShardDeleteInterval</name></expr></argument>,
		<argument><expr><literal type="number">15000</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">3600</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomRealVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.desired_percent_disk_available_after_move"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Sets how many percentage of free disk space should be after a shard move"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"This setting controls how much free space should be available after a shard move. "</literal>
			<literal type="string">"If the free disk space will be lower than this parameter, then shard move will result in "</literal>
			<literal type="string">"an error."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DesiredPercentFreeAfterMove</name></expr></argument>,
		<argument><expr><literal type="number">10.0</literal></expr></argument>, <argument><expr><literal type="number">0.0</literal></expr></argument>, <argument><expr><literal type="number">100.0</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomRealVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.distributed_deadlock_detection_factor"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the time to wait before checking for distributed "</literal>
					 <literal type="string">"deadlocks. Postgres' deadlock_timeout setting is "</literal>
					 <literal type="string">"multiplied with the value. If the value is set to -1, "</literal>
					 <literal type="string">"distributed deadlock detection is disabled."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DistributedDeadlockDetectionTimeoutFactor</name></expr></argument>,
		<argument><expr><literal type="number">2.0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><literal type="number">1000.0</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>ErrorIfNotASuitableDeadlockFactor</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_alter_database_owner"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables propagating ALTER DATABASE ... OWNER TO ... statements to "</literal>
					 <literal type="string">"workers"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableAlterDatabaseOwner</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_alter_role_propagation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables propagating ALTER ROLE statements to workers (excluding "</literal>
					 <literal type="string">"ALTER ROLE SET)"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableAlterRolePropagation</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_alter_role_set_propagation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables propagating ALTER ROLE SET statements to workers"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableAlterRoleSetPropagation</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_binary_protocol"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Enables communication between nodes using binary protocol when possible"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableBinaryProtocol</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_14</name></expr></cpp:if>
		<argument><expr><name>true</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<argument><expr><name>false</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_cluster_clock"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When users explicitly call UDF citus_get_transaction_clock() "</literal>
					 <literal type="string">"and the flag is true, it returns the maximum "</literal>
					 <literal type="string">"clock among all nodes. All nodes move to the "</literal>
					 <literal type="string">"new clock. If clocks go bad for any reason, "</literal>
					 <literal type="string">"this serves as a safety valve."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableClusterClock</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_cost_based_connection_establishment"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled the connection establishment times "</literal>
					 <literal type="string">"and task execution times into account for deciding "</literal>
					 <literal type="string">"whether or not to establish new connections."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableCostBasedConnectionEstablishment</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_create_role_propagation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables propagating CREATE ROLE "</literal>
					 <literal type="string">"and DROP ROLE statements to workers"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableCreateRolePropagation</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_create_type_propagation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables propagating of CREATE TYPE statements to workers"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableCreateTypePropagation</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_ddl_propagation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables propagating DDL statements to worker shards"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableDDLPropagation</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_deadlock_prevention"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Avoids deadlocks by preventing concurrent multi-shard commands"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Multi-shard modifications such as UPDATE, DELETE, and "</literal>
					 <literal type="string">"INSERT...SELECT are typically executed in parallel. If multiple "</literal>
					 <literal type="string">"such commands run concurrently and affect the same rows, then "</literal>
					 <literal type="string">"they are likely to deadlock. When enabled, this flag prevents "</literal>
					 <literal type="string">"multi-shard modifications from running concurrently when they "</literal>
					 <literal type="string">"affect the same shards in order to prevent deadlocks."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableDeadlockPrevention</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_fast_path_router_planner"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables fast path router planner"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableFastPathRouterPlanner</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_local_execution"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables queries on shards that are local to the current node "</literal>
					 <literal type="string">"to be planned and executed locally."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableLocalExecution</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_local_reference_table_foreign_keys"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables foreign keys from/to local tables"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, foreign keys between local tables and reference "</literal>
					 <literal type="string">"tables supported."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableLocalReferenceForeignKeys</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_manual_changes_to_shards"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables dropping and truncating known shards."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set to false by default. If set to true, enables "</literal>
					 <literal type="string">"dropping and truncating shards on the coordinator "</literal>
					 <literal type="string">"(or the workers with metadata)"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableManualChangesToShards</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_manual_metadata_changes_for_user"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables some helper UDFs to modify metadata "</literal>
					 <literal type="string">"for the given user"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableManualMetadataChangesForUser</name></expr></argument>,
		<argument><expr><literal type="string">""</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_metadata_sync"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables object and metadata syncing."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableMetadataSync</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_repartition_joins"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allows Citus to repartition data between nodes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableRepartitionJoins</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_repartitioned_insert_select"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables repartitioned INSERT/SELECTs"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableRepartitionedInsertSelect</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_router_execution"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables router execution"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableRouterExecution</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_single_hash_repartition_joins"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables single hash repartitioning between hash "</literal>
					 <literal type="string">"distributed tables"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableSingleHashRepartitioning</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_statistics_collection"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables sending basic usage statistics to Citus."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Citus uploads daily anonymous usage reports containing "</literal>
					 <literal type="string">"rounded node count, shard size, distributed table count, "</literal>
					 <literal type="string">"and operating system name. This configuration value controls "</literal>
					 <literal type="string">"whether these reports are sent."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableStatisticsCollection</name></expr></argument>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_LIBCURL</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_CITUS_STATISTICS_COLLECTION</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<argument><expr><name>true</name></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<argument><expr><name>false</name></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>StatisticsCollectionGucCheckHook</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_unique_job_ids"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables unique job IDs by prepending the local process ID and "</literal>
					 <literal type="string">"group ID. This should usually be enabled, but can be disabled "</literal>
					 <literal type="string">"for repeatable output in regression tests."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableUniqueJobIds</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_unsafe_triggers"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables arbitrary triggers on distributed tables which may cause "</literal>
					 <literal type="string">"visibility and deadlock issues. Use at your own risk."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableUnsafeTriggers</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_unsupported_feature_messages"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Controls showing of some citus related messages. It is intended to "</literal>
					 <literal type="string">"be used before vanilla tests to stop unwanted citus messages."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableUnsupportedFeatureMessages</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enable_version_checks"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables version checks during CREATE/ALTER EXTENSION commands"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnableVersionChecks</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enforce_foreign_key_restrictions"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enforce restrictions while querying distributed/reference "</literal>
					 <literal type="string">"tables with foreign keys"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, cascading modifications from reference tables "</literal>
					 <literal type="string">"to distributed tables are traced and acted accordingly "</literal>
					 <literal type="string">"to avoid creating distributed deadlocks and ensure correctness."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnforceForeignKeyRestrictions</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.enforce_object_restrictions_for_local_objects"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Controls some restrictions for local objects."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>EnforceLocalObjectRestrictions</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.executor_slow_start_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Time to wait between opening connections to the same worker node"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When the individual tasks of a multi-shard query take very "</literal>
					 <literal type="string">"little time, they can often be finished over a single (often "</literal>
					 <literal type="string">"already cached) connection. To avoid redundantly opening "</literal>
					 <literal type="string">"additional connections, the executor waits between connection "</literal>
					 <literal type="string">"attempts for the configured number of milliseconds. At the end "</literal>
					 <literal type="string">"of the interval, it increases the number of connections it is "</literal>
					 <literal type="string">"allowed to open next time."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ExecutorSlowStartInterval</name></expr></argument>,
		<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.explain_all_tasks"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables showing output for all tasks in Explain."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The Explain command for distributed queries shows "</literal>
					 <literal type="string">"the remote plan for a single task by default. When "</literal>
					 <literal type="string">"this configuration entry is enabled, the plan for "</literal>
					 <literal type="string">"all tasks is shown, but the Explain takes longer."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ExplainAllTasks</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.explain_analyze_sort_method"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the sorting method for EXPLAIN ANALYZE queries."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This parameter is intended for testing. It is developed "</literal>
					 <literal type="string">"to get consistent regression test outputs. When it is set "</literal>
					 <literal type="string">"to 'time', EXPLAIN ANALYZE output is sorted by execution "</literal>
					 <literal type="string">"duration on workers. When it is set to 'taskId', it is "</literal>
					 <literal type="string">"sorted by task id. By default, it is set to 'time'; but "</literal>
					 <literal type="string">"in regression tests, it's set to 'taskId' for consistency."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ExplainAnalyzeSortMethod</name></expr></argument>,
		<argument><expr><name>EXPLAIN_ANALYZE_SORT_BY_TIME</name></expr></argument>, <argument><expr><name>explain_analyze_sort_method_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.explain_distributed_queries"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables Explain for distributed queries."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, the Explain command shows remote and local "</literal>
					 <literal type="string">"plans when used with a distributed query. It is enabled "</literal>
					 <literal type="string">"by default, but can be disabled for regression tests."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ExplainDistributedQueries</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.force_max_query_parallelization"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Open as many connections as possible to maximize query "</literal>
					 <literal type="string">"parallelization"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, Citus will force the executor to use "</literal>
					 <literal type="string">"as many connections as possible while executing a "</literal>
					 <literal type="string">"parallel distributed query. If not enabled, the executor "</literal>
					 <literal type="string">"might choose to use less connections to optimize overall "</literal>
					 <literal type="string">"query execution throughput. Internally, setting this true "</literal>
					 <literal type="string">"will end up with using one connection per task."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ForceMaxQueryParallelization</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.function_opens_transaction_block"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Open transaction blocks for function calls"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, Citus will always send a BEGIN to workers when "</literal>
					 <literal type="string">"running distributed queres in a function. When disabled, the "</literal>
					 <literal type="string">"queries may be committed immediately after the statemnent "</literal>
					 <literal type="string">"completes. Disabling this flag is dangerous, it is only provided "</literal>
					 <literal type="string">"for backwards compatibility with pre-8.2 behaviour."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>FunctionOpensTransactionBlock</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.grep_remote_commands"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Applies \"command\" like citus.grep_remote_commands, if returns "</literal>
			<literal type="string">"true, the command is logged."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>GrepRemoteCommands</name></expr></argument>,
		<argument><expr><literal type="string">""</literal></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.hide_citus_dependent_objects"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Hides some objects, which depends on citus extension, from pg meta class queries. "</literal>
			<literal type="string">"It is intended to be used only before postgres vanilla tests to not break them."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>HideCitusDependentObjects</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * This was a GUC we added on Citus 11.0.1, and
	 * replaced with another name on 11.0.2 via #5920.
	 * However, as this GUC has been used in
	 * citus_shard_indexes_on_worker-11.0.1
	 * script. So, it is not easy to completely get rid
	 * of the GUC. Especially with PG 15+, Postgres verifies
	 * existence of the GUCs that are used. So, without this
	 * CREATE EXTENSION fails.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.hide_shards_from_app_name_prefixes"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Deprecated, use citus.show_shards_for_app_name_prefixes"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DeprecatedEmptyString</name></expr></argument>,
		<argument><expr><literal type="string">""</literal></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.isolation_test_session_process_id"</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>IsolationTestSessionProcessID</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.isolation_test_session_remote_process_id"</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>IsolationTestSessionRemoteProcessID</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.limit_clause_row_fetch_count"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Number of rows to fetch per task for limit clause optimization."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Select queries get partitioned and executed as smaller "</literal>
					 <literal type="string">"tasks. In some cases, select queries with limit clauses "</literal>
					 <literal type="string">"may need to fetch all rows from each task to generate "</literal>
					 <literal type="string">"results. In those cases, and where an approximation would "</literal>
					 <literal type="string">"produce meaningful results, this configuration value sets "</literal>
					 <literal type="string">"the number of rows to fetch from each task."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LimitClauseRowFetchCount</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.local_copy_flush_threshold"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the threshold for local copy to be flushed."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LocalCopyFlushThresholdByte</name></expr></argument>,
		<argument><expr><literal type="number">512</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_BYTE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.local_hostname"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the hostname when connecting back to itself."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"For some operations nodes, mostly the coordinator, connect back to "</literal>
					 <literal type="string">"itself. When configuring SSL certificates it sometimes is required "</literal>
					 <literal type="string">"to use a specific hostname to match the CN of the certificate when "</literal>
					 <literal type="string">"verify-full is used."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LocalHostName</name></expr></argument>,
		<argument><expr><literal type="string">"localhost"</literal></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.local_shared_pool_size"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Sets the maximum number of connections allowed for the shards on the "</literal>
			<literal type="string">"local node across all the backends from this node. Setting to -1 disables "</literal>
			<literal type="string">"connections throttling. Setting to 0 makes it auto-adjust, meaning "</literal>
			<literal type="string">"equal to the half of max_connections on the coordinator."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"As a rule of thumb, the value should be at most equal to the "</literal>
					 <literal type="string">"max_connections on the local node."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LocalSharedPoolSize</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>LocalPoolSizeGucShowHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.local_table_join_policy"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"defines the behaviour when a distributed table "</literal>
					 <literal type="string">"is joined with a local table"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"There are 4 values available. The default, 'auto' will recursively plan "</literal>
			<literal type="string">"distributed tables if there is a constant filter on a unique index. "</literal>
			<literal type="string">"'prefer-local' will choose local tables if possible. "</literal>
			<literal type="string">"'prefer-distributed' will choose distributed tables if possible. "</literal>
			<literal type="string">"'never' will basically skip local table joins."</literal></expr></argument>
			)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LocalTableJoinPolicy</name></expr></argument>,
		<argument><expr><name>LOCAL_JOIN_POLICY_AUTO</name></expr></argument>,
		<argument><expr><name>local_table_join_policies</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.log_distributed_deadlock_detection"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log distributed deadlock detection related processing in "</literal>
					 <literal type="string">"the server log"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LogDistributedDeadlockDetection</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.log_intermediate_results"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log intermediate results sent to other nodes"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LogIntermediateResults</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.log_local_commands"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log queries that are executed locally, can be overriden by "</literal>
					 <literal type="string">"citus.log_remote_commands"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LogLocalCommands</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.log_multi_join_order"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Logs the distributed join order to the server log."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"We use this private configuration entry as a debugging aid. "</literal>
					 <literal type="string">"If enabled, we print the distributed join order."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LogMultiJoinOrder</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.log_remote_commands"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log queries sent to other nodes in the server log"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LogRemoteCommands</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.logical_replication_timeout"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the timeout to error out when logical replication is used"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Citus uses logical replication when it moves/replicates shards. "</literal>
					 <literal type="string">"This setting determines when Citus gives up waiting for progress "</literal>
					 <literal type="string">"during logical replication and errors out."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>LogicalReplicationTimeout</name></expr></argument>,
		<argument><expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <literal type="number">24</literal> <operator>*</operator> <literal type="number">3600</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name> <operator>|</operator> <name>GUC_UNIT_MS</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_adaptive_executor_pool_size"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of connections per worker node used by "</literal>
					 <literal type="string">"the adaptive executor to execute a multi-shard command"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The adaptive executor may open multiple connections per worker "</literal>
					 <literal type="string">"node when running multi-shard commands to parallelize the command "</literal>
					 <literal type="string">"across multiple cores on the worker. This setting specifies the "</literal>
					 <literal type="string">"maximum number of connections it will open. The number of "</literal>
					 <literal type="string">"connections is also bounded by the number of shards on the node. "</literal>
					 <literal type="string">"This setting can be used to reduce the memory usage of a query "</literal>
					 <literal type="string">"and allow a higher degree of concurrency when concurrent "</literal>
					 <literal type="string">"multi-shard queries open too many connections to a worker."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxAdaptiveExecutorPoolSize</name></expr></argument>,
		<argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_background_task_executors"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Sets the maximum number of parallel task executor workers for scheduled "</literal>
			<literal type="string">"background tasks"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Controls the maximum number of parallel task executors the task monitor "</literal>
			<literal type="string">"can create for scheduled background tasks. Note that the value is not effective "</literal>
			<literal type="string">"if it is set a value higher than 'max_worker_processes' postgres parameter . It is "</literal>
			<literal type="string">"also not guaranteed to have exactly specified number of parallel task executors "</literal>
			<literal type="string">"because total background worker count is shared by all background workers. The value "</literal>
			<literal type="string">"represents the possible maximum number of task executors."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxBackgroundTaskExecutors</name></expr></argument>,
		<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_BG_TASK_EXECUTORS</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_cached_connection_lifetime"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum lifetime of cached connections to other nodes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxCachedConnectionLifetime</name></expr></argument>,
		<argument><expr><literal type="number">10</literal> <operator>*</operator> <name>MS_PER_MINUTE</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_cached_conns_per_worker"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of connections to cache per worker."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Each backend opens connections to the workers to query the "</literal>
					 <literal type="string">"shards. At the end of the transaction, the configurated number "</literal>
					 <literal type="string">"of connections is kept open to speed up subsequent commands. "</literal>
					 <literal type="string">"Increasing this value will reduce the latency of multi-shard "</literal>
					 <literal type="string">"queries, but increases overhead on the workers"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxCachedConnectionsPerWorker</name></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_client_connections"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of connections regular clients can make"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"To ensure that a Citus cluster has a sufficient number of "</literal>
					 <literal type="string">"connection slots to serve queries internally, it can be "</literal>
					 <literal type="string">"useful to reserve connection slots for Citus internal "</literal>
					 <literal type="string">"connections. When max_client_connections is set to a value "</literal>
					 <literal type="string">"below max_connections, the remaining connections are reserved "</literal>
					 <literal type="string">"for connections between Citus nodes. This does not affect "</literal>
					 <literal type="string">"superuser_reserved_connections. If set to -1, no connections "</literal>
					 <literal type="string">"are reserved."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxClientConnections</name></expr></argument>,
		<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MaxConnections</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_high_priority_background_processes"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of background processes "</literal>
					 <literal type="string">"that can have their CPU priority increased at the same "</literal>
					 <literal type="string">"time on a specific node."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This setting is useful to make sure logical replication "</literal>
					 <literal type="string">"senders don't take over the CPU of the entire machine."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxHighPriorityBackgroundProcesess</name></expr></argument>,
		<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_intermediate_result_size"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of the intermediate results in KB for "</literal>
					 <literal type="string">"CTEs and complex subqueries."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxIntermediateResult</name></expr></argument>,
		<argument><expr><literal type="number">1048576</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_KILOBYTES</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_KB</name> <operator>|</operator> <name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_matview_size_to_auto_recreate"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum size of materialized views in MB to "</literal>
					 <literal type="string">"automatically distribute them."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxMatViewSizeToAutoRecreate</name></expr></argument>,
		<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MB</name> <operator>|</operator> <name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_rebalancer_logged_ignored_moves"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of ignored moves the rebalance logs"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxRebalancerLoggedIgnoredMoves</name></expr></argument>,
		<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_shared_pool_size"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of connections allowed per worker node "</literal>
					 <literal type="string">"across all the backends from this node. Setting to -1 disables "</literal>
					 <literal type="string">"connections throttling. Setting to 0 makes it auto-adjust, meaning "</literal>
					 <literal type="string">"equal to max_connections on the coordinator."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"As a rule of thumb, the value should be at most equal to the "</literal>
					 <literal type="string">"max_connections on the remote nodes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxSharedPoolSize</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>MaxSharedPoolSizeGucShowHook</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.max_worker_nodes_tracked"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of worker nodes that are tracked."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Worker nodes' network locations, their membership and "</literal>
					 <literal type="string">"health status are tracked in a shared hash table on "</literal>
					 <literal type="string">"the master node. This configuration value limits the "</literal>
					 <literal type="string">"size of the hash table, and consequently the maximum "</literal>
					 <literal type="string">"number of worker nodes that can be tracked. "</literal>
					 <literal type="string">"Citus keeps some information about the worker nodes "</literal>
					 <literal type="string">"in the shared memory for certain optimizations. The "</literal>
					 <literal type="string">"optimizations are enforced up to this number of worker "</literal>
					 <literal type="string">"nodes. Any additional worker nodes may not benefit from "</literal>
					 <literal type="string">"the optimizations."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MaxWorkerNodesTracked</name></expr></argument>,
		<argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.metadata_sync_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the time to wait between metadata syncs."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"metadata sync needs to run every so often "</literal>
					 <literal type="string">"to synchronize metadata to metadata nodes "</literal>
					 <literal type="string">"that are out of sync."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MetadataSyncInterval</name></expr></argument>,
		<argument><expr><literal type="number">60</literal> <operator>*</operator> <name>MS_PER_SECOND</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <name>MS_PER_DAY</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.metadata_sync_retry_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the interval to retry failed metadata syncs."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"metadata sync needs to run every so often "</literal>
					 <literal type="string">"to synchronize metadata to metadata nodes "</literal>
					 <literal type="string">"that are out of sync."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MetadataSyncRetryInterval</name></expr></argument>,
		<argument><expr><literal type="number">5</literal> <operator>*</operator> <name>MS_PER_SECOND</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <name>MS_PER_DAY</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Previously we setting this configuration parameter
	 * in the fly for failure tests schedule.
	 * However, PG15 doesn't allow that anymore: reserved prefixes
	 * like "citus" cannot be used to set non-existing GUCs.
	 * Relevant PG commit: 88103567cb8fa5be46dc9fac3e3b8774951a2be7
	 */</comment>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.mitmfifo"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the citus mitm fifo path for failure tests"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This GUC is only used for testing."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MitmfifoEmptyString</name></expr></argument>,
		<argument><expr><literal type="string">""</literal></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.multi_shard_modify_mode"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the connection type for multi shard modify queries"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MultiShardConnectionType</name></expr></argument>,
		<argument><expr><name>PARALLEL_CONNECTION</name></expr></argument>, <argument><expr><name>multi_shard_modify_connection_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.multi_task_query_log_level"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the level of multi task query execution log messages"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>MultiTaskQueryLogLevel</name></expr></argument>,
		<argument><expr><name>CITUS_LOG_LEVEL_OFF</name></expr></argument>, <argument><expr><name>log_level_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.next_cleanup_record_id"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the next cleanup record ID to use in operation creation."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Cleanup record IDs are normally generated using a sequence. If "</literal>
					 <literal type="string">"next_cleanup_record_id is set to a non-zero value, cleanup record IDs will "</literal>
					 <literal type="string">"instead be generated by incrementing from the value of "</literal>
					 <literal type="string">"this GUC and this will be reflected in the GUC. This is "</literal>
					 <literal type="string">"mainly useful to ensure consistent cleanup record IDs when running "</literal>
					 <literal type="string">"tests in parallel."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>NextCleanupRecordId</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.next_operation_id"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the next operation ID to use in operation creation."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Operation IDs are normally generated using a sequence. If "</literal>
					 <literal type="string">"next_operation_id is set to a non-zero value, operation IDs will "</literal>
					 <literal type="string">"instead be generated by incrementing from the value of "</literal>
					 <literal type="string">"this GUC and this will be reflected in the GUC. This is "</literal>
					 <literal type="string">"mainly useful to ensure consistent operation IDs when running "</literal>
					 <literal type="string">"tests in parallel."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>NextOperationId</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.next_placement_id"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the next placement ID to use in placement creation."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Placement IDs are normally generated using a sequence. If "</literal>
					 <literal type="string">"next_placement_id is set to a non-zero value, placement IDs will "</literal>
					 <literal type="string">"instead be generated by incrementing from the value of "</literal>
					 <literal type="string">"this GUC and this will be reflected in the GUC. This is "</literal>
					 <literal type="string">"mainly useful to ensure consistent placement IDs when running "</literal>
					 <literal type="string">"tests in parallel."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>NextPlacementId</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.next_shard_id"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Set the next shard ID to use in shard creation."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shard IDs are normally generated using a sequence. If "</literal>
					 <literal type="string">"next_shard_id is set to a non-zero value, shard IDs will "</literal>
					 <literal type="string">"instead be generated by incrementing from the value of "</literal>
					 <literal type="string">"this GUC and this will be reflected in the GUC. This is "</literal>
					 <literal type="string">"mainly useful to ensure consistent shard IDs when running "</literal>
					 <literal type="string">"tests in parallel."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>NextShardId</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.node_connection_timeout"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum duration to connect to worker nodes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>NodeConnectionTimeout</name></expr></argument>,
		<argument><expr><literal type="number">30</literal> <operator>*</operator> <name>MS_PER_SECOND</name></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <name>MS</name></expr></argument>, <argument><expr><name>MS_PER_HOUR</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.node_conninfo"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets parameters used for outbound connections."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>NodeConninfo</name></expr></argument>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_SSL</name></cpp:ifdef>
		<argument><expr><literal type="string">"sslmode=require"</literal></expr></argument>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<argument><expr><literal type="string">"sslmode=prefer"</literal></expr></argument>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name></expr></argument>,
		<argument><expr><name>NodeConninfoGucCheckHook</name></expr></argument>,
		<argument><expr><name>NodeConninfoGucAssignHook</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.override_table_visibility"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables replacing occurrrences of pg_catalog.pg_table_visible() "</literal>
					 <literal type="string">"with pg_catalog.citus_table_visible()"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, shards on the Citus MX worker (data) nodes would be "</literal>
					 <literal type="string">"filtered out by many psql commands to provide better user "</literal>
					 <literal type="string">"experience."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>OverrideTableVisibility</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.prevent_incomplete_connection_establishment"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, the executor waits until all the connections "</literal>
					 <literal type="string">"are successfully established."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Under some load, the executor may decide to establish some "</literal>
					 <literal type="string">"extra connections to further parallelize the execution. However, "</literal>
					 <literal type="string">"before the connection establishment is done, the execution might "</literal>
					 <literal type="string">"have already finished. When this GUC is set to true, the execution "</literal>
					 <literal type="string">"waits for such connections to be established."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>PreventIncompleteConnectionEstablishment</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.propagate_session_settings_for_loopback_connection"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"When enabled, rebalancer propagates all the allowed GUC settings to new connections."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>PropagateSessionSettingsForLoopbackConnection</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.propagate_set_commands"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets which SET commands are propagated to workers."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>PropagateSetCommands</name></expr></argument>,
		<argument><expr><name>PROPSETCMD_NONE</name></expr></argument>,
		<argument><expr><name>propagate_set_commands_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.recover_2pc_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the time to wait between recovering 2PCs."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"2PC transaction recovery needs to run every so often "</literal>
					 <literal type="string">"to clean up records in pg_dist_transaction and "</literal>
					 <literal type="string">"potentially roll failed 2PCs forward. This setting "</literal>
					 <literal type="string">"determines how often recovery should run, "</literal>
					 <literal type="string">"use -1 to disable."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>Recover2PCInterval</name></expr></argument>,
		<argument><expr><literal type="number">60</literal> <operator>*</operator> <name>MS_PER_SECOND</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">7</literal> <operator>*</operator> <name>MS_PER_DAY</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.remote_copy_flush_threshold"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the threshold for remote copy to be flushed."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When sending data over remote connections via the COPY protocol, "</literal>
					 <literal type="string">"bytes are first buffered internally by libpq. If the number of "</literal>
					 <literal type="string">"bytes buffered exceeds the threshold, Citus waits for all the "</literal>
					 <literal type="string">"bytes to flush."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>RemoteCopyFlushThreshold</name></expr></argument>,
		<argument><expr><literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_BYTE</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.remote_task_check_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the frequency at which we check job statuses."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The master node assigns tasks to workers nodes, and "</literal>
					 <literal type="string">"then regularly checks with them about each task's "</literal>
					 <literal type="string">"progress. This configuration value sets the time "</literal>
					 <literal type="string">"interval between two consequent checks."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>RemoteTaskCheckInterval</name></expr></argument>,
		<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.repartition_join_bucket_count_per_node"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the bucket size for repartition joins per node"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Repartition joins create buckets in each node and "</literal>
					 <literal type="string">"uses those to shuffle data around nodes. "</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>RepartitionJoinBucketCountPerNode</name></expr></argument>,
		<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* deprecated setting */</comment>
	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.replicate_reference_tables_on_activate"</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>DeprecatedReplicateReferenceTablesOnActivate</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.replication_model"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Deprecated. Please use citus.shard_replication_factor instead"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Shard replication model is determined by the shard replication factor. "</literal>
			<literal type="string">"'statement' replication is used only when the replication factor is one."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ReplicationModel</name></expr></argument>,
		<argument><expr><name>REPLICATION_MODEL_STREAMING</name></expr></argument>,
		<argument><expr><name>replication_model_options</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>WarnIfReplicationModelIsSet</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.running_under_isolation_test"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Only useful for testing purposes, when set to true, Citus does some "</literal>
			<literal type="string">"tricks to implement useful isolation tests with rebalancing. Should "</literal>
			<literal type="string">"never be set to true on production systems "</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"for details of the tricks implemented, refer to the source code"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>RunningUnderIsolationTest</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.select_opens_transaction_block"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Open transaction blocks for SELECT commands"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, Citus will always send a BEGIN to workers when "</literal>
					 <literal type="string">"running a distributed SELECT in a transaction block (the "</literal>
					 <literal type="string">"default). When disabled, Citus will only send BEGIN before "</literal>
					 <literal type="string">"the first write or other operation that requires a distributed "</literal>
					 <literal type="string">"transaction, meaning the SELECT on the worker commits "</literal>
					 <literal type="string">"immediately, releasing any locks and apply any changes made "</literal>
					 <literal type="string">"through function calls even if the distributed transaction "</literal>
					 <literal type="string">"aborts."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>SelectOpensTransactionBlock</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.shard_count"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the number of shards for a new hash-partitioned table "</literal>
					 <literal type="string">"created with create_distributed_table()."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ShardCount</name></expr></argument>,
		<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_SHARD_COUNT</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.shard_replication_factor"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the replication factor for shards."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shards are replicated across nodes according to this "</literal>
					 <literal type="string">"replication factor. Note that shards read this "</literal>
					 <literal type="string">"configuration value at sharded table creation time, "</literal>
					 <literal type="string">"and later reuse the initially read value."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ShardReplicationFactor</name></expr></argument>,
		<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>MAX_SHARD_REPLICATION_FACTOR</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.show_shards_for_app_name_prefixes"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"If application_name starts with one of these values, show shards"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Citus places distributed tables and shards in the same schema. "</literal>
					 <literal type="string">"That can cause confusion when inspecting the list of tables on "</literal>
					 <literal type="string">"a node with shards. By default the shards are hidden from "</literal>
					 <literal type="string">"pg_class. This GUC can be used to show the shards to certain "</literal>
					 <literal type="string">"applications based on the application_name of the connection. "</literal>
					 <literal type="string">"The default is empty string, which hides shards from all "</literal>
					 <literal type="string">"applications. This behaviour can be overridden using the "</literal>
					 <literal type="string">"citus.override_table_visibility setting"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ShowShardsForAppNamePrefixes</name></expr></argument>,
		<argument><expr><literal type="string">""</literal></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>ShowShardsForAppNamePrefixesCheckHook</name></expr></argument>,
		<argument><expr><name>ShowShardsForAppNamePrefixesAssignHook</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.skip_advisory_lock_permission_checks"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Postgres would normally enforce some "</literal>
					 <literal type="string">"ownership checks while acquiring locks. "</literal>
					 <literal type="string">"When this setting is 'on', Citus skips "</literal>
					 <literal type="string">"ownership checks on internal advisory "</literal>
					 <literal type="string">"locks."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>SkipAdvisoryLockPermissionChecks</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>GUC_SUPERUSER_ONLY</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.skip_constraint_validation"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Skip validation of constraints"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Validating constraints is a costly operation which effects Citus' "</literal>
					 <literal type="string">"performance negatively. With this GUC set to true, we skip "</literal>
					 <literal type="string">"validating them. Constraint validation can be redundant for some "</literal>
					 <literal type="string">"cases. For instance, when moving a shard, which has already "</literal>
					 <literal type="string">"validated constraints at the source; we don't need to validate "</literal>
					 <literal type="string">"the constraints again at the destination."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>SkipConstraintValidation</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.skip_jsonb_validation_in_copy"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Skip validation of JSONB columns on the coordinator during COPY "</literal>
					 <literal type="string">"into a distributed table"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Parsing large JSON objects may incur significant CPU overhead, "</literal>
					 <literal type="string">"which can lower COPY throughput. If this GUC is set (the default), "</literal>
					 <literal type="string">"JSON parsing is skipped on the coordinator, which means you cannot "</literal>
					 <literal type="string">"see the line number in case of malformed JSON, but throughput will "</literal>
					 <literal type="string">"be higher. This setting does not apply if the input format is "</literal>
					 <literal type="string">"binary."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>SkipJsonbValidationInCopy</name></expr></argument>,
		<argument><expr><name>true</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><literal type="number">0</literal></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.sort_returning"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sorts the RETURNING clause to get consistent test output"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"This feature is not intended for users. It is developed "</literal>
					 <literal type="string">"to get consistent regression test outputs. When enabled, "</literal>
					 <literal type="string">"the RETURNING clause returns the tuples sorted. The sort "</literal>
					 <literal type="string">"is done for all the entries, starting from the first one. "</literal>
					 <literal type="string">"Finally, the sorting is done in ASC order."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>SortReturning</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * It takes about 140 bytes of shared memory to store one row, therefore
	 * this setting should be used responsibly. setting it to 10M will require
	 * 1.4GB of shared memory.
	 */</comment>
	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.stat_statements_max"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Determines maximum number of statements tracked by "</literal>
					 <literal type="string">"citus_stat_statements."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>StatStatementsMax</name></expr></argument>,
		<argument><expr><literal type="number">50000</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>, <argument><expr><literal type="number">10000000</literal></expr></argument>,
		<argument><expr><name>PGC_POSTMASTER</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.stat_statements_purge_interval"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Determines time interval in seconds for "</literal>
					 <literal type="string">"citus_stat_statements to purge expired entries."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>StatStatementsPurgeInterval</name></expr></argument>,
		<argument><expr><literal type="number">10</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_SIGHUP</name></expr></argument>,
		<argument><expr><name>GUC_UNIT_MS</name> <operator>|</operator> <name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.stat_statements_track"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(
			<argument><expr><literal type="string">"Enables/Disables the stats collection for citus_stat_statements."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables the stats collection when set to 'all'. "</literal>
					 <literal type="string">"Disables when set to 'none'. Disabling can be useful for "</literal>
					 <literal type="string">"avoiding extra CPU cycles needed for the calculations."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>StatStatementsTrack</name></expr></argument>,
		<argument><expr><name>STAT_STATEMENTS_TRACK_NONE</name></expr></argument>,
		<argument><expr><name>stat_statements_track_options</name></expr></argument>,
		<argument><expr><name>PGC_SUSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.subquery_pushdown"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Usage of this GUC is highly discouraged, please read the long "</literal>
					 <literal type="string">"description"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When enabled, the planner skips many correctness checks "</literal>
					 <literal type="string">"for subqueries and pushes down the queries to shards as-is. "</literal>
					 <literal type="string">"It means that the queries are likely to return wrong results "</literal>
					 <literal type="string">"unless the user is absolutely sure that pushing down the "</literal>
					 <literal type="string">"subquery is safe. This GUC is maintained only for backward "</literal>
					 <literal type="string">"compatibility, no new users are supposed to use it. The planner "</literal>
					 <literal type="string">"is capable of pushing down as much computation as possible to the "</literal>
					 <literal type="string">"shards depending on the query."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>SubqueryPushdown</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_NO_SHOW_ALL</name></expr></argument>,
		<argument><expr><name>NoticeIfSubqueryPushdownEnabled</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.task_assignment_policy"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the policy to use when assigning tasks to worker nodes."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The master node assigns tasks to worker nodes based on shard "</literal>
					 <literal type="string">"locations. This configuration value specifies the policy to "</literal>
					 <literal type="string">"use when making these assignments. The greedy policy aims to "</literal>
					 <literal type="string">"evenly distribute tasks across worker nodes, first-replica just "</literal>
					 <literal type="string">"assigns tasks in the order shard placements were created, "</literal>
					 <literal type="string">"and the round-robin policy assigns tasks to worker nodes in "</literal>
					 <literal type="string">"a round-robin fashion."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>TaskAssignmentPolicy</name></expr></argument>,
		<argument><expr><name>TASK_ASSIGNMENT_GREEDY</name></expr></argument>,
		<argument><expr><name>task_assignment_policy_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.task_executor_type"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the executor type to be used for distributed queries."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"The master node chooses between two different executor types "</literal>
					 <literal type="string">"when executing a distributed query.The adaptive executor is "</literal>
					 <literal type="string">"optimal for simple key-value lookup queries and queries that "</literal>
					 <literal type="string">"involve aggregations and/or co-located joins on multiple shards. "</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>TaskExecutorType</name></expr></argument>,
		<argument><expr><name>MULTI_EXECUTOR_ADAPTIVE</name></expr></argument>,
		<argument><expr><name>task_executor_type_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>WarnIfDeprecatedExecutorUsed</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.use_citus_managed_tables"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Allows new local tables to be accessed on workers"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Adds all newly created tables to Citus metadata by default, "</literal>
					 <literal type="string">"when enabled. Set to false by default."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>AddAllLocalTablesToMetadata</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.use_secondary_nodes"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the policy to use when choosing nodes for SELECT queries."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ReadFromSecondaries</name></expr></argument>,
		<argument><expr><name>USE_SECONDARY_NODES_NEVER</name></expr></argument>, <argument><expr><name>use_secondary_nodes_options</name></expr></argument>,
		<argument><expr><name>PGC_SU_BACKEND</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomIntVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.values_materialization_threshold"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Sets the maximum number of rows allowed for pushing down "</literal>
					 <literal type="string">"VALUES clause in multi-shard queries. If the number of "</literal>
					 <literal type="string">"rows exceeds the threshold, the VALUES is materialized "</literal>
					 <literal type="string">"via pull-push execution. When set to -1, materialization "</literal>
					 <literal type="string">"is disabled. When set to 0, all VALUES are materialized."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"When the VALUES is pushed down (i.e., not materialized), "</literal>
					 <literal type="string">"the VALUES clause needs to be deparsed for every shard on "</literal>
					 <literal type="string">"the coordinator - and parsed on the workers. As this "</literal>
					 <literal type="string">"setting increased, the associated overhead is multiplied "</literal>
					 <literal type="string">"by the shard count. When materialized, the VALUES is "</literal>
					 <literal type="string">"deparsed and parsed once. The downside of materialization "</literal>
					 <literal type="string">"is that Postgres may choose a poor plan when joining "</literal>
					 <literal type="string">"the materialized result with tables."</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>ValuesMaterializationThreshold</name></expr></argument>,
		<argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>INT_MAX</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomStringVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.version"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Shows the Citus library version"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>CitusVersion</name></expr></argument>,
		<argument><expr><name>CITUS_VERSION</name></expr></argument>,
		<argument><expr><name>PGC_INTERNAL</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomEnumVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.worker_min_messages"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Log messages from workers only if their log level is at or above "</literal>
					 <literal type="string">"the configured level"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>WorkerMinMessages</name></expr></argument>,
		<argument><expr><name>NOTICE</name></expr></argument>,
		<argument><expr><name>log_level_options</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>DefineCustomBoolVariable</name><argument_list>(
		<argument><expr><literal type="string">"citus.writable_standby_coordinator"</literal></expr></argument>,
		<argument><expr><call><name>gettext_noop</name><argument_list>(<argument><expr><literal type="string">"Enables simple DML via a streaming replica of the coordinator"</literal></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>,
		<argument><expr><operator>&amp;</operator><name>WritableStandbyCoordinator</name></expr></argument>,
		<argument><expr><name>false</name></expr></argument>,
		<argument><expr><name>PGC_USERSET</name></expr></argument>,
		<argument><expr><name>GUC_STANDARD</name></expr></argument>,
		<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* warn about config items in the citus namespace that are not registered above */</comment>
	<expr_stmt><expr><call><name>EmitWarningsOnPlaceholders</name><argument_list>(<argument><expr><literal type="string">"citus"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>OverridePostgresConfigAssignHooks</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * OverridePostgresConfigAssignHooks overrides GUC assign hooks where we want
 * custom behaviour.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>OverridePostgresConfigAssignHooks</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>guc_vars</name> <init>= <expr><call><name>get_guc_variables</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>gucCount</name> <init>= <expr><call><name>GetNumConfigOptions</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>gucIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>gucIndex</name> <operator>&lt;</operator> <name>gucCount</name></expr>;</condition> <incr><expr><name>gucIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name><name>struct</name> <name>config_generic</name></name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>(</operator>struct <name>config_generic</name> <operator>*</operator><operator>)</operator> <name><name>guc_vars</name><index>[<expr><name>gucIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><literal type="string">"application_name"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name><name>struct</name> <name>config_string</name></name> <modifier>*</modifier></type><name>stringVar</name> <init>= <expr><operator>(</operator>struct <name>config_string</name> <operator>*</operator><operator>)</operator> <name>var</name></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>OldApplicationNameAssignHook</name> <operator>=</operator> <name><name>stringVar</name><operator>-&gt;</operator><name>assign_hook</name></name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>stringVar</name><operator>-&gt;</operator><name>assign_hook</name></name> <operator>=</operator> <name>ApplicationNameAssignHook</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>


<comment type="block">/*
 * We don't want to allow values less than 1.0. However, we define -1 as the value to disable
 * distributed deadlock checking. Here we enforce our special constraint.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ErrorIfNotASuitableDeadlockFactor</name><parameter_list>(<parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>&lt;=</operator> <literal type="number">1.0</literal> <operator>&amp;&amp;</operator> <operator>*</operator><name>newval</name> <operator>!=</operator> <operator>-</operator><literal type="number">1.0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						  <call><name>errmsg</name><argument_list>(
							  <argument><expr><literal type="string">"citus.distributed_deadlock_detection_factor cannot be less than 1. "</literal>
							  <literal type="string">"To disable distributed deadlock detection set the value to -1."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * WarnIfDeprecatedExecutorUsed prints a warning and sets the config value to
 * adaptive executor (a.k.a., ignores real-time executor).
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>WarnIfDeprecatedExecutorUsed</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>==</operator> <name>DUMMY_REAL_TIME_EXECUTOR_ENUM_VALUE</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_INVALID_PARAMETER_VALUE</name></expr></argument>)</argument_list></call><operator>,</operator>
						  <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Ignoring the setting, real-time executor is "</literal>
								 <literal type="string">"deprecated"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* adaptive executor is superset of real-time, so switch to that */</comment>
		<expr_stmt><expr><operator>*</operator><name>newval</name> <operator>=</operator> <name>MULTI_EXECUTOR_ADAPTIVE</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NoticeIfSubqueryPushdownEnabled prints a notice when a user sets
 * citus.subquery_pushdown to ON. It doesn't print the notice if the
 * value is already true.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>NoticeIfSubqueryPushdownEnabled</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* notice only when the value changes */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name> <operator>==</operator> <name>true</name> <operator>&amp;&amp;</operator> <name>SubqueryPushdown</name> <operator>==</operator> <name>false</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING_DEPRECATED_FEATURE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Setting citus.subquery_pushdown flag is "</literal>
								<literal type="string">"discouraged becuase it forces the planner "</literal>
								<literal type="string">"to pushdown certain queries, skipping "</literal>
								<literal type="string">"relevant correctness checks."</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(
							 <argument><expr><literal type="string">"When enabled, the planner skips many correctness checks "</literal>
							 <literal type="string">"for subqueries and pushes down the queries to shards as-is. "</literal>
							 <literal type="string">"It means that the queries are likely to return wrong results "</literal>
							 <literal type="string">"unless the user is absolutely sure that pushing down the "</literal>
							 <literal type="string">"subquery is safe. This GUC is maintained only for backward "</literal>
							 <literal type="string">"compatibility, no new users are supposed to use it. The planner "</literal>
							 <literal type="string">"is capable of pushing down as much computation as possible to the "</literal>
							 <literal type="string">"shards depending on the query."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * WarnIfReplicationModelIsSet prints a warning when a user sets
 * citus.replication_model.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>WarnIfReplicationModelIsSet</name><parameter_list>(<parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* print a warning only when user sets the guc */</comment>
	<if_stmt><if>if <condition>(<expr><name>source</name> <operator>==</operator> <name>PGC_S_SESSION</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_WARNING_DEPRECATED_FEATURE</name></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errmsg</name><argument_list>(
							 <argument><expr><literal type="string">"Setting citus.replication_model has no effect. Please use "</literal>
							 <literal type="string">"citus.shard_replication_factor instead."</literal></expr></argument>)</argument_list></call><operator>,</operator>
						 <call><name>errdetail</name><argument_list>(
							 <argument><expr><literal type="string">"Citus determines the replication model based on the "</literal>
							 <literal type="string">"replication factor and the replication models of the colocated "</literal>
							 <literal type="string">"shards. If a colocated table is present, the replication model "</literal>
							 <literal type="string">"is inherited. Otherwise 'streaming' replication is preferred if "</literal>
							 <literal type="string">"supported by the replication factor."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShowShardsForAppNamePrefixesCheckHook ensures that the
 * citus.show_shards_for_app_name_prefixes holds a valid list of application_name
 * values.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShowShardsForAppNamePrefixesCheckHook</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>prefixList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* SplitGUCList scribbles on the input */</comment>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>splitCopy</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* check whether we can split into a list of identifiers */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>SplitGUCList</name><argument_list>(<argument><expr><name>splitCopy</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>prefixList</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"not a valid list of identifiers"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>appNamePrefix</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>appNamePrefix</argument>, <argument>prefixList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>prefixLength</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>appNamePrefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>prefixLength</name> <operator>&gt;=</operator> <name>NAMEDATALEN</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"prefix %s is more than %d characters"</literal></expr></argument>, <argument><expr><name>appNamePrefix</name></expr></argument>,
								<argument><expr><name>NAMEDATALEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prefixAscii</name> <init>= <expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>appNamePrefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pg_clean_ascii</name><argument_list>(<argument><expr><name>prefixAscii</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>prefixAscii</name></expr></argument>, <argument><expr><name>appNamePrefix</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"prefix %s in citus.show_shards_for_app_name_prefixes "</literal>
								<literal type="string">"contains non-ascii characters"</literal></expr></argument>, <argument><expr><name>appNamePrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShowShardsForAppNamePrefixesAssignHook ensures changes to
 * citus.show_shards_for_app_name_prefixes are reflected in the decision
 * whether or not to show shards.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ShowShardsForAppNamePrefixesAssignHook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ResetHideShardsDecision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ApplicationNameAssignHook is called whenever application_name changes
 * to allow us to reset our hide shards decision.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>ApplicationNameAssignHook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ResetHideShardsDecision</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ResetCitusBackendType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>OldApplicationNameAssignHook</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>extra</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * NodeConninfoGucCheckHook ensures conninfo settings are in the expected form
 * and that the keywords of all non-null settings are on a allowlist devised to
 * keep users from setting options that may result in confusion.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>NodeConninfoGucCheckHook</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* this array _must_ be kept in an order usable by bsearch */</comment>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>allowedConninfoKeywords</name><index>[]</index></name> <init>= <expr><block>{
		<expr><literal type="string">"connect_timeout"</literal></expr>,
			<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_GSS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr><literal type="string">"gsslib"</literal></expr>,
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><literal type="string">"keepalives"</literal></expr>,
		<expr><literal type="string">"keepalives_count"</literal></expr>,
		<expr><literal type="string">"keepalives_idle"</literal></expr>,
		<expr><literal type="string">"keepalives_interval"</literal></expr>,
			<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_GSS</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>ENABLE_SSPI</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr><literal type="string">"krbsrvname"</literal></expr>,
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr><literal type="string">"sslcert"</literal></expr>,
		<expr><literal type="string">"sslcompression"</literal></expr>,
		<expr><literal type="string">"sslcrl"</literal></expr>,
		<expr><literal type="string">"sslkey"</literal></expr>,
		<expr><literal type="string">"sslmode"</literal></expr>,
		<expr><literal type="string">"sslrootcert"</literal></expr>,
		<expr><literal type="string">"tcp_user_timeout"</literal></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errorMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>conninfoValid</name> <init>= <expr><call><name>CheckConninfo</name><argument_list>(<argument><expr><operator>*</operator><name>newval</name></expr></argument>, <argument><expr><name>allowedConninfoKeywords</name></expr></argument>,
									   <argument><expr><call><name>lengthof</name><argument_list>(<argument><expr><name>allowedConninfoKeywords</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>errorMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>conninfoValid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>errorMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>conninfoValid</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CpuPriorityAssignHook changes the priority of the current backend to match
 * the chosen value.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CpuPriorityAssignHook</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>SetOwnPriority</name><argument_list>(<argument><expr><name>newval</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * NodeConninfoGucAssignHook is the assignment hook for the node_conninfo GUC
 * variable. Though this GUC is a "string", we actually parse it as a non-URI
 * PQconninfo key/value setting, storing the resultant PQconninfoOption values
 * using the public functions in connection_configuration.c.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>NodeConninfoGucAssignHook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>extra</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>newval</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>newval</name> <operator>=</operator> <literal type="string">""</literal></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>NodeConninfo</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* It did not change, no need to do anything */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>optionArray</name> <init>= <expr><call><name>PQconninfoParse</name><argument_list>(<argument><expr><name>newval</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>optionArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"cannot parse node_conninfo value"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"The GUC check hook should prevent "</literal>
								  <literal type="string">"all malformed values."</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ResetConnParams</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>PQconninfoOption</name> <modifier>*</modifier></type><name>option</name> <init>= <expr><name>optionArray</name></expr></init></decl>;</init> <condition><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>option</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>option</name><operator>-&gt;</operator><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>AddConnParam</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>keyword</name></name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>val</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>PQconninfoFree</name><argument_list>(<argument><expr><name>optionArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Mark all connections for shutdown, since they have been opened using old
	 * connection settings. This is mostly important when changing SSL
	 * parameters, otherwise these would not be applied and connections could
	 * be unencrypted when the user doesn't want that.
	 */</comment>
	<expr_stmt><expr><call><name>CloseAllConnectionsAfterTransaction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * MaxSharedPoolSizeGucShowHook overrides the value that is shown to the
 * user when the default value has not been set.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>MaxSharedPoolSizeGucShowHook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>newvalue</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>MaxSharedPoolSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>newvalue</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>GetMaxSharedPoolSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>newvalue</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>MaxSharedPoolSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>newvalue</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * LocalPoolSizeGucShowHook overrides the value that is shown to the
 * user when the default value has not been set.
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>LocalPoolSizeGucShowHook</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>newvalue</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>newvalue</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>GetLocalSharedPoolSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>newvalue</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>StatisticsCollectionGucCheckHook</name><parameter_list>(<parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>newval</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>extra</name></decl></parameter>, <parameter><decl><type><name>GucSource</name></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_LIBCURL</name></cpp:ifdef>
	<return>return <expr><name>true</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

	<comment type="block">/* if libcurl is not installed, only accept false */</comment>
	<if_stmt><if>if <condition>(<expr><operator>*</operator><name>newval</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>GUC_check_errcode</name><argument_list>(<argument><expr><name>ERRCODE_FEATURE_NOT_SUPPORTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>GUC_check_errdetail</name><argument_list>(<argument><expr><literal type="string">"Citus was compiled without libcurl support."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>


<comment type="block">/*
 * CitusAuthHook is a callback for client authentication that Postgres provides.
 * Citus uses this hook to count the number of active backends.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusAuthHook</name><parameter_list>(<parameter><decl><type><name>Port</name> <modifier>*</modifier></type><name>port</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * We determine the backend type here because other calls in this hook rely
	 * on it, both IsExternalClientBackend and InitializeBackendData. These
	 * calls would normally initialize its value based on the application_name
	 * global, but this global is not set yet at this point in the connection
	 * initialization. So here we determine it based on the value from Port.
	 */</comment>
	<expr_stmt><expr><call><name>DetermineCitusBackendType</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>application_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* external connections to not have a GPID immediately */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>IsExternalClientBackend</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We raise the shared connection counter pre-emptively. As a result, we may
		 * have scenarios in which a few simultaneous connection attempts prevent
		 * each other from succeeding, but we avoid scenarios where we oversubscribe
		 * the system.
		 *
		 * By also calling RegisterExternalClientBackendCounterDecrement here, we
		 * immediately lower the counter if we throw a FATAL error below. The client
		 * connection counter may temporarily exceed maxClientConnections in between.
		 */</comment>
		<expr_stmt><expr><call><name>RegisterExternalClientBackendCounterDecrement</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>uint32</name></type> <name>externalClientCount</name> <init>= <expr><call><name>IncrementExternalClientBackendCounter</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * Limit non-superuser client connections if citus.max_client_connections
		 * is set.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><name>MaxClientConnections</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator>
			<operator>!</operator><call><name>IsSuperuser</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>user_name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
			<name>externalClientCount</name> <operator>&gt;</operator> <name>MaxClientConnections</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>FATAL</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>ERRCODE_TOO_MANY_CONNECTIONS</name></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"remaining connection slots are reserved for "</literal>
								   <literal type="string">"non-replication superuser connections"</literal></expr></argument>)</argument_list></call><operator>,</operator>
							<call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"the server is configured to accept up to %d "</literal>
									  <literal type="string">"regular client connections"</literal></expr></argument>,
									  <argument><expr><name>MaxClientConnections</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Right after this, but before we assign global pid, this backend might
	 * get blocked by a DDL as that happens during parsing.
	 *
	 * That's why, we now initialize its backend data, with the gpid.
	 *
	 * We do this so that this backend gets the chance to show up in
	 * citus_lock_waits.
	 *
	 * We cannot assign a new global PID yet here, because that would require
	 * reading from catalogs, but that's not allowed this early in the
	 * connection startup (because no database has been assigned yet).
	 *
	 * A second reason is for backends that never call StartupCitusBackend. For
	 * those we already set the global PID in the backend data here to be able
	 * to do blocked process detection on connections that are opened over a
	 * replication connection. A replication connection backend will never call
	 * StartupCitusBackend, which normally sets up the global PID.
	 */</comment>
	<expr_stmt><expr><call><name>InitializeBackendData</name><argument_list>(<argument><expr><name><name>port</name><operator>-&gt;</operator><name>application_name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<comment type="block">/* let other authentication hooks to kick in first */</comment>
	<if_stmt><if>if <condition>(<expr><name>original_client_auth_hook</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>original_client_auth_hook</name><argument_list>(<argument><expr><name>port</name></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * IsSuperuser returns whether the role with the given name is superuser. If
 * the user doesn't exist, this simply returns false instead of throwing an
 * error. This is done to not leak information about users existing or not, in
 * some cases postgres is vague about this on purpose. So, by returning false
 * we let postgres return this possibly vague error message.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsSuperuser</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>roleName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>roleName</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>roleTuple</name> <init>= <expr><call><name>SearchSysCache1</name><argument_list>(<argument><expr><name>AUTHNAME</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>roleName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>roleTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Form_pg_authid</name></type> <name>rform</name> <init>= <expr><operator>(</operator><name>Form_pg_authid</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>roleTuple</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>isSuperuser</name> <init>= <expr><name><name>rform</name><operator>-&gt;</operator><name>rolsuper</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ReleaseSysCache</name><argument_list>(<argument><expr><name>roleTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>isSuperuser</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CitusObjectAccessHook is called when an object is created.
 *
 * We currently use it to track CREATE EXTENSION citus; operations to make sure we
 * clear the metadata if the transaction is rolled back.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>CitusObjectAccessHook</name><parameter_list>(<parameter><decl><type><name>ObjectAccessType</name></type> <name>access</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>classId</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type> <name>objectId</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>subId</name></decl></parameter>,
					  <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>PrevObjectAccessHook</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>PrevObjectAccessHook</name><argument_list>(<argument><expr><name>access</name></expr></argument>, <argument><expr><name>classId</name></expr></argument>, <argument><expr><name>objectId</name></expr></argument>, <argument><expr><name>subId</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Checks if the access is post_create and that it's an extension id */</comment>
	<if_stmt><if>if <condition>(<expr><name>access</name> <operator>==</operator> <name>OAT_POST_CREATE</name> <operator>&amp;&amp;</operator> <name>classId</name> <operator>==</operator> <name>ExtensionRelationId</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* There's currently an engine bug that makes it difficult to check
		 * the provided objectId with extension oid so we will set the value
		 * regardless if it's citus being created */</comment>
		<expr_stmt><expr><call><name>SetCreateCitusTransactionLevel</name><argument_list>(<argument><expr><call><name>GetCurrentTransactionNestLevel</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
