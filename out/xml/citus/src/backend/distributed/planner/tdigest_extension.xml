<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/planner/tdigest_extension.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * tdigest_extension.c
 *    Helper functions to get access to tdigest specific data.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/genam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/htup_details.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/tdigest_extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"parser/parse_func.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/fmgroids.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>Oid</name></type> <name>LookupTDigestFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>argtypes</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * TDigestExtensionSchema finds the schema the tdigest extension is installed in. The
 * function will return InvalidOid if the extension is not installed.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionSchema</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ScanKeyData</name></type> <name><name>entry</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Form_pg_extension</name></type> <name>extensionForm</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tdigestExtensionSchema</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Relation</name></type> <name>relation</name> <init>= <expr><call><name>table_open</name><argument_list>(<argument><expr><name>ExtensionRelationId</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ScanKeyInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>entry</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
				<argument><expr><name>Anum_pg_extension_extname</name></expr></argument>,
				<argument><expr><name>BTEqualStrategyNumber</name></expr></argument>, <argument><expr><name>F_NAMEEQ</name></expr></argument>,
				<argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><literal type="string">"tdigest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SysScanDesc</name></type> <name>scandesc</name> <init>= <expr><call><name>systable_beginscan</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>ExtensionNameIndexId</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
											  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>extensionTuple</name> <init>= <expr><call><name>systable_getnext</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We assume that there can be at most one matching tuple, if no tuple found the
	 * extension is not installed. The value of InvalidOid will not be changed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>HeapTupleIsValid</name><argument_list>(<argument><expr><name>extensionTuple</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>extensionForm</name> <operator>=</operator> <operator>(</operator><name>Form_pg_extension</name><operator>)</operator> <call><name>GETSTRUCT</name><argument_list>(<argument><expr><name>extensionTuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>tdigestExtensionSchema</name> <operator>=</operator> <name><name>extensionForm</name><operator>-&gt;</operator><name>extnamespace</name></name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>OidIsValid</name><argument_list>(<argument><expr><name>tdigestExtensionSchema</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>systable_endscan</name><argument_list>(<argument><expr><name>scandesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>table_close</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>AccessShareLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>tdigestExtensionSchema</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionTypeOid performs a lookup for the Oid of the type representing the
 * tdigest as installed by the tdigest extension returns InvalidOid if the type cannot be
 * found.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionTypeOid</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tdigestSchemaOid</name> <init>= <expr><call><name>TDigestExtensionSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>tdigestSchemaOid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>namespaceName</name> <init>= <expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>tdigestSchemaOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>LookupTypeOid</name><argument_list>(<argument><expr><name>namespaceName</name></expr></argument>, <argument><expr><literal type="string">"tdigest"</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * LookupTDigestFunction is a helper function specifically to lookup functions in the
 * namespace/schema where the tdigest extension is installed. This makes the lookup of
 * following aggregate functions easier and less repetitive.
 */</comment>
<function><type><specifier>static</specifier> <name>Oid</name></type>
<name>LookupTDigestFunction</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>functionName</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argcount</name></decl></parameter>, <parameter><decl><type><name>Oid</name> <modifier>*</modifier></type><name>argtypes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Oid</name></type> <name>tdigestSchemaOid</name> <init>= <expr><call><name>TDigestExtensionSchema</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>tdigestSchemaOid</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>InvalidOid</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>namespaceName</name> <init>= <expr><call><name>get_namespace_name</name><argument_list>(<argument><expr><name>tdigestSchemaOid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>LookupFuncName</name><argument_list>(
		<argument><expr><call><name>list_make2</name><argument_list>(<argument><expr><call><name>makeString</name><argument_list>(<argument><expr><name>namespaceName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>makeString</name><argument_list>(<argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>functionName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
		<argument><expr><name>argcount</name></expr></argument>, <argument><expr><name>argtypes</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigest1 performs a lookup for the Oid of the tdigest aggregate;
 *   tdigest(tdigest)
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigest1</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest"</literal></argument>, <argument><literal type="number">1</literal></argument>, <argument>(Oid[]) { TDigestExtensionTypeOid() }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigest2 performs a lookup for the Oid of the tdigest aggregate;
 *   tdigest(value double precision, compression int)
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigest2</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest"</literal></argument>, <argument><literal type="number">2</literal></argument>, <argument>(Oid[]) { FLOAT8OID</argument>, <argument>INT4OID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentile2 performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile(tdigest, double precision)
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentile2</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile"</literal></argument>, <argument><literal type="number">2</literal></argument>,
								 <argument>(Oid[]) { TDigestExtensionTypeOid()</argument>, <argument>FLOAT8OID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentile2a performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile(tdigest, double precision[])
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentile2a</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile"</literal></argument>, <argument><literal type="number">2</literal></argument>,
								 <argument>(Oid[]) { TDigestExtensionTypeOid()</argument>, <argument>FLOAT8ARRAYOID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentile3 performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile(double precision, int, double precision)
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentile3</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile"</literal></argument>, <argument><literal type="number">3</literal></argument>,
								 <argument>(Oid[]) { FLOAT8OID</argument>, <argument>INT4OID</argument>, <argument>FLOAT8OID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentile3a performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile(double precision, int, double precision[])
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentile3a</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile"</literal></argument>, <argument><literal type="number">3</literal></argument>,
								 <argument>(Oid[]) { FLOAT8OID</argument>, <argument>INT4OID</argument>, <argument>FLOAT8ARRAYOID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentileOf2 performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile_of(tdigest, double precision)
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentileOf2</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile_of"</literal></argument>, <argument><literal type="number">2</literal></argument>,
								 <argument>(Oid[]) { TDigestExtensionTypeOid()</argument>, <argument>FLOAT8OID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentileOf2a performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile_of(tdigest, double precision[])
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentileOf2a</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile_of"</literal></argument>, <argument><literal type="number">2</literal></argument>,
								 <argument>(Oid[]) { TDigestExtensionTypeOid()</argument>, <argument>FLOAT8ARRAYOID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentileOf3 performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile_of(double precision, int, double precision)
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentileOf3</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile_of"</literal></argument>, <argument><literal type="number">3</literal></argument>,
								 <argument>(Oid[]) { FLOAT8OID</argument>, <argument>INT4OID</argument>, <argument>FLOAT8OID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * TDigestExtensionAggTDigestPercentileOf3a performs a lookup for the Oid of the tdigest
 * aggregate;
 *   tdigest_percentile_of(double precision, int, double precision[])
 *
 * If the aggregate is not found InvalidOid is returned.
 */</comment>
<function><type><name>Oid</name></type>
<name>TDigestExtensionAggTDigestPercentileOf3a</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <macro><name>LookupTDigestFunction</name><argument_list>(<argument><literal type="string">"tdigest_percentile_of"</literal></argument>, <argument><literal type="number">3</literal></argument>,
								 <argument>(Oid[]) { FLOAT8OID</argument>, <argument>INT4OID</argument>, <argument>FLOAT8ARRAYOID }</argument>)</argument_list></macro>;</return>
</block_content>}</block></function>
</unit>
