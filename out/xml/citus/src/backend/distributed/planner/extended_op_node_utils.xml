<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/planner/extended_op_node_utils.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * extended_op_node_utils.c implements the logic for building the necessary
 * information that is shared among both the worker and master extended
 * op nodes.
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_version_constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/extended_op_node_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_logical_optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_dist_partition.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/restrictinfo.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/nodeFuncs.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>GroupedByPartitionColumn</name><parameter_list>(<parameter><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>MultiExtendedOp</name> <modifier>*</modifier></type><name>opNode</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ExtendedOpNodeContainsRepartitionSubquery</name><parameter_list>(<parameter><decl><type><name>MultiExtendedOp</name> <modifier>*</modifier></type><name>originalOpNode</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>HasNonPartitionColumnDistinctAgg</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>targetEntryList</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>havingQual</name></decl></parameter>,
											 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tableNodeList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>PartitionColumnInTableList</name><parameter_list>(<parameter><decl><type><name>Var</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tableNodeList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShouldPullDistinctColumn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>repartitionSubquery</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>groupedByDisjointPartitionColumn</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>hasNonPartitionColumnDistinctAgg</name></decl></parameter>,
									 <parameter><decl><type><name>bool</name></type> <name>onlyPushableWindowFunctions</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>CanPushDownGroupingAndHaving</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>pullUpIntermediateRows</name></decl></parameter>,
										 <parameter><decl><type><name>bool</name></type> <name>groupedByDisjointPartitionColumn</name></decl></parameter>,
										 <parameter><decl><type><name>bool</name></type> <name>hasWindowFuncs</name></decl></parameter>,
										 <parameter><decl><type><name>bool</name></type> <name>onlyPushableWindowFunctions</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * BuildExtendedOpNodeProperties is a helper function that simply builds
 * the necessary information for processing the extended op node. The return
 * value should be used in a read-only manner.
 */</comment>
<function><type><name>ExtendedOpNodeProperties</name></type>
<name>BuildExtendedOpNodeProperties</name><parameter_list>(<parameter><decl><type><name>MultiExtendedOp</name> <modifier>*</modifier></type><name>extendedOpNode</name></decl></parameter>,
							  <parameter><decl><type><name>bool</name></type> <name>hasNonDistributableAggregates</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ExtendedOpNodeProperties</name></type> <name>extendedOpNodeProperties</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>tableNodeList</name> <init>= <expr><call><name>FindNodesOfType</name><argument_list>(<argument><expr><operator>(</operator><name>MultiNode</name> <operator>*</operator><operator>)</operator> <name>extendedOpNode</name></expr></argument>, <argument><expr><name>T_MultiTable</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>groupedByDisjointPartitionColumn</name> <init>=
		<expr><call><name>GroupedByPartitionColumn</name><argument_list>(<argument><expr><operator>(</operator><name>MultiNode</name> <operator>*</operator><operator>)</operator> <name>extendedOpNode</name></expr></argument>, <argument><expr><name>extendedOpNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>pullUpIntermediateRows</name> <init>= <expr><operator>!</operator><name>groupedByDisjointPartitionColumn</name> <operator>&amp;&amp;</operator>
								  <name>hasNonDistributableAggregates</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>repartitionSubquery</name> <init>= <expr><call><name>ExtendedOpNodeContainsRepartitionSubquery</name><argument_list>(<argument><expr><name>extendedOpNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>targetList</name> <init>= <expr><name><name>extendedOpNode</name><operator>-&gt;</operator><name>targetList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>havingQual</name> <init>= <expr><name><name>extendedOpNode</name><operator>-&gt;</operator><name>havingQual</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>hasNonPartitionColumnDistinctAgg</name> <init>=
		<expr><call><name>HasNonPartitionColumnDistinctAgg</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>, <argument><expr><name>havingQual</name></expr></argument>, <argument><expr><name>tableNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>pushDownGroupingAndHaving</name> <init>=
		<expr><call><name>CanPushDownGroupingAndHaving</name><argument_list>(<argument><expr><name>pullUpIntermediateRows</name></expr></argument>,
									 <argument><expr><name>groupedByDisjointPartitionColumn</name></expr></argument>,
									 <argument><expr><name><name>extendedOpNode</name><operator>-&gt;</operator><name>hasWindowFuncs</name></name></expr></argument>,
									 <argument><expr><name><name>extendedOpNode</name><operator>-&gt;</operator><name>onlyPushableWindowFunctions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>pullDistinctColumns</name> <init>=
		<expr><call><name>ShouldPullDistinctColumn</name><argument_list>(<argument><expr><name>repartitionSubquery</name></expr></argument>,
								 <argument><expr><name>groupedByDisjointPartitionColumn</name></expr></argument>,
								 <argument><expr><name>hasNonPartitionColumnDistinctAgg</name></expr></argument>,
								 <argument><expr><name><name>extendedOpNode</name><operator>-&gt;</operator><name>onlyPushableWindowFunctions</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>hasGroupBy</name></name> <operator>=</operator> <name><name>extendedOpNode</name><operator>-&gt;</operator><name>groupClauseList</name></name> <operator>!=</operator> <name>NIL</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>hasAggregate</name></name> <operator>=</operator> <call><name>TargetListHasAggregates</name><argument_list>(<argument><expr><name>targetList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>groupedByDisjointPartitionColumn</name></name> <operator>=</operator>
		<name>groupedByDisjointPartitionColumn</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>repartitionSubquery</name></name> <operator>=</operator> <name>repartitionSubquery</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>hasNonPartitionColumnDistinctAgg</name></name> <operator>=</operator>
		<name>hasNonPartitionColumnDistinctAgg</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>pullDistinctColumns</name></name> <operator>=</operator> <name>pullDistinctColumns</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>pullUpIntermediateRows</name></name> <operator>=</operator> <name>pullUpIntermediateRows</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>hasWindowFuncs</name></name> <operator>=</operator> <name><name>extendedOpNode</name><operator>-&gt;</operator><name>hasWindowFuncs</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>onlyPushableWindowFunctions</name></name> <operator>=</operator>
		<name><name>extendedOpNode</name><operator>-&gt;</operator><name>onlyPushableWindowFunctions</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>extendedOpNodeProperties</name><operator>.</operator><name>pushDownGroupingAndHaving</name></name> <operator>=</operator> <name>pushDownGroupingAndHaving</name></expr>;</expr_stmt>

	<return>return <expr><name>extendedOpNodeProperties</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GroupedByPartitionColumn returns true if a GROUP BY in the opNode contains
 * the partition column of the underlying relation, which is determined by
 * searching the MultiNode tree for a MultiTable and MultiPartition with
 * a matching column.
 *
 * When there is a re-partition join, the search terminates at the
 * MultiPartition node. Hence we can push down the GROUP BY if the join
 * column is in the GROUP BY.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>GroupedByPartitionColumn</name><parameter_list>(<parameter><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>MultiExtendedOp</name> <modifier>*</modifier></type><name>opNode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CitusIsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>MultiTable</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiTable</name> <modifier>*</modifier></type><name>tableNode</name> <init>= <expr><operator>(</operator><name>MultiTable</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>Oid</name></type> <name>relationId</name> <init>= <expr><name><name>tableNode</name><operator>-&gt;</operator><name>relationId</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>relationId</name> <operator>==</operator> <name>SUBQUERY_RELATION_ID</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* ignore subqueries for now */</comment>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name>relationId</name> <operator>!=</operator> <name>SUBQUERY_PUSHDOWN_RELATION_ID</name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCitusTableType</name><argument_list>(<argument><expr><name>relationId</name></expr></argument>, <argument><expr><name>STRICTLY_PARTITIONED_DISTRIBUTED_TABLE</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<comment type="block">/* only range- and hash-distributed tables are strictly partitioned */</comment>
				<return>return <expr><name>false</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GroupedByColumn</name><argument_list>(<argument><expr><name><name>opNode</name><operator>-&gt;</operator><name>groupClauseList</name></name></expr></argument>, <argument><expr><name><name>opNode</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>,
							<argument><expr><name><name>tableNode</name><operator>-&gt;</operator><name>partitionColumn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* this node is partitioned by a column in the GROUP BY */</comment>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>CitusIsA</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><name>MultiPartition</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiPartition</name> <modifier>*</modifier></type><name>partitionNode</name> <init>= <expr><operator>(</operator><name>MultiPartition</name> <operator>*</operator><operator>)</operator> <name>node</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GroupedByColumn</name><argument_list>(<argument><expr><name><name>opNode</name><operator>-&gt;</operator><name>groupClauseList</name></name></expr></argument>, <argument><expr><name><name>opNode</name><operator>-&gt;</operator><name>targetList</name></name></expr></argument>,
							<argument><expr><name><name>partitionNode</name><operator>-&gt;</operator><name>partitionColumn</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* this node is partitioned by a column in the GROUP BY */</comment>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>UnaryOperator</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>childNode</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MultiUnaryNode</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>childNode</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GroupedByPartitionColumn</name><argument_list>(<argument><expr><name>childNode</name></expr></argument>, <argument><expr><name>opNode</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* a child node is partitioned by a column in the GROUP BY */</comment>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><call><name>BinaryOperator</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>leftChildNode</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MultiBinaryNode</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>leftChildNode</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>rightChildNode</name> <init>= <expr><operator>(</operator><operator>(</operator><name>MultiBinaryNode</name> <operator>*</operator><operator>)</operator> <name>node</name><operator>)</operator><operator>-&gt;</operator><name>rightChildNode</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>GroupedByPartitionColumn</name><argument_list>(<argument><expr><name>leftChildNode</name></expr></argument>, <argument><expr><name>opNode</name></expr></argument>)</argument_list></call> <operator>||</operator>
			<call><name>GroupedByPartitionColumn</name><argument_list>(<argument><expr><name>rightChildNode</name></expr></argument>, <argument><expr><name>opNode</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* a child node is partitioned by a column in the GROUP BY */</comment>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ExtendedOpNodeContainsRepartitionSubquery is a utility function that
 * returns true if the extended op node contains a re-partition subquery.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ExtendedOpNodeContainsRepartitionSubquery</name><parameter_list>(<parameter><decl><type><name>MultiExtendedOp</name> <modifier>*</modifier></type><name>originalOpNode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>parentNode</name> <init>= <expr><call><name>ParentNode</name><argument_list>(<argument><expr><operator>(</operator><name>MultiNode</name> <operator>*</operator><operator>)</operator> <name>originalOpNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>MultiNode</name> <modifier>*</modifier></type><name>childNode</name> <init>= <expr><call><name>ChildNode</name><argument_list>(<argument><expr><operator>(</operator><name>MultiUnaryNode</name> <operator>*</operator><operator>)</operator> <name>originalOpNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>CitusIsA</name><argument_list>(<argument><expr><name>parentNode</name></expr></argument>, <argument><expr><name>MultiTable</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>CitusIsA</name><argument_list>(<argument><expr><name>childNode</name></expr></argument>, <argument><expr><name>MultiCollect</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * HasNonPartitionColumnDistinctAgg returns true if target entry or having qualifier
 * has non-partition column reference in aggregate (distinct) definition. Note that,
 * it only checks aggs subfield of Aggref, it does not check FILTER or SORT clauses.
 * Having any non-column reference like operator expression, function call, or const
 * is considered as a non-partition column. Even if the expression contains partition column
 * like (column + 1), it needs to be evaluated at coordinator, since we can't reliably verify
 * the distinctness of the expression result like (column % 5) or (column + column).
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>HasNonPartitionColumnDistinctAgg</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>targetEntryList</name></decl></parameter>, <parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>havingQual</name></decl></parameter>,
								 <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tableNodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>targetVarList</name> <init>= <expr><call><name>pull_var_clause</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>targetEntryList</name></expr></argument>,
										  <argument><expr><name>PVC_INCLUDE_AGGREGATES</name> <operator>|</operator>
										  <name>PVC_RECURSE_WINDOWFUNCS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* having clause can't have window functions, no need to recurse for that */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>havingVarList</name> <init>= <expr><call><name>pull_var_clause</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>havingQual</name></expr></argument>, <argument><expr><name>PVC_INCLUDE_AGGREGATES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>aggregateCheckList</name> <init>= <expr><call><name>list_concat</name><argument_list>(<argument><expr><name>targetVarList</name></expr></argument>, <argument><expr><name>havingVarList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>aggregateCheckCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach</name><argument_list>(<argument>aggregateCheckCell</argument>, <argument>aggregateCheckList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>targetNode</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>aggregateCheckCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>varCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>isPartitionColumn</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>targetNode</name></expr></argument>, <argument><expr><name>Aggref</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>Aggref</name> <modifier>*</modifier></type><name>targetAgg</name> <init>= <expr><call><name>castNode</name><argument_list>(<argument><expr><name>Aggref</name></expr></argument>, <argument><expr><name>targetNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>targetAgg</name><operator>-&gt;</operator><name>aggdistinct</name></name> <operator>==</operator> <name>NIL</name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/*
		 * We are dealing with a more complex count distinct, it needs to be
		 * evaluated at coordinator level.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>targetAgg</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>list_length</name><argument_list>(<argument><expr><name><name>targetAgg</name><operator>-&gt;</operator><name>aggdistinct</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>TargetEntry</name> <modifier>*</modifier></type><name>firstTargetEntry</name> <init>= <expr><call><name>linitial_node</name><argument_list>(<argument><expr><name>TargetEntry</name></expr></argument>, <argument><expr><name><name>targetAgg</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>firstTargetExprNode</name> <init>= <expr><call><name>strip_implicit_coercions</name><argument_list>(
			<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>firstTargetEntry</name><operator>-&gt;</operator><name>expr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsA</name><argument_list>(<argument><expr><name>firstTargetExprNode</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>true</name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>varList</name> <init>= <expr><call><name>pull_var_clause_default</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>targetAgg</name><operator>-&gt;</operator><name>args</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<macro><name>foreach</name><argument_list>(<argument>varCell</argument>, <argument>varList</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>Node</name> <modifier>*</modifier></type><name>targetVar</name> <init>= <expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>varCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><call><name>IsA</name><argument_list>(<argument><expr><name>targetVar</name></expr></argument>, <argument><expr><name>Var</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>isPartitionColumn</name> <operator>=</operator>
				<call><name>PartitionColumnInTableList</name><argument_list>(<argument><expr><operator>(</operator><name>Var</name> <operator>*</operator><operator>)</operator> <name>targetVar</name></expr></argument>, <argument><expr><name>tableNodeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isPartitionColumn</name></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PartitionColumnInTableList returns true if provided column is a partition
 * column from provided table node list. It also returns false if a column is
 * partition column of an append distributed table.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>PartitionColumnInTableList</name><parameter_list>(<parameter><decl><type><name>Var</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>tableNodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>tableNodeCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach</name><argument_list>(<argument>tableNodeCell</argument>, <argument>tableNodeList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiTable</name> <modifier>*</modifier></type><name>tableNode</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>tableNodeCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Var</name> <modifier>*</modifier></type><name>partitionColumn</name> <init>= <expr><name><name>tableNode</name><operator>-&gt;</operator><name>partitionColumn</name></name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>partitionColumn</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator>
			<name><name>partitionColumn</name><operator>-&gt;</operator><name>varno</name></name> <operator>==</operator> <name><name>column</name><operator>-&gt;</operator><name>varno</name></name> <operator>&amp;&amp;</operator>
			<name><name>partitionColumn</name><operator>-&gt;</operator><name>varattno</name></name> <operator>==</operator> <name><name>column</name><operator>-&gt;</operator><name>varattno</name></name></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsCitusTableType</name><argument_list>(<argument><expr><name><name>tableNode</name><operator>-&gt;</operator><name>relationId</name></name></expr></argument>, <argument><expr><name>APPEND_DISTRIBUTED</name></expr></argument>)</argument_list></call></expr>)</condition>
			<block>{<block_content>
				<return>return <expr><name>true</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ShouldPullDistinctColumn returns true if distinct aggregate should pull
 * individual columns from worker to coordinator and evaluate aggregate operation
 * on the coordinator.
 *
 * Pull cases are:
 * - repartition subqueries
 * - query has count distinct on a non-partition column on at least one target
 * - count distinct is on a non-partition column and query is not
 *   grouped on partition column
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShouldPullDistinctColumn</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>repartitionSubquery</name></decl></parameter>,
						 <parameter><decl><type><name>bool</name></type> <name>groupedByDisjointPartitionColumn</name></decl></parameter>,
						 <parameter><decl><type><name>bool</name></type> <name>hasNonPartitionColumnDistinctAgg</name></decl></parameter>,
						 <parameter><decl><type><name>bool</name></type> <name>onlyPushableWindowFunctions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>repartitionSubquery</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* don't pull distinct columns when it can be pushed down */</comment>
	<if_stmt><if>if <condition>(<expr><name>onlyPushableWindowFunctions</name> <operator>&amp;&amp;</operator> <name>groupedByDisjointPartitionColumn</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>hasNonPartitionColumnDistinctAgg</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * CanPushDownGroupingAndHaving returns whether GROUP BY &amp; HAVING should be
 * pushed down to worker.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>CanPushDownGroupingAndHaving</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>pullUpIntermediateRows</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>groupedByDisjointPartitionColumn</name></decl></parameter>,
							 <parameter><decl><type><name>bool</name></type> <name>hasWindowFuncs</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>onlyPushableWindowFunctions</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* don't push down if we're pulling up */</comment>
	<if_stmt><if>if <condition>(<expr><name>pullUpIntermediateRows</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * If grouped by a partition column we can push down the having qualifier.
	 *
	 * When a query with subquery is provided, we can't determine if
	 * groupedByDisjointPartitionColumn, therefore we also check if there is a
	 * window function too. If there is a window function we would know that it
	 * is safe to push down (i.e. it is partitioned on distribution column, and
	 * if there is a group by, it contains distribution column).
	 */</comment>
	<return>return <expr><name>groupedByDisjointPartitionColumn</name> <operator>||</operator>
		   <operator>(</operator><name>hasWindowFuncs</name> <operator>&amp;&amp;</operator> <name>onlyPushableWindowFunctions</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>
</unit>
