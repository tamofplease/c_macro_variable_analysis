<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/planner/local_plan_cache.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * local_plan_cache.c
 *
 * Local plan cache related functions
 *
 * Copyright (c) Citus Data, Inc.
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_version_constants.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_plan_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/deparse_shard_query.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_ruleutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/insert_select_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/optimizer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"optimizer/clauses.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>Query</name> <modifier>*</modifier></type> <name>GetLocalShardQueryForCache</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>jobQuery</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>,
										  <parameter><decl><type><name>ParamListInfo</name></type> <name>paramListInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>DeparseLocalShardQuery</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>jobQuery</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>,
									 <parameter><decl><type><name>Oid</name></type> <name>anchorDistributedTableId</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>anchorShardId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>ExtractParameterTypesForParamListInfo</name><parameter_list>(<parameter><decl><type><name>ParamListInfo</name></type> <name>originalParamListInfo</name></decl></parameter>,
												 <parameter><decl><type><name>Oid</name> <modifier>*</modifier><modifier>*</modifier></type><name>parameterTypes</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/*
 * CacheLocalPlanForShardQuery replaces the relation OIDs in the job query
 * with shard relation OIDs and then plans the query and caches the result
 * in the originalDistributedPlan (which may be preserved across executions).
 */</comment>
<function><type><name>void</name></type>
<name>CacheLocalPlanForShardQuery</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>originalDistributedPlan</name></decl></parameter>,
							<parameter><decl><type><name>ParamListInfo</name></type> <name>paramListInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>PlannedStmt</name> <modifier>*</modifier></type><name>localPlan</name> <init>= <expr><call><name>GetCachedLocalPlan</name><argument_list>(<argument><expr><name>task</name></expr></argument>, <argument><expr><name>originalDistributedPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>localPlan</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we already have a local plan */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>task</name><operator>-&gt;</operator><name>relationShardList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* zero shard plan, no need to cache */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * All memory allocations should happen in the plan's context
	 * since we'll cache the local plan there.
	 */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>=
		<expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><call><name>GetMemoryChunkContext</name><argument_list>(<argument><expr><name>originalDistributedPlan</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We prefer to use jobQuery (over task-&gt;query) because we don't want any
	 * functions/params to have been evaluated in the cached plan.
	 */</comment>
	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>jobQuery</name> <init>= <expr><call><name>copyObject</name><argument_list>(<argument><expr><name><name>originalDistributedPlan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>jobQuery</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>localShardQuery</name> <init>= <expr><call><name>GetLocalShardQueryForCache</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>, <argument><expr><name>task</name></expr></argument>, <argument><expr><name>paramListInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>LOCKMODE</name></type> <name>lockMode</name> <init>= <expr><call><name>GetQueryLockMode</name><argument_list>(<argument><expr><name>localShardQuery</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* fast path queries can only have a single RTE by definition */</comment>
	<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rangeTableEntry</name> <init>= <expr><operator>(</operator><name>RangeTblEntry</name> <operator>*</operator><operator>)</operator> <call><name>linitial</name><argument_list>(<argument><expr><name><name>localShardQuery</name><operator>-&gt;</operator><name>rtable</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If the shard has been created in this transction, we wouldn't see the relationId
	 * for it, so do not cache.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>rangeTableEntry</name><operator>-&gt;</operator><name>relid</name></name> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>localShardQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LockRelationOid</name><argument_list>(<argument><expr><name><name>rangeTableEntry</name><operator>-&gt;</operator><name>relid</name></name></expr></argument>, <argument><expr><name>lockMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>LocalPlannedStatement</name> <modifier>*</modifier></type><name>localPlannedStatement</name> <init>= <expr><call><name>CitusMakeNode</name><argument_list>(<argument><expr><name>LocalPlannedStatement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>localPlan</name> <operator>=</operator> <call><name>planner</name><argument_list>(<argument><expr><name>localShardQuery</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>localPlannedStatement</name><operator>-&gt;</operator><name>localPlan</name></name> <operator>=</operator> <name>localPlan</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>localPlannedStatement</name><operator>-&gt;</operator><name>shardId</name></name> <operator>=</operator> <name><name>task</name><operator>-&gt;</operator><name>anchorShardId</name></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>localPlannedStatement</name><operator>-&gt;</operator><name>localGroupId</name></name> <operator>=</operator> <call><name>GetLocalGroupId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>originalDistributedPlan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>localPlannedStatements</name></name> <operator>=</operator>
		<call><name>lappend</name><argument_list>(<argument><expr><name><name>originalDistributedPlan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>localPlannedStatements</name></name></expr></argument>,
				<argument><expr><name>localPlannedStatement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetLocalShardQueryForCache is a helper function which generates
 * the local shard query based on the jobQuery. The function should
 * not be used for generic purposes, it is specialized for local cached
 * queries.
 *
 * It is not guaranteed to have consistent attribute numbers on the shards
 * and on the shell (e.g., distributed/reference tables) due to DROP COLUMN
 * commands.
 *
 * To avoid any edge cases due to such discrepancies, we first deparse the
 * jobQuery with the tables replaced to shards, and parse the query string
 * back. This is normally a very expensive operation, however we only do it
 * once per cached local plan, which is acceptable.
 */</comment>
<function><type><specifier>static</specifier> <name>Query</name> <modifier>*</modifier></type>
<name>GetLocalShardQueryForCache</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>jobQuery</name></decl></parameter>, <parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>ParamListInfo</name></type> <name>orig_paramListInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shardQueryString</name> <init>=
		<expr><call><name>DeparseLocalShardQuery</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>, <argument><expr><name><name>task</name><operator>-&gt;</operator><name>relationShardList</name></name></expr></argument>,
							   <argument><expr><name><name>task</name><operator>-&gt;</operator><name>anchorDistributedTableId</name></name></expr></argument>,
							   <argument><expr><name><name>task</name><operator>-&gt;</operator><name>anchorShardId</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG5</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Local shard query that is going to be cached: %s"</literal></expr></argument>,
							<argument><expr><name>shardQueryString</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Oid</name> <modifier>*</modifier></type><name>parameterTypes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>numberOfParameters</name> <init>=
		<expr><call><name>ExtractParameterTypesForParamListInfo</name><argument_list>(<argument><expr><name>orig_paramListInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>parameterTypes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>localShardQuery</name> <init>=
		<expr><call><name>ParseQueryString</name><argument_list>(<argument><expr><name>shardQueryString</name></expr></argument>, <argument><expr><name>parameterTypes</name></expr></argument>, <argument><expr><name>numberOfParameters</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>localShardQuery</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DeparseLocalShardQuery is a helper function to deparse given jobQuery for the shard(s)
 * identified by the relationShardList, anchorDistributedTableId and anchorShardId.
 *
 * For the details and comparison with TaskQueryString(), see the comments in the function.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>DeparseLocalShardQuery</name><parameter_list>(<parameter><decl><type><name>Query</name> <modifier>*</modifier></type><name>jobQuery</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>relationShardList</name></decl></parameter>, <parameter><decl><type><name>Oid</name></type>
					   <name>anchorDistributedTableId</name></decl></parameter>, <parameter><decl><type><name>int64</name></type> <name>anchorShardId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>queryString</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We imitate what TaskQueryString() does, but we cannot rely on that function
	 * as the parameters might have been already resolved on the QueryTree in the
	 * task. Instead, we operate on the jobQuery where are sure that the
	 * coordination evaluation has not happened.
	 *
	 * Local shard queries are only applicable for local cached query execution.
	 * In the local cached query execution mode, we can use a query structure
	 * (or query string) with unevaluated expressions as we allow function calls
	 * to be evaluated when the query on the shard is executed (e.g., do no have
	 * coordinator evaluation, instead let Postgres executor evaluate values).
	 *
	 * Additionally, we can allow them to be evaluated again because they are stable,
	 * and we do not cache plans / use unevaluated query strings for queries containing
	 * volatile functions.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>jobQuery</name><operator>-&gt;</operator><name>commandType</name></name> <operator>==</operator> <name>CMD_INSERT</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We currently do not support INSERT .. SELECT here. To support INSERT..SELECT
		 * queries, we should update the relation names to shard names in the SELECT
		 * clause (e.g., UpdateRelationToShardNames()).
		 */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>CheckInsertSelectQuery</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>AddInsertAliasIfNeeded</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * For INSERT queries we cannot use pg_get_query_def. Mainly because we
		 * cannot run UpdateRelationToShardNames on an INSERT query. This is
		 * because the PG deparsing logic fails when trying to insert into a
		 * RTE_FUNCTION (which is what will happen if you call
		 * UpdateRelationToShardNames).
		 */</comment>
		<expr_stmt><expr><call><name>deparse_shard_query</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>, <argument><expr><name>anchorDistributedTableId</name></expr></argument>, <argument><expr><name>anchorShardId</name></expr></argument>,
							<argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><call><name>UpdateRelationToShardNames</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>jobQuery</name></expr></argument>, <argument><expr><name>relationShardList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>pg_get_query_def</name><argument_list>(<argument><expr><name>jobQuery</name></expr></argument>, <argument><expr><name>queryString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name><name>queryString</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ExtractParameterTypesForParamListInfo is a helper function which helps to
 * extract the parameter types of the given ParamListInfo via the second
 * parameter of the function.
 *
 * The function also returns the number of parameters. If no parameter exists,
 * the function returns 0.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>ExtractParameterTypesForParamListInfo</name><parameter_list>(<parameter><decl><type><name>ParamListInfo</name></type> <name>originalParamListInfo</name></decl></parameter>,
									  <parameter><decl><type><name>Oid</name> <modifier>*</modifier><modifier>*</modifier></type><name>parameterTypes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>*</operator><name>parameterTypes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>numberOfParameters</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>originalParamListInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>parameterValues</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ParamListInfo</name></type> <name>paramListInfo</name> <init>= <expr><call><name>copyParamList</name><argument_list>(<argument><expr><name>originalParamListInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>ExtractParametersForLocalExecution</name><argument_list>(<argument><expr><name>paramListInfo</name></expr></argument>, <argument><expr><name>parameterTypes</name></expr></argument>,
										   <argument><expr><operator>&amp;</operator><name>parameterValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>numberOfParameters</name> <operator>=</operator> <name><name>paramListInfo</name><operator>-&gt;</operator><name>numParams</name></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>numberOfParameters</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetCachedLocalPlan is a helper function which return the cached
 * plan in the distributedPlan for the given task if exists.
 *
 * Otherwise, the function returns NULL.
 */</comment>
<function><type><name>PlannedStmt</name> <modifier>*</modifier></type>
<name>GetCachedLocalPlan</name><parameter_list>(<parameter><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name></decl></parameter>, <parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>distributedPlan</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>distributedPlan</name><operator>-&gt;</operator><name>workerJob</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>cachedPlanList</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>localPlannedStatements</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LocalPlannedStatement</name> <modifier>*</modifier></type><name>localPlannedStatement</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int32</name></type> <name>localGroupId</name> <init>= <expr><call><name>GetLocalGroupId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<macro><name>foreach_ptr</name><argument_list>(<argument>localPlannedStatement</argument>, <argument>cachedPlanList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>localPlannedStatement</name><operator>-&gt;</operator><name>shardId</name></name> <operator>==</operator> <name><name>task</name><operator>-&gt;</operator><name>anchorShardId</name></name> <operator>&amp;&amp;</operator>
			<name><name>localPlannedStatement</name><operator>-&gt;</operator><name>localGroupId</name></name> <operator>==</operator> <name>localGroupId</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* already have a cached plan, no need to continue */</comment>
			<return>return <expr><name><name>localPlannedStatement</name><operator>-&gt;</operator><name>localPlan</name></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * IsLocalPlanCachingSupported returns whether (part of) the task can be planned
 * and executed locally and whether caching is supported (single shard, no volatile
 * functions).
 */</comment>
<function><type><name>bool</name></type>
<name>IsLocalPlanCachingSupported</name><parameter_list>(<parameter><decl><type><name>Job</name> <modifier>*</modifier></type><name>currentJob</name></decl></parameter>, <parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>originalDistributedPlan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name><name>originalDistributedPlan</name><operator>-&gt;</operator><name>numberOfTimesExecuted</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Only cache if a plan is being reused (via a prepared statement).
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>currentJob</name><operator>-&gt;</operator><name>deferredPruning</name></name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * When not using deferred pruning we may have already replaced distributed
		 * table RTEs with citus_extradata_container RTEs to pass the shard ID to the
		 * deparser. In that case, we cannot pass the query tree directly to the
		 * planner.
		 *
		 * If desired, we can relax this check by improving the implementation of
		 * CacheLocalPlanForShardQuery to translate citus_extradata_container
		 * to a shard relation OID.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name> <init>= <expr><name><name>currentJob</name><operator>-&gt;</operator><name>taskList</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name>taskList</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we only support plan caching for single shard queries */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>linitial</name><argument_list>(<argument><expr><name>taskList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TaskAccessesLocalNode</name><argument_list>(<argument><expr><name>task</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* not a local task */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableLocalExecution</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* user requested not to use local execution */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>GetCurrentLocalExecutionStatus</name><argument_list>()</argument_list></call> <operator>==</operator> <name>LOCAL_EXECUTION_DISABLED</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* transaction already connected to localhost */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Query</name> <modifier>*</modifier></type><name>originalJobQuery</name> <init>= <expr><name><name>originalDistributedPlan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>jobQuery</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><call><name>contain_volatile_functions</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name>originalJobQuery</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We do not cache plans with volatile functions in the query.
		 *
		 * The reason we care about volatile functions is primarily that we
		 * already executed them in ExecuteCoordinatorEvaluableExpressions
		 * and since we're falling back to the original query tree here we would
		 * execute them again if we execute the plan.
		 */</comment>
		<return>return <expr><name>false</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
