<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/planner/intermediate_result_pruning.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * intermediate_result_pruning.c
 *   Functions for pruning intermediate result broadcasting.
 *
 * We only send intermediate results of subqueries and CTEs to worker nodes
 * that use them in the remainder of the distributed plan to avoid unnecessary
 * network traffic.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_custom_scan.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_ruleutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/intermediate_result_pruning.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/query_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_manager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/hashfn.h"</cpp:file></cpp:include>

<comment type="block">/* controlled via GUC, used mostly for testing */</comment>
<decl_stmt><decl><type><name>bool</name></type> <name>LogIntermediateResults</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>FindSubPlansUsedInNode</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SubPlanAccessType</name></type> <name>accessType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AppendAllAccessedWorkerNodes</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
										 <parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlan</name></decl></parameter>,
										 <parameter><decl><type><name>int</name></type> <name>nodeCount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AppendAllWorkerNodes</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>FindAllRemoteWorkerNodesUsingSubplan</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>RemoveLocalNodeFromWorkerList</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>LogIntermediateResultMulticastSummary</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
												  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * FindSubPlanUsages finds the subplans used in the master query and the
 * job query and returns them as a combined list of UsedDistributedSubPlan
 * structs.
 *
 * The list may contain duplicates if the subplan is referenced multiple
 * times.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>FindSubPlanUsages</name><parameter_list>(<parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>plan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>localSubPlans</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>remoteSubPlans</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>combineQuery</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>localSubPlans</name> <operator>=</operator> <call><name>FindSubPlansUsedInNode</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>plan</name><operator>-&gt;</operator><name>combineQuery</name></name></expr></argument>,
											   <argument><expr><name>SUBPLAN_ACCESS_LOCAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>workerJob</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Mark the subplans as needed on remote side. Note that this decision is
		 * revisited on execution, when the query only consists of intermediate
		 * results.
		 */</comment>
		<expr_stmt><expr><name>remoteSubPlans</name> <operator>=</operator> <call><name>FindSubPlansUsedInNode</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>plan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>jobQuery</name></name></expr></argument>,
												<argument><expr><name>SUBPLAN_ACCESS_REMOTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>plan</name><operator>-&gt;</operator><name>insertSelectQuery</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* INSERT..SELECT plans currently do not have a workerJob */</comment>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>plan</name><operator>-&gt;</operator><name>workerJob</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * The SELECT in an INSERT..SELECT is not fully planned yet and we cannot
		 * perform pruning. We therefore require all subplans used in the
		 * INSERT..SELECT to be available all nodes.
		 */</comment>
		<expr_stmt><expr><name>remoteSubPlans</name> <operator>=</operator> <call><name>FindSubPlansUsedInNode</name><argument_list>(<argument><expr><operator>(</operator><name>Node</name> <operator>*</operator><operator>)</operator> <name><name>plan</name><operator>-&gt;</operator><name>insertSelectQuery</name></name></expr></argument>,
												<argument><expr><name>SUBPLAN_ACCESS_ANYWHERE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* merge the used subplans */</comment>
	<return>return <expr><call><name>list_concat</name><argument_list>(<argument><expr><name>localSubPlans</name></expr></argument>, <argument><expr><name>remoteSubPlans</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FindSubPlansUsedInPlan finds all the subplans used by the plan by traversing
 * the input node.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>FindSubPlansUsedInNode</name><parameter_list>(<parameter><decl><type><name>Node</name> <modifier>*</modifier></type><name>node</name></decl></parameter>, <parameter><decl><type><name>SubPlanAccessType</name></type> <name>accessType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>rangeTableList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>rangeTableCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>usedSubPlanList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ExtractRangeTableEntryWalker</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rangeTableList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach</name><argument_list>(<argument>rangeTableCell</argument>, <argument>rangeTableList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>RangeTblEntry</name> <modifier>*</modifier></type><name>rangeTableEntry</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>rangeTableCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>rangeTableEntry</name><operator>-&gt;</operator><name>rtekind</name></name> <operator>==</operator> <name>RTE_FUNCTION</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resultId</name> <init>=
				<expr><call><name>FindIntermediateResultIdIfExists</name><argument_list>(<argument><expr><name>rangeTableEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name>resultId</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
			<block>{<block_content>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<comment type="block">/*
			 * Use a Value to be able to use list_append_unique and store
			 * the result ID in the DistributedPlan.
			 */</comment>
			<decl_stmt><decl><type><name>UsedDistributedSubPlan</name> <modifier>*</modifier></type><name>usedPlan</name> <init>= <expr><call><name>CitusMakeNode</name><argument_list>(<argument><expr><name>UsedDistributedSubPlan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name><name>usedPlan</name><operator>-&gt;</operator><name>subPlanId</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>usedPlan</name><operator>-&gt;</operator><name>accessType</name></name> <operator>=</operator> <name>accessType</name></expr>;</expr_stmt>

			<expr_stmt><expr><name>usedSubPlanList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>usedSubPlanList</name></expr></argument>, <argument><expr><name>usedPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>usedSubPlanList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RecordSubplanExecutionsOnNodes iterates over the usedSubPlanNodeList,
 * and for each entry, record the workerNodes that are accessed by
 * the distributed plan.
 *
 * Later, we'll use this information while we broadcast the intermediate
 * results to the worker nodes. The idea is that the intermediate result
 * should only be broadcasted to the worker nodes that are accessed by
 * the distributedPlan(s) that the subPlan is used in.
 *
 * Finally, the function recursively descends into the actual subplans
 * of the input distributedPlan as well.
 */</comment>
<function><type><name>void</name></type>
<name>RecordSubplanExecutionsOnNodes</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>intermediateResultsHash</name></decl></parameter>,
							   <parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>usedSubPlanNodeList</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>usedSubPlanNodeList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>subPlanList</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>subPlanList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>subPlanCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nodeCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><call><name>ActiveReadableNodeList</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>subPlanCell</argument>, <argument>usedSubPlanNodeList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>UsedDistributedSubPlan</name> <modifier>*</modifier></type><name>usedPlan</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>subPlanCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resultId</name> <init>= <expr><name><name>usedPlan</name><operator>-&gt;</operator><name>subPlanId</name></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>SearchIntermediateResult</name><argument_list>(
			<argument><expr><name>intermediateResultsHash</name></expr></argument>, <argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/*
		 * There is no need to traverse the subplan if the intermediate result
		 * will be written to a local file and sent to all nodes. Note that the
		 * remaining subplans in the distributed plan should still be traversed.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nodeCount</name> <operator>&amp;&amp;</operator> <name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"Subplan %s is used in all workers"</literal></expr></argument>, <argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><name><name>usedPlan</name><operator>-&gt;</operator><name>accessType</name></name> <operator>==</operator> <name>SUBPLAN_ACCESS_LOCAL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* subPlan needs to be written locally as the planner decided */</comment>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>usedPlan</name><operator>-&gt;</operator><name>accessType</name></name> <operator>==</operator> <name>SUBPLAN_ACCESS_REMOTE</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/*
			 * traverse the plan and add find all worker nodes
			 *
			 * If we have reference tables in the distributed plan, all the
			 * workers will be in the node list. We can improve intermediate result
			 * pruning by deciding which reference table shard will be accessed earlier.
			 */</comment>
			<expr_stmt><expr><call><name>AppendAllAccessedWorkerNodes</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>distributedPlan</name></expr></argument>, <argument><expr><name>nodeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>DEBUG4</name></expr></argument>, <argument><expr><literal type="string">"Subplan %s is used in %lu"</literal></expr></argument>, <argument><expr><name>resultId</name></expr></argument>, <argument><expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>planId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if>
		<if type="elseif">else if <condition>(<expr><name><name>usedPlan</name><operator>-&gt;</operator><name>accessType</name></name> <operator>==</operator> <name>SUBPLAN_ACCESS_ANYWHERE</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* subplan is needed on all nodes */</comment>
			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>AppendAllWorkerNodes</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* descend into the subPlans */</comment>
	<macro><name>foreach</name><argument_list>(<argument>subPlanCell</argument>, <argument>subPlanList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>DistributedSubPlan</name> <modifier>*</modifier></type><name>subPlan</name> <init>= <expr><operator>(</operator><name>DistributedSubPlan</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>subPlanCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CustomScan</name> <modifier>*</modifier></type><name>customScan</name> <init>= <expr><call><name>FetchCitusCustomScanIfExists</name><argument_list>(<argument><expr><name><name>subPlan</name><operator>-&gt;</operator><name>plan</name><operator>-&gt;</operator><name>planTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>customScan</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlanOfSubPlan</name> <init>= <expr><call><name>GetDistributedPlan</name><argument_list>(<argument><expr><name>customScan</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>RecordSubplanExecutionsOnNodes</name><argument_list>(<argument><expr><name>intermediateResultsHash</name></expr></argument>,
										   <argument><expr><name>distributedPlanOfSubPlan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * AppendAllAccessedWorkerNodes iterates over all the tasks in a distributed plan
 * to updates the list of worker nodes that can be accessed when this plan is
 * executed in entry. Depending on the plan, the function may give the decision for
 * writing the results locally.
 *
 * If there are multiple placements of a Shard, all of them are considered and
 * all the workers with placements are appended to the list. This effectively
 * means that if there is a reference table access in the distributed plan, all
 * the workers will be in the resulting list.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendAllAccessedWorkerNodes</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
							 <parameter><decl><type><name>DistributedPlan</name> <modifier>*</modifier></type><name>distributedPlan</name></decl></parameter>,
							 <parameter><decl><type><name>int</name></type> <name>nodeCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>taskList</name> <init>= <expr><name><name>distributedPlan</name><operator>-&gt;</operator><name>workerJob</name><operator>-&gt;</operator><name>taskList</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>taskCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>taskCell</argument>, <argument>taskList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Task</name> <modifier>*</modifier></type><name>task</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>taskCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>placementCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<macro><name>foreach</name><argument_list>(<argument>placementCell</argument>, <argument>task-&gt;taskPlacementList</argument>)</argument_list></macro>
		<block>{<block_content>
			<decl_stmt><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>placement</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>placementCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<if_stmt><if>if <condition>(<expr><name><name>placement</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>==</operator> <name>LOCAL_NODE_ID</name></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
				<continue>continue;</continue>
			</block_content>}</block></if></if_stmt>

			<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name> <operator>=</operator>
				<call><name>list_append_unique_int</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name></expr></argument>, <argument><expr><name><name>placement</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* early return if all the workers are accessed */</comment>
			<if_stmt><if>if <condition>(<expr><call><name>list_length</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>nodeCount</name> <operator>&amp;&amp;</operator>
				<name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name></expr>)</condition>
			<block>{<block_content>
				<return>return;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block>
	</block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * AppendAllWorkerNodes appends all node IDs of readable worker nodes to the
 * nodeIdList, meaning the corresponding intermediate result should be sent
 * to all readable nodes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AppendAllWorkerNodes</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><call><name>ActiveReadableNodeList</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>workerNode</argument>, <argument>workerNodeList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name> <operator>=</operator>
			<call><name>list_append_unique_int</name><argument_list>(<argument><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name></expr></argument>, <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>nodeId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
</block_content>}</block></function>


<comment type="block">/*
 * MakeIntermediateResultHTAB is a helper method that creates a Hash Table that
 * stores information on the intermediate result.
 */</comment>
<function><type><name>HTAB</name> <modifier>*</modifier></type>
<name>MakeIntermediateResultHTAB</name><parameter_list>()</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>HASHCTL</name></type> <name>info</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>initialNumberOfElements</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>keysize</name></name> <operator>=</operator> <name>NAMEDATALEN</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>entrysize</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>IntermediateResultsHashEntry</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hash</name></name> <operator>=</operator> <name>string_hash</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>info</name><operator>.</operator><name>hcxt</name></name> <operator>=</operator> <name>CurrentMemoryContext</name></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>hashFlags</name> <init>= <expr><operator>(</operator><name>HASH_ELEM</name> <operator>|</operator> <name>HASH_FUNCTION</name> <operator>|</operator> <name>HASH_CONTEXT</name><operator>)</operator></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>intermediateResultsHash</name> <init>= <expr><call><name>hash_create</name><argument_list>(<argument><expr><literal type="string">"Intermediate results hash"</literal></expr></argument>,
												<argument><expr><name>initialNumberOfElements</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>,
												<argument><expr><name>hashFlags</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>intermediateResultsHash</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FindAllWorkerNodesUsingSubplan creates a list of worker nodes that
 * may need to access subplan results. The function also sets writeToLocalFile
 * flag if the result should also need be written locally.
 */</comment>
<function><type><name>List</name> <modifier>*</modifier></type>
<name>FindAllWorkerNodesUsingSubplan</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>intermediateResultsHash</name></decl></parameter>,
							   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>resultId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name> <init>=
		<expr><call><name>SearchIntermediateResult</name><argument_list>(<argument><expr><name>intermediateResultsHash</name></expr></argument>, <argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>remoteWorkerNodes</name> <init>= <expr><call><name>FindAllRemoteWorkerNodesUsingSubplan</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Don't include the current worker if the result will be written to local
	 * file as this would be very inefficient and potentially leading race
	 * conditions while tring to write the same file twice.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>remoteWorkerNodes</name> <operator>=</operator> <call><name>RemoveLocalNodeFromWorkerList</name><argument_list>(<argument><expr><name>remoteWorkerNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LogIntermediateResultMulticastSummary</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>remoteWorkerNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>remoteWorkerNodes</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * FindAllRemoteWorkerNodesUsingSubplan goes over the nodeIdList of the
 * intermediate result entry, and returns a list of workerNodes that the
 * entry should be multi-casted to. The aim of the function is to filter
 * out nodes with LOCAL_NODE_ID.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>FindAllRemoteWorkerNodesUsingSubplan</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>nodeIdCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach</name><argument_list>(<argument>nodeIdCell</argument>, <argument>entry-&gt;nodeIdList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>uint32</name></type> <name>nodeId</name> <init>= <expr><call><name>lfirst_int</name><argument_list>(<argument><expr><name>nodeIdCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>LookupNodeByNodeId</name><argument_list>(<argument><expr><name>nodeId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>workerNode</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>workerNodeList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name>workerNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>workerNodeList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * RemoveLocalNodeFromWorkerList goes over the input workerNode list and
 * removes the worker node with the local group id, and returns a new list.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>RemoveLocalNodeFromWorkerList</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int32</name></type> <name>localGroupId</name> <init>= <expr><call><name>GetLocalGroupId</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>workerNodeCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach</name><argument_list>(<argument>workerNodeCell</argument>, <argument>workerNodeList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><operator>(</operator><name>WorkerNode</name> <operator>*</operator><operator>)</operator> <call><name>lfirst</name><argument_list>(<argument><expr><name>workerNodeCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>workerNode</name><operator>-&gt;</operator><name>groupId</name></name> <operator>==</operator> <name>localGroupId</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><call><name>list_delete_cell</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name>workerNodeCell</name></expr></argument>)</argument_list></call></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<return>return <expr><name>workerNodeList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * LogIntermediateResultMulticastSummary is a utility function to DEBUG output
 * the decisions given on which intermediate result should be sent to which node.
 *
 * For details, see the function comments.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>LogIntermediateResultMulticastSummary</name><parameter_list>(<parameter><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
									  <parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>resultId</name> <init>= <expr><name><name>entry</name><operator>-&gt;</operator><name>key</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Log a summary of decisions made for intermediate result multicast. By default
	 * we log at level DEBUG4. When the user has set citus.log_intermediate_results
	 * we change the log level to DEBUG1. This is mostly useful in regression tests
	 * where we specifically want to debug this decisions, but not all DEBUG4 messages.
	 */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>logLevel</name> <init>= <expr><name>DEBUG4</name></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>LogIntermediateResults</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>logLevel</name> <operator>=</operator> <name>DEBUG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>IsLoggableLevel</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>, <argument><expr><literal type="string">"Subplan %s will be written to local file"</literal></expr></argument>, <argument><expr><name>resultId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<macro><name>foreach_ptr</name><argument_list>(<argument>workerNode</argument>, <argument>workerNodeList</argument>)</argument_list></macro>
		<block>{<block_content>
			<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>, <argument><expr><literal type="string">"Subplan %s will be sent to %s:%d"</literal></expr></argument>, <argument><expr><name>resultId</name></expr></argument>,
				 <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>, <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * SearchIntermediateResult searches through intermediateResultsHash for a given
 * intermediate result id.
 *
 * If an entry is not found, creates a new entry with sane defaults.
 */</comment>
<function><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type>
<name>SearchIntermediateResult</name><parameter_list>(<parameter><decl><type><name>HTAB</name> <modifier>*</modifier></type><name>intermediateResultsHash</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>resultId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>IntermediateResultsHashEntry</name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>hash_search</name><argument_list>(<argument><expr><name>intermediateResultsHash</name></expr></argument>, <argument><expr><name>resultId</name></expr></argument>,
													  <argument><expr><name>HASH_ENTER</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>found</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* use sane defaults */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>nodeIdList</name></name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>entry</name><operator>-&gt;</operator><name>writeLocalFile</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>entry</name></expr>;</return>
</block_content>}</block></function>
</unit>
