<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/connection/worker_log_messages.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * worker_log_messages.c
 *   Logic for handling log messages from workers.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/error_codes.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/errormessage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/log_utils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/worker_log_messages.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/elog.h"</cpp:file></cpp:include>


<comment type="block">/*
 * WorkerMinMessages reflects the value of the citus.worker_min_messages setting which
 * control the minimum log level of messages from the worker that are propagated to the
 * client and the log on the coordinator.
 */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>WorkerMinMessages</name> <init>= <expr><name>NOTICE</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * PreserveWorkerMessageLogLevel specifies whether to propagate messages from workers
 * to the client and the log on the coordinator with their original log level. When
 * false, messages are propagated using DEBUG1.
 *
 * This flag used to suppress redundant notices in some commands (e.g. VACUUM, DROP
 * TABLE).
 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>PreserveWorkerMessageLogLevel</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*
 * WorkerErrorIndication can contain a warning that arrives to use from one session, but occurred
 * because another session in the same distributed transaction threw an error. We store
 * this warning in case we do not get an error, in which case the warning should have
 * been an error (and usually indicates a bug).
 */</comment>
<decl_stmt><decl><type><name>DeferredErrorMessage</name> <modifier>*</modifier></type><name>WorkerErrorIndication</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block">/* list of log level names we might see from the worker */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>LogLevelNames</name><index>[]</index></name> <init>= <expr><block>{
	<expr><literal type="string">"DEBUG"</literal></expr>,
	<expr><literal type="string">"NOTICE"</literal></expr>,
	<expr><literal type="string">"INFO"</literal></expr>,
	<expr><literal type="string">"WARNING"</literal></expr>,
	<expr><literal type="string">"ERROR"</literal></expr>,
	<expr><literal type="string">"FATAL"</literal></expr>,
	<expr><literal type="string">"PANIC"</literal></expr>,
	<expr><name>NULL</name></expr>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* postgres log level values corresponding to LogLevelNames */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name><name>LogLevels</name><index>[]</index></name> <init>= <expr><block>{
	<expr><name>DEBUG1</name></expr>,
	<expr><name>NOTICE</name></expr>,
	<expr><name>INFO</name></expr>,
	<expr><name>WARNING</name></expr>,
	<expr><name>ERROR</name></expr>,
	<expr><name>FATAL</name></expr>,
	<expr><name>PANIC</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>DefaultCitusNoticeReceiver</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>LogLevelNameToLogLevel</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>levelName</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>TrimLogLevel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * SetCitusNoticeReceiver sets the NoticeReceiver to DefaultCitusNoticeReceivere
 */</comment>
<function><type><name>void</name></type>
<name>SetCitusNoticeReceiver</name><parameter_list>(<parameter><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PQsetNoticeReceiver</name><argument_list>(<argument><expr><name><name>connection</name><operator>-&gt;</operator><name>pgConn</name></name></expr></argument>, <argument><expr><name>DefaultCitusNoticeReceiver</name></expr></argument>,
						<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * EnableWorkerMessagePropagation indicates that we want to propagate messages
 * from workers to the client using the same log level.
 */</comment>
<function><type><name>void</name></type>
<name>EnableWorkerMessagePropagation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>PreserveWorkerMessageLogLevel</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DisableWorkerMessagePropagation indiciates that we want all messages from the
 * workers to only be sent to the client as debug messages.
 */</comment>
<function><type><name>void</name></type>
<name>DisableWorkerMessagePropagation</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>PreserveWorkerMessageLogLevel</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * DefaultCitusNoticeReceiver is used to redirect worker notices
 * from logfile to console.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>DefaultCitusNoticeReceiver</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>PGresult</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><operator>(</operator><name>MultiConnection</name> <operator>*</operator><operator>)</operator> <name>arg</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name> <init>= <expr><name><name>connection</name><operator>-&gt;</operator><name>hostname</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>nodePort</name> <init>= <expr><name><name>connection</name><operator>-&gt;</operator><name>port</name></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>message</name> <init>= <expr><call><name>PQresultErrorMessage</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>trimmedMessage</name> <init>= <expr><call><name>TrimLogLevel</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>levelName</name> <init>= <expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_SEVERITY</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>logLevel</name> <init>= <expr><call><name>LogLevelNameToLogLevel</name><argument_list>(<argument><expr><name>levelName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>sqlState</name> <init>= <expr><name>ERRCODE_INTERNAL_ERROR</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sqlStateString</name> <init>= <expr><call><name>PQresultErrorField</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>PG_DIAG_SQLSTATE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>sqlStateString</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>sqlState</name> <operator>=</operator> <call><name>MAKE_SQLSTATE</name><argument_list>(<argument><expr><name><name>sqlStateString</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>sqlStateString</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>sqlStateString</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>sqlStateString</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>,
								 <argument><expr><name><name>sqlStateString</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * When read_intermediate_result cannot find a file it might mean that the
	 * transaction that created the file already deleted it because it aborted.
	 * That's an expected situation, unless there is no actual error. We
	 * therefore store a DeferredError and raise it if we reach the end of
	 * execution without errors.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>sqlState</name> <operator>==</operator> <name>ERRCODE_CITUS_INTERMEDIATE_RESULT_NOT_FOUND</name> <operator>&amp;&amp;</operator> <name>logLevel</name> <operator>==</operator> <name>WARNING</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>WorkerErrorIndication</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<comment type="block">/* we'll at most need this for the lifetime of the transaction */</comment>
			<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><name>WorkerErrorIndication</name> <operator>=</operator> <call><name>DeferredError</name><argument_list>(<argument><expr><name>sqlState</name></expr></argument>, <argument><expr><call><name>pstrdup</name><argument_list>(<argument><expr><name>trimmedMessage</name></expr></argument>)</argument_list></call></expr></argument>,
												  <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* if we get the error we're expecting, the user does not need to know */</comment>
		<expr_stmt><expr><name>logLevel</name> <operator>=</operator> <name>DEBUG4</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name>logLevel</name> <operator>&lt;</operator> <name>WorkerMinMessages</name> <operator>||</operator> <name>WorkerMinMessages</name> <operator>==</operator> <name>CITUS_LOG_LEVEL_OFF</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* user does not want to see message */</comment>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>PreserveWorkerMessageLogLevel</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * We sometimes want to suppress notices (e.g. DROP TABLE cascading),
		 * since the user already gets the relevant notices for the distributed
		 * table. In that case, we change the log level to DEBUG1.
		 */</comment>
		<expr_stmt><expr><name>logLevel</name> <operator>=</operator> <name>DEBUG1</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>logLevel</name></expr></argument>,
			<argument><expr><operator>(</operator><call><name>errcode</name><argument_list>(<argument><expr><name>sqlState</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>trimmedMessage</name></expr></argument>)</argument_list></call><operator>,</operator>
			 <call><name>errdetail</name><argument_list>(<argument><expr><literal type="string">"from %s:%d"</literal></expr></argument>, <argument><expr><name>nodeName</name></expr></argument>, <argument><expr><name>nodePort</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * TrimLogLevel returns a copy of the string with the leading log level
 * and spaces removed such as
 *      From:
 *          INFO:  "normal2_102070": scanned 0 of 0 pages...
 *      To:
 *          "normal2_102070": scanned 0 of 0 pages...
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>TrimLogLevel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>message</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>chompedMessage</name> <init>= <expr><call><name>pchomp</name><argument_list>(<argument><expr><name>message</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>chompedMessage</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>chompedMessage</name><index>[<expr><name>n</name></expr>]</index></name> <operator>!=</operator> <literal type="char">':'</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<do>do <block>{<block_content>
		<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block> while <condition>(<expr><name>n</name> <operator>&lt;</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>chompedMessage</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>chompedMessage</name><index>[<expr><name>n</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition>;</do>

	<return>return <expr><name>chompedMessage</name> <operator>+</operator> <name>n</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * LogLevelNameToLogLevel translates the prefix of Postgres log messages
 * back to a native log level.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>LogLevelNameToLogLevel</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>levelName</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>levelIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<while>while <condition>(<expr><name><name>LogLevelNames</name><index>[<expr><name>levelIndex</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>levelName</name></expr></argument>, <argument><expr><name><name>LogLevelNames</name><index>[<expr><name>levelIndex</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name><name>LogLevels</name><index>[<expr><name>levelIndex</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>levelIndex</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><name>DEBUG1</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * ErrorIfWorkerErrorIndicationReceived throws the deferred error in
 * WorkerErrorIndication, if any.
 *
 * A fatal warning arrives to us as a WARNING in one session, that is triggered
 * by an ERROR in another session in the same distributed transaction. We therefore
 * do not expect to throw it, unless there is a bug in Citus.
 */</comment>
<function><type><name>void</name></type>
<name>ErrorIfWorkerErrorIndicationReceived</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>WorkerErrorIndication</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RaiseDeferredError</name><argument_list>(<argument><expr><name>WorkerErrorIndication</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ResetWorkerErrorIndication resets the fatal warning if one was received.
 */</comment>
<function><type><name>void</name></type>
<name>ResetWorkerErrorIndication</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><name>WorkerErrorIndication</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
