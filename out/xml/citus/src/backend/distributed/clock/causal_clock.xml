<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/builded_projects/citus/src/backend/distributed/clock/causal_clock.c"><comment type="block">/*-------------------------------------------------------------------------
 * causal_clock.c
 *
 * Core function defintions to implement hybrid logical clock.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fmgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/datum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/numeric.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/typcache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"nodes/pg_list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/extension.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/spi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postmaster/postmaster.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/ipc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/lwlock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/shmem.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/spin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s_lock.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/causal_clock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/lock_graph.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/local_executor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/remote_commands.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/placement_connection.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/coordinator_protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAVE_AND_PERSIST</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro> \
	<cpp:value>do { \
		Oid savedUserId = InvalidOid; \
		int savedSecurityContext = 0; \
		LogicalClockShmem-&gt;clusterClockValue = *(c); \
		GetUserIdAndSecContext(&amp;savedUserId, &amp;savedSecurityContext); \
		SetUserIdAndSecContext(CitusExtensionOwner(), SECURITY_LOCAL_USERID_CHANGE); \
		DirectFunctionCall2(setval_oid, \
							ObjectIdGetDatum(DistClockLogicalSequenceId()), \
							Int64GetDatum((c)-&gt;logical)); \
		SetUserIdAndSecContext(savedUserId, savedSecurityContext); \
	} while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_get_node_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_internal_adjust_local_clock_to_remote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_is_clock_after</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>citus_get_transaction_clock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * Current state of the logical clock
 */</comment>
<typedef>typedef <type><enum>enum <name>ClockState</name>
<block>{
	<decl><name>CLOCKSTATE_INITIALIZED</name></decl>,
	<decl><name>CLOCKSTATE_UNINITIALIZED</name></decl>
}</block></enum></type> <name>ClockState</name>;</typedef>

<comment type="block">/*
 * Holds the cluster clock variables in shared memory.
 */</comment>
<typedef>typedef <type><struct>struct <name>LogicalClockShmemData</name>
<block>{
	<decl_stmt><decl><type><name>NamedLWLockTranche</name></type> <name>namedLockTranche</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>LWLock</name></type> <name>clockLock</name></decl>;</decl_stmt>

	<comment type="block">/* Current logical clock value of this node */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name></type> <name>clusterClockValue</name></decl>;</decl_stmt>

	<comment type="block">/* Tracks initialization at boot */</comment>
	<decl_stmt><decl><type><name>ClockState</name></type> <name>clockInitialized</name></decl>;</decl_stmt>
}</block></struct></type> <name>LogicalClockShmemData</name>;</typedef>


<decl_stmt><decl><type><specifier>static</specifier> <name>shmem_startup_hook_type</name></type> <name>prev_shmem_startup_hook</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>LogicalClockShmemData</name> <modifier>*</modifier></type><name>LogicalClockShmem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AdjustLocalClock</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>remoteClock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>GetNextNodeClockValue</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>nextClusterClockValue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type> <name>GetHighestClockInTransaction</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>nodeConnectionList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>AdjustClocksToTransactionHighest</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>nodeConnectionList</name></decl></parameter>,
											 <parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>transactionClockValue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>InitClockAtFirstUse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>IncrementClusterClock</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type> <name>LargerClock</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name></decl></parameter>, <parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type> <name>PrepareAndSetTransactionClock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>bool</name></type> <name>EnableClusterClock</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
 * GetEpochTimeAsClock returns the epoch value milliseconds used as logical
 * value in ClusterClock.
 */</comment>
<function><type><name>ClusterClock</name> <modifier>*</modifier></type>
<name>GetEpochTimeAsClock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tp</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>gettimeofday</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> <name>result</name> <init>= <expr><operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><name><name>tp</name><operator>.</operator><name>tv_sec</name></name><operator>)</operator> <operator>*</operator> <literal type="number">1000</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name> <operator>=</operator> <name>result</name> <operator>+</operator> <operator>(</operator><name>uint64</name><operator>)</operator> <operator>(</operator><name><name>tp</name><operator>.</operator><name>tv_usec</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>epochClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ClusterClock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>epochClock</name><operator>-&gt;</operator><name>logical</name></name> <operator>=</operator> <name>result</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>epochClock</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

	<return>return <expr><name>epochClock</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * LogicalClockShmemSize returns the size that should be allocated
 * in the shared memory for logical clock management.
 */</comment>
<function><type><name>size_t</name></type>
<name>LogicalClockShmemSize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>add_size</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>LogicalClockShmemData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>size</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * InitializeClusterClockMem reserves shared-memory space needed to
 * store LogicalClockShmemData, and sets the hook for initialization
 * of the same.
 */</comment>
<function><type><name>void</name></type>
<name>InitializeClusterClockMem</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* On PG 15 and above, we use shmem_request_hook_type */</comment>
	<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&lt;</operator> <name>PG_VERSION_15</name></expr></cpp:if>

	<comment type="block">/* allocate shared memory for pre PG-15 versions */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>IsUnderPostmaster</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>RequestAddinShmemSpace</name><argument_list>(<argument><expr><call><name>LogicalClockShmemSize</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr_stmt><expr><name>prev_shmem_startup_hook</name> <operator>=</operator> <name>shmem_startup_hook</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>shmem_startup_hook</name> <operator>=</operator> <name>LogicalClockShmemInit</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * LogicalClockShmemInit Allocates and initializes shared memory for
 * cluster clock related variables.
 */</comment>
<function><type><name>void</name></type>
<name>LogicalClockShmemInit</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>alreadyInitialized</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>LogicalClockShmem</name> <operator>=</operator> <operator>(</operator><name>LogicalClockShmemData</name> <operator>*</operator><operator>)</operator>
						<call><name>ShmemInitStruct</name><argument_list>(<argument><expr><literal type="string">"Logical Clock Shmem"</literal></expr></argument>,
										<argument><expr><call><name>LogicalClockShmemSize</name><argument_list>()</argument_list></call></expr></argument>,
										<argument><expr><operator>&amp;</operator><name>alreadyInitialized</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>alreadyInitialized</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* A zero value indicates that the clock is not adjusted yet */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clusterClockValue</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ClusterClock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>namedLockTranche</name><operator>.</operator><name>trancheName</name></name> <operator>=</operator> <literal type="string">"Cluster Clock Setup Tranche"</literal></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>namedLockTranche</name><operator>.</operator><name>trancheId</name></name> <operator>=</operator> <call><name>LWLockNewTrancheId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockRegisterTranche</name><argument_list>(<argument><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>namedLockTranche</name><operator>.</operator><name>trancheId</name></name></expr></argument>,
							  <argument><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>namedLockTranche</name><operator>.</operator><name>trancheName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LWLockInitialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>,
						 <argument><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>namedLockTranche</name><operator>.</operator><name>trancheId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockInitialized</name></name> <operator>=</operator> <name>CLOCKSTATE_UNINITIALIZED</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><name>AddinShmemInitLock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>prev_shmem_startup_hook</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>prev_shmem_startup_hook</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * IncrementClusterClock increments the ClusterClock by 1.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>IncrementClusterClock</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * It's the counter that always ticks, once it reaches the maximum, reset
	 * the counter to 1 and increment the logical clock.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name> <operator>==</operator> <name>MAX_COUNTER</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>logical</name></name><operator>++</operator></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>clusterClock</name><operator>-&gt;</operator><name>counter</name></name><operator>++</operator></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * LargerClock compares two ClusterClock(s) and returns pointer to the larger one.
 * Note: If equal or one of the clock is NULL, non NULL clock is copied.
 */</comment>
<function><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type>
<name>LargerClock</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name></decl></parameter>, <parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* Check if one of the paramater is NULL */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>clock1</name> <operator>||</operator> <operator>!</operator><name>clock2</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>clock1</name> <operator>||</operator> <name>clock2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>(</operator><ternary><condition><expr><operator>!</operator><name>clock1</name></expr> ?</condition><then> <expr><name>clock2</name></expr> </then><else>: <expr><name>clock1</name></expr></else></ternary><operator>)</operator></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>clock1</name></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<return>return <expr><name>clock2</name></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetNextNodeClock implements the internal guts of the UDF citus_get_node_clock()
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>GetNextNodeClockValue</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>nextClusterClockValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>static</specifier> <name>bool</name></type> <name>isClockInitChecked</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt> <comment type="block">/* serves as a local cache */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>epochValue</name> <init>= <expr><call><name>GetEpochTimeAsClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* If this backend already checked for initialization, skip it */</comment>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>isClockInitChecked</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>InitClockAtFirstUse</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* We reach here only if CLOCKSTATE_INITIALIZED, all other cases error out. */</comment>
		<expr_stmt><expr><name>isClockInitChecked</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockInitialized</name></name> <operator>==</operator> <name>CLOCKSTATE_INITIALIZED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Tick the clock */</comment>
	<expr_stmt><expr><call><name>IncrementClusterClock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clusterClockValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Pick the larger of the two, wallclock and logical clock. */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clockValue</name> <init>= <expr><call><name>LargerClock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clusterClockValue</name></name></expr></argument>,
										   <argument><expr><name>epochValue</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Save the returned value in both the shared memory and sequences.
	 */</comment>
	<expr_stmt><expr><call><name>SAVE_AND_PERSIST</name><argument_list>(<argument><expr><name>clockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Return the clock */</comment>
	<expr_stmt><expr><operator>*</operator><name>nextClusterClockValue</name> <operator>=</operator> <operator>*</operator><name>clockValue</name></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * AdjustLocalClock Adjusts the local shared memory clock to the
 * received value from the remote node.
 */</comment>
<function><type><name>void</name></type>
<name>AdjustLocalClock</name><parameter_list>(<parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>remoteClock</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>localClock</name> <init>= <expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clusterClockValue</name></name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* local clock is ahead or equal, do nothing */</comment>
	<if_stmt><if>if <condition>(<expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>localClock</name></expr></argument>, <argument><expr><name>remoteClock</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>SAVE_AND_PERSIST</name><argument_list>(<argument><expr><name>remoteClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"adjusted to remote clock: "</literal>
							<literal type="string">"&lt;logical(%lu) counter(%u)&gt;"</literal></expr></argument>,
							<argument><expr><name><name>remoteClock</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>,
							<argument><expr><name><name>remoteClock</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * GetHighestClockInTransaction takes the connection list of participating nodes in the
 * current transaction and polls the logical clock value of all the nodes. Returns the
 * highest logical clock value of all the nodes in the current distributed transaction,
 * which may be used as commit order for individual objects in the transaction.
 */</comment>
<function><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type>
<name>GetHighestClockInTransaction</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>nodeConnectionList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<macro><name>foreach_ptr</name><argument_list>(<argument>connection</argument>, <argument>nodeConnectionList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>int</name></type> <name>querySent</name> <init>=
			<expr><call><name>SendRemoteCommand</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><literal type="string">"SELECT citus_get_node_clock();"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>querySent</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ReportConnectionError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>

	<comment type="block">/* Check for the current node */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>globalClockValue</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ClusterClock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetNextNodeClockValue</name><argument_list>(<argument><expr><name>globalClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"node(%u) transaction clock %lu:%u"</literal></expr></argument>,
							<argument><expr><name>PostPortNumber</name></expr></argument>, <argument><expr><name><name>globalClockValue</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>,
							<argument><expr><name><name>globalClockValue</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* fetch the results and pick the highest clock value of all the nodes */</comment>
	<macro><name>foreach_ptr</name><argument_list>(<argument>connection</argument>, <argument>nodeConnectionList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>bool</name></type> <name>raiseInterrupts</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name><name>connection</name><operator>-&gt;</operator><name>pgConn</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>CONNECTION_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"connection to %s:%d failed when "</literal>
								   <literal type="string">"fetching logical clock value"</literal></expr></argument>,
								   <argument><expr><name><name>connection</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>connection</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>PGresult</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>GetRemoteCommandResult</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>raiseInterrupts</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IsResponseOK</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ReportResultError</name><argument_list>(<argument><expr><name>connection</name></expr></argument>, <argument><expr><name>result</name></expr></argument>, <argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>nodeClockValue</name> <init>= <expr><call><name>ParseClusterClockPGresult</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"node(%u) transaction clock %lu:%u"</literal></expr></argument>,
								<argument><expr><name><name>connection</name><operator>-&gt;</operator><name>port</name></name></expr></argument>, <argument><expr><name><name>nodeClockValue</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>,
								<argument><expr><name><name>nodeClockValue</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>globalClockValue</name> <operator>=</operator> <call><name>LargerClock</name><argument_list>(<argument><expr><name>globalClockValue</name></expr></argument>, <argument><expr><name>nodeClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>PQclear</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ForgetResults</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"final global transaction clock %lu:%u"</literal></expr></argument>,
							<argument><expr><name><name>globalClockValue</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>,
							<argument><expr><name><name>globalClockValue</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>globalClockValue</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * AdjustClocksToTransactionHighest Sets the clock value of all the nodes, participated
 * in the PREPARE of the transaction, to the highest clock value of all the nodes.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>AdjustClocksToTransactionHighest</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>nodeConnectionList</name></decl></parameter>,
								 <parameter><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>transactionClockValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>StringInfo</name></type> <name>queryToSend</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Set the clock value on participating worker nodes */</comment>
	<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>queryToSend</name></expr></argument>,
					 <argument><expr><literal type="string">"SELECT pg_catalog.citus_internal_adjust_local_clock_to_remote"</literal>
					 <literal type="string">"('(%lu, %u)'::pg_catalog.cluster_clock);"</literal></expr></argument>,
					 <argument><expr><name><name>transactionClockValue</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>, <argument><expr><name><name>transactionClockValue</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>ExecuteRemoteCommandInConnectionList</name><argument_list>(<argument><expr><name>nodeConnectionList</name></expr></argument>, <argument><expr><name><name>queryToSend</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>AdjustLocalClock</name><argument_list>(<argument><expr><name>transactionClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * PrepareAndSetTransactionClock polls all the transaction-nodes for their respective clocks,
 * picks the highest clock and returns it via UDF citus_get_transaction_clock. All the nodes
 * will now move to this newly negotiated clock.
 */</comment>
<function><type><specifier>static</specifier> <name>ClusterClock</name> <modifier>*</modifier></type>
<name>PrepareAndSetTransactionClock</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>EnableClusterClock</name></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* citus.enable_cluster_clock is false */</comment>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"GUC enable_cluster_clock is off"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>dlist_iter</name></type> <name>iter</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>transactionNodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>nodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Prepare the connection list */</comment>
	<macro><name>dlist_foreach</name><argument_list>(<argument>iter</argument>, <argument>&amp;InProgressTransactions</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>dlist_container</name><argument_list>(<argument><expr><name>MultiConnection</name></expr></argument>, <argument><expr><name>transactionNode</name></expr></argument>,
													  <argument><expr><name><name>iter</name><operator>.</operator><name>cur</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>FindWorkerNode</name><argument_list>(<argument><expr><name><name>connection</name><operator>-&gt;</operator><name>hostname</name></name></expr></argument>, <argument><expr><name><name>connection</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Skip the node if we already in the list */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>list_member_int</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>RemoteTransaction</name> <modifier>*</modifier></type><name>transaction</name> <init>= <expr><operator>&amp;</operator><name><name>connection</name><operator>-&gt;</operator><name>remoteTransaction</name></name></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>transaction</name><operator>-&gt;</operator><name>transactionState</name></name> <operator>!=</operator> <name>REMOTE_TRANS_NOT_STARTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/* Skip a transaction that failed */</comment>
		<if_stmt><if>if <condition>(<expr><name><name>transaction</name><operator>-&gt;</operator><name>transactionFailed</name></name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><name>nodeList</name> <operator>=</operator> <call><name>lappend_int</name><argument_list>(<argument><expr><name>nodeList</name></expr></argument>, <argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>groupId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>transactionNodeList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>transactionNodeList</name></expr></argument>, <argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* Pick the highest logical clock value among all transaction-nodes */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>transactionClockValue</name> <init>=
		<expr><call><name>GetHighestClockInTransaction</name><argument_list>(<argument><expr><name>transactionNodeList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Adjust all the nodes with the new clock value */</comment>
	<expr_stmt><expr><call><name>AdjustClocksToTransactionHighest</name><argument_list>(<argument><expr><name>transactionNodeList</name></expr></argument>, <argument><expr><name>transactionClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>transactionClockValue</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * InitClockAtFirstUse Initializes the shared memory clock value to the highest clock
 * persisted. This will protect from any clock drifts.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>InitClockAtFirstUse</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LWLockAcquire</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>, <argument><expr><name>LW_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Avoid repeated and parallel initialization */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockInitialized</name></name> <operator>==</operator> <name>CLOCKSTATE_INITIALIZED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>DistClockLogicalSequenceId</name><argument_list>()</argument_list></call> <operator>==</operator> <name>InvalidOid</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"Clock related sequence is missing"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* Start with the wall clock value */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>epochValue</name> <init>= <expr><call><name>GetEpochTimeAsClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clusterClockValue</name></name> <operator>=</operator> <operator>*</operator><name>epochValue</name></expr>;</expr_stmt>

	<comment type="block">/*  Retrieve the highest clock value persisted in the sequence */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name></type> <name>persistedMaxClock</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * We will get one more than the persisted value, but that's harmless and
	 * also very _crucial_ in below scenarios
	 *
	 * 1) As sequences are not transactional, this will protect us from crashes
	 *    after the logical increment and before the counter increment.
	 *
	 * 2) If a clock drifts backwards, we should always start one clock above
	 *    the previous value, though we are not persisting the counter as the
	 *    logical value supersedes the counter, a simple increment of it will
	 *    protect us.
	 *
	 * Note: The first (and every 32nd) call to nextval() consumes 32 values in the
	 * WAL. This is an optimization that postgres does to only have to write a WAL
	 * entry every 32 invocations. Normally this is harmless, however, if the database
	 * gets in a crashloop it could outrun the wall clock, if the database crashes at
	 * a higher rate than once every 32 seconds.
	 *
	 */</comment>
	<decl_stmt><decl><type><name>Oid</name></type> <name>saveUserId</name> <init>= <expr><name>InvalidOid</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>savedSecurityCtx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetUserIdAndSecContext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>saveUserId</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>savedSecurityCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><call><name>CitusExtensionOwner</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>SECURITY_LOCAL_USERID_CHANGE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>persistedMaxClock</name><operator>.</operator><name>logical</name></name> <operator>=</operator>
		<call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>nextval_oid</name></expr></argument>, <argument><expr><call><name>ObjectIdGetDatum</name><argument_list>(<argument><expr><call><name>DistClockLogicalSequenceId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>SetUserIdAndSecContext</name><argument_list>(<argument><expr><name>saveUserId</name></expr></argument>, <argument><expr><name>savedSecurityCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Sequence 1 indicates no prior clock timestamps on this server, retain
	 * the wall clock i.e. no adjustment needed.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>persistedMaxClock</name><operator>.</operator><name>logical</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"adjusting the clock with persisted value: "</literal>
								<literal type="string">"&lt;logical(%lu) and counter(%u)&gt;"</literal></expr></argument>,
								<argument><expr><name><name>persistedMaxClock</name><operator>.</operator><name>logical</name></name></expr></argument>,
								<argument><expr><name><name>persistedMaxClock</name><operator>.</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Adjust the local clock according to the most recent
		 * clock stamp value persisted in the catalog.
		 */</comment>
		<if_stmt><if>if <condition>(<expr><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><operator>&amp;</operator><name>persistedMaxClock</name></expr></argument>, <argument><expr><name>epochValue</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>SAVE_AND_PERSIST</name><argument_list>(<argument><expr><operator>&amp;</operator><name>persistedMaxClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>NOTICE</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"clock drifted backwards, adjusted to: "</literal>
									<literal type="string">"&lt;logical(%lu) counter(%u)&gt;"</literal></expr></argument>,
									<argument><expr><name><name>persistedMaxClock</name><operator>.</operator><name>logical</name></name></expr></argument>,
									<argument><expr><name><name>persistedMaxClock</name><operator>.</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockInitialized</name></name> <operator>=</operator> <name>CLOCKSTATE_INITIALIZED</name></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>LWLockRelease</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>LogicalClockShmem</name><operator>-&gt;</operator><name>clockLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_get_node_clock() is an UDF that returns a monotonically increasing
 * logical clock. Clock guarantees to never go back in value after restarts, and
 * makes best attempt to keep the value close to unix epoch time in milliseconds.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_get_node_clock</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>nodeClockValue</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>palloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ClusterClock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>GetNextNodeClockValue</name><argument_list>(<argument><expr><name>nodeClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>nodeClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_internal_adjust_local_clock_to_remote is an internal UDF to adjust
 * the local clock to the highest in the cluster.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_internal_adjust_local_clock_to_remote</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>remoteClock</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>AdjustLocalClock</name><argument_list>(<argument><expr><name>remoteClock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_is_clock_after is an UDF that accepts logical clock timestamps of
 * two causally related events and returns true if the argument1 happened
 * before argument2.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_is_clock_after</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* Fetch both the arguments */</comment>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock1</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clock2</name> <init>= <expr><operator>(</operator><name>ClusterClock</name> <operator>*</operator><operator>)</operator> <call><name>PG_GETARG_POINTER</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>DEBUG1</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(
						 <argument><expr><literal type="string">"clock1 @ LC:%lu, C:%u, "</literal>
						 <literal type="string">"clock2 @ LC:%lu, C:%u"</literal></expr></argument>,
						 <argument><expr><name><name>clock1</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>, <argument><expr><name><name>clock1</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>,
						 <argument><expr><name><name>clock2</name><operator>-&gt;</operator><name>logical</name></name></expr></argument>, <argument><expr><name><name>clock2</name><operator>-&gt;</operator><name>counter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><operator>(</operator><call><name>cluster_clock_cmp_internal</name><argument_list>(<argument><expr><name>clock1</name></expr></argument>, <argument><expr><name>clock2</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * citus_get_transaction_clock() is an UDF that returns a transaction timestamp
 * logical clock. Clock returned is the maximum of all transaction-nodes and the
 * all the nodes adjust to the this new clock value.
 */</comment>
<function><type><name>Datum</name></type>
<name>citus_get_transaction_clock</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ClusterClock</name> <modifier>*</modifier></type><name>clusterClockValue</name> <init>= <expr><call><name>PrepareAndSetTransactionClock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><name>clusterClockValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
