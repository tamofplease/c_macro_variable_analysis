<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/test/fake_am.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * fake_am.c
 *	  fake table access method code
 *
 * Copyright (c) Citus Data, Inc.
 *
 * IDENTIFICATION
 *	  Based on https://github.com/michaelpq/pg_plugins/blob/master/blackhole_am/blackhole_am.c
 *
 *
 * NOTES
 *	  This file introduces the table access method "fake", which delegates
 *    bare minimum functionality for testing to heapam to provide an append
 *    only access method, and doesn't implement rest of the functionality.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/pg_version_constants.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pg_version_compat.h"</cpp:file></cpp:include>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/amapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/heapam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/tableam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/multixact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"access/xact.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/index.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/storage_xlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"commands/vacuum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"executor/tuptable.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/smgr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/snapmgr.h"</cpp:file></cpp:include>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>fake_am_handler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TableAmRoutine</name></type> <name>fake_methods</name></decl>;</decl_stmt>


<comment type="block">/* ------------------------------------------------------------------------
 * Slot related callbacks for fake AM
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>TupleTableSlotOps</name> <modifier>*</modifier></type>
<name>fake_slot_callbacks</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>&amp;</operator><name>TTSOpsBufferHeapTuple</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Table Scan Callbacks for fake AM
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>TableScanDesc</name></type>
<name>fake_scan_begin</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
				<parameter><decl><type><name>int</name></type> <name>nkeys</name></decl></parameter>, <parameter><decl><type><name>ScanKey</name></type> <name>key</name></decl></parameter>,
				<parameter><decl><type><name>ParallelTableScanDesc</name></type> <name>parallel_scan</name></decl></parameter>,
				<parameter><decl><type><name>uint32</name></type> <name>flags</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><call><name>heap_beginscan</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>snapshot</name></expr></argument>, <argument><expr><name>nkeys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>parallel_scan</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_scan_end</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>sscan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>heap_endscan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_scan_rescan</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>sscan</name></decl></parameter>, <parameter><decl><type><name>ScanKey</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>set_params</name></decl></parameter>,
				 <parameter><decl><type><name>bool</name></type> <name>allow_strat</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_sync</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>allow_pagemode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>heap_rescan</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>set_params</name></expr></argument>, <argument><expr><name>allow_strat</name></expr></argument>, <argument><expr><name>allow_sync</name></expr></argument>, <argument><expr><name>allow_pagemode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_getnextslot</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>sscan</name></decl></parameter>, <parameter><decl><type><name>ScanDirection</name></type> <name>direction</name></decl></parameter>,
					  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"fake_scan_getnextslot"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><call><name>heap_getnextslot</name><argument_list>(<argument><expr><name>sscan</name></expr></argument>, <argument><expr><name>direction</name></expr></argument>, <argument><expr><name>slot</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Index Scan Callbacks for fake AM
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>IndexFetchTableData</name> <modifier>*</modifier></type>
<name>fake_index_fetch_begin</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_fetch_begin not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_index_fetch_reset</name><parameter_list>(<parameter><decl><type><name>IndexFetchTableData</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_fetch_reset not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_index_fetch_end</name><parameter_list>(<parameter><decl><type><name>IndexFetchTableData</name> <modifier>*</modifier></type><name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_fetch_end not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_index_fetch_tuple</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>IndexFetchTableData</name></name> <modifier>*</modifier></type><name>scan</name></decl></parameter>,
					   <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>,
					   <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
					   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
					   <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>call_again</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>all_dead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_fetch_tuple not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Callbacks for non-modifying operations on individual tuples for
 * fake AM.
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_fetch_row_version</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>,
					   <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>,
					   <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
					   <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_fetch_row_version not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_get_latest_tid</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>sscan</name></decl></parameter>,
					<parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_get_latest_tid not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_tuple_tid_valid</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_tid_valid not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_tuple_satisfies_snapshot</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
							  <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_satisfies_snapshot not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_14</name></expr></cpp:if>
<function><type><specifier>static</specifier> <name>TransactionId</name></type>
<name>fake_index_delete_tuples</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
						 <parameter><decl><type><name>TM_IndexDeleteOp</name> <modifier>*</modifier></type><name>delstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_delete_tuples not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>InvalidTransactionId</name></expr>;</return>
</block_content>}</block></function>


<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>TransactionId</name></type>
<name>fake_compute_xid_horizon_for_tuples</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
									<parameter><decl><type><name>ItemPointerData</name> <modifier>*</modifier></type><name>tids</name></decl></parameter>,
									<parameter><decl><type><name>int</name></type> <name>nitems</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_compute_xid_horizon_for_tuples not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>InvalidTransactionId</name></expr>;</return>
</block_content>}</block></function>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/* ----------------------------------------------------------------------------
 *  Functions for manipulations of physical tuples for fake AM.
 * ----------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_tuple_insert</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
				  <parameter><decl><type><name>CommandId</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>, <parameter><decl><type><name>BulkInsertState</name></type> <name>bistate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"fake_tuple_insert"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * Code below this point is from heapam_tuple_insert from
	 * heapam_handler.c
	 */</comment>

	<decl_stmt><decl><type><name>bool</name></type> <name>shouldFree</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>HeapTuple</name></type> <name>tuple</name> <init>= <expr><call><name>ExecFetchSlotHeapTuple</name><argument_list>(<argument><expr><name>slot</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>shouldFree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* Update the tuple with table oid */</comment>
	<expr_stmt><expr><name><name>slot</name><operator>-&gt;</operator><name>tts_tableOid</name></name> <operator>=</operator> <call><name>RelationGetRelid</name><argument_list>(<argument><expr><name>relation</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tuple</name><operator>-&gt;</operator><name>t_tableOid</name></name> <operator>=</operator> <name><name>slot</name><operator>-&gt;</operator><name>tts_tableOid</name></name></expr>;</expr_stmt>

	<comment type="block">/* Perform the insertion, and copy the resulting ItemPointer */</comment>
	<expr_stmt><expr><call><name>heap_insert</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>tuple</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>bistate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>ItemPointerCopy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tuple</name><operator>-&gt;</operator><name>t_self</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>slot</name><operator>-&gt;</operator><name>tts_tid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name>shouldFree</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>tuple</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_tuple_insert_speculative</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
							  <parameter><decl><type><name>CommandId</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
							  <parameter><decl><type><name>BulkInsertState</name></type> <name>bistate</name></decl></parameter>,
							  <parameter><decl><type><name>uint32</name></type> <name>specToken</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_insert_speculative not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_tuple_complete_speculative</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>,
								<parameter><decl><type><name>uint32</name></type> <name>spekToken</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>succeeded</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_complete_speculative not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_multi_insert</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier><modifier>*</modifier></type><name>slots</name></decl></parameter>,
				  <parameter><decl><type><name>int</name></type> <name>ntuples</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>,
				  <parameter><decl><type><name>BulkInsertState</name></type> <name>bistate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"fake_multi_insert"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>heap_multi_insert</name><argument_list>(<argument><expr><name>relation</name></expr></argument>, <argument><expr><name>slots</name></expr></argument>, <argument><expr><name>ntuples</name></expr></argument>, <argument><expr><name>cid</name></expr></argument>, <argument><expr><name>options</name></expr></argument>, <argument><expr><name>bistate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>TM_Result</name></type>
<name>fake_tuple_delete</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>cid</name></decl></parameter>,
				  <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>crosscheck</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>wait</name></decl></parameter>,
				  <parameter><decl><type><name>TM_FailureData</name> <modifier>*</modifier></type><name>tmfd</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>changingPart</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_delete not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>TM_Result</name></type>
<name>fake_tuple_update</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>otid</name></decl></parameter>,
				  <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>cid</name></decl></parameter>,
				  <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>crosscheck</name></decl></parameter>,
				  <parameter><decl><type><name>bool</name></type> <name>wait</name></decl></parameter>, <parameter><decl><type><name>TM_FailureData</name> <modifier>*</modifier></type><name>tmfd</name></decl></parameter>,
				  <parameter><decl><type><name>LockTupleMode</name> <modifier>*</modifier></type><name>lockmode</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>update_indexes</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_update not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>TM_Result</name></type>
<name>fake_tuple_lock</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>ItemPointer</name></type> <name>tid</name></decl></parameter>, <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
				<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>, <parameter><decl><type><name>CommandId</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>LockTupleMode</name></type> <name>mode</name></decl></parameter>,
				<parameter><decl><type><name>LockWaitPolicy</name></type> <name>wait_policy</name></decl></parameter>, <parameter><decl><type><name>uint8</name></type> <name>flags</name></decl></parameter>,
				<parameter><decl><type><name>TM_FailureData</name> <modifier>*</modifier></type><name>tmfd</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_tuple_lock not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_finish_bulk_insert</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>relation</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>options</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* nothing to do here */</comment>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * DDL related callbacks for fake AM.
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_relation_set_new_filenode</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>,
							   <parameter><decl><type><specifier>const</specifier> <name>RelFileNode</name> <modifier>*</modifier></type><name>newrnode</name></decl></parameter>,
							   <parameter><decl><type><name>char</name></type> <name>persistence</name></decl></parameter>,
							   <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>freezeXid</name></decl></parameter>,
							   <parameter><decl><type><name>MultiXactId</name> <modifier>*</modifier></type><name>minmulti</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Code below is copied from heapam_relation_set_new_filenode in
	 * heapam_handler.c.
	 */</comment>


	<comment type="block">/*
	 * Initialize to the minimum XID that could put tuples in the table. We
	 * know that no xacts older than RecentXmin are still running, so that
	 * will do.
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>freezeXid</name> <operator>=</operator> <name>RecentXmin</name></expr>;</expr_stmt>

	<comment type="block">/*
	 * Similarly, initialize the minimum Multixact to the first value that
	 * could possibly be stored in tuples in the table.  Running transactions
	 * could reuse values from their local cache, so we are careful to
	 * consider all currently running multis.
	 *
	 * XXX this could be refined further, but is it worth the hassle?
	 */</comment>
	<expr_stmt><expr><operator>*</operator><name>minmulti</name> <operator>=</operator> <call><name>GetOldestMultiXactId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SMgrRelation</name></type> <name>srel</name> <init>= <expr><call><name>RelationCreateStorage_compat</name><argument_list>(<argument><expr><operator>*</operator><name>newrnode</name></expr></argument>, <argument><expr><name>persistence</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * If required, set up an init fork for an unlogged table so that it can
	 * be correctly reinitialized on restart.  An immediate sync is required
	 * even if the page has been logged, because the write did not go through
	 * shared_buffers and therefore a concurrent checkpoint may have moved the
	 * redo pointer past our xlog record.  Recovery may as well remove it
	 * while replaying, for example, XLOG_DBASE_CREATE or XLOG_TBLSPC_CREATE
	 * record. Therefore, logging is necessary even if wal_level=minimal.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><name>persistence</name> <operator>==</operator> <name>RELPERSISTENCE_UNLOGGED</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_RELATION</name> <operator>||</operator>
			   <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_MATVIEW</name> <operator>||</operator>
			   <name><name>rel</name><operator>-&gt;</operator><name>rd_rel</name><operator>-&gt;</operator><name>relkind</name></name> <operator>==</operator> <name>RELKIND_TOASTVALUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>smgrcreate</name><argument_list>(<argument><expr><name>srel</name></expr></argument>, <argument><expr><name>INIT_FORKNUM</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>log_smgrcreate</name><argument_list>(<argument><expr><name>newrnode</name></expr></argument>, <argument><expr><name>INIT_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>smgrimmedsync</name><argument_list>(<argument><expr><name>srel</name></expr></argument>, <argument><expr><name>INIT_FORKNUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>smgrclose</name><argument_list>(<argument><expr><name>srel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_relation_nontransactional_truncate</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_relation_nontransactional_truncate not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_copy_data</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>RelFileNode</name> <modifier>*</modifier></type><name>newrnode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_copy_data not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_copy_for_cluster</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>OldTable</name></decl></parameter>, <parameter><decl><type><name>Relation</name></type> <name>NewTable</name></decl></parameter>,
					  <parameter><decl><type><name>Relation</name></type> <name>OldIndex</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>use_sort</name></decl></parameter>,
					  <parameter><decl><type><name>TransactionId</name></type> <name>OldestXmin</name></decl></parameter>,
					  <parameter><decl><type><name>TransactionId</name> <modifier>*</modifier></type><name>xid_cutoff</name></decl></parameter>,
					  <parameter><decl><type><name>MultiXactId</name> <modifier>*</modifier></type><name>multi_cutoff</name></decl></parameter>,
					  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>num_tuples</name></decl></parameter>,
					  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tups_vacuumed</name></decl></parameter>,
					  <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tups_recently_dead</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_copy_for_cluster not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_vacuum</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>onerel</name></decl></parameter>, <parameter><decl><type><name>VacuumParams</name> <modifier>*</modifier></type><name>params</name></decl></parameter>,
			<parameter><decl><type><name>BufferAccessStrategy</name></type> <name>bstrategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>WARNING</name></expr></argument>, <argument><expr><literal type="string">"fake_copy_for_cluster not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_analyze_next_block</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>BlockNumber</name></type> <name>blockno</name></decl></parameter>,
							 <parameter><decl><type><name>BufferAccessStrategy</name></type> <name>bstrategy</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* we don't support analyze, so return false */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_analyze_next_tuple</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>, <parameter><decl><type><name>TransactionId</name></type> <name>OldestXmin</name></decl></parameter>,
							 <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>liverows</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>deadrows</name></decl></parameter>,
							 <parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_scan_analyze_next_tuple not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>double</name></type>
<name>fake_index_build_range_scan</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>tableRelation</name></decl></parameter>,
							<parameter><decl><type><name>Relation</name></type> <name>indexRelation</name></decl></parameter>,
							<parameter><decl><type><name>IndexInfo</name> <modifier>*</modifier></type><name>indexInfo</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>allow_sync</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>anyvisible</name></decl></parameter>,
							<parameter><decl><type><name>bool</name></type> <name>progress</name></decl></parameter>,
							<parameter><decl><type><name>BlockNumber</name></type> <name>start_blockno</name></decl></parameter>,
							<parameter><decl><type><name>BlockNumber</name></type> <name>numblocks</name></decl></parameter>,
							<parameter><decl><type><name>IndexBuildCallback</name></type> <name>callback</name></decl></parameter>,
							<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callback_state</name></decl></parameter>,
							<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_build_range_scan not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_index_validate_scan</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>tableRelation</name></decl></parameter>,
						 <parameter><decl><type><name>Relation</name></type> <name>indexRelation</name></decl></parameter>,
						 <parameter><decl><type><name>IndexInfo</name> <modifier>*</modifier></type><name>indexInfo</name></decl></parameter>,
						 <parameter><decl><type><name>Snapshot</name></type> <name>snapshot</name></decl></parameter>,
						 <parameter><decl><type><name>ValidateIndexState</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_index_build_range_scan not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Miscellaneous callbacks for the fake AM
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>fake_relation_size</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>ForkNumber</name></type> <name>forkNumber</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/*
	 * Code below is copied from heapam_relation_size from
	 * heapam_handler.c.
	 */</comment>

	<decl_stmt><decl><type><name>uint64</name></type> <name>nblocks</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/* InvalidForkNumber indicates returning the size for all forks */</comment>
	<if_stmt><if>if <condition>(<expr><name>forkNumber</name> <operator>==</operator> <name>InvalidForkNumber</name></expr>)</condition>
	<block>{<block_content>
		<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_FORKNUM</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
		<block>{<block_content>
			<expr_stmt><expr><name>nblocks</name> <operator>+=</operator> <call><name>smgrnblocks</name><argument_list>(<argument><expr><call><name>RelationGetSmgr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<expr_stmt><expr><name>nblocks</name> <operator>=</operator> <call><name>smgrnblocks</name><argument_list>(<argument><expr><call><name>RelationGetSmgr</name><argument_list>(<argument><expr><name>rel</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>forkNumber</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><name>nblocks</name> <operator>*</operator> <name>BLCKSZ</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * Check to see whether the table needs a TOAST table.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_relation_needs_toast_table</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* we don't test toastable data with this, so no toast table needed */</comment>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Planner related callbacks for the fake AM
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>fake_estimate_rel_size</name><parameter_list>(<parameter><decl><type><name>Relation</name></type> <name>rel</name></decl></parameter>, <parameter><decl><type><name>int32</name> <modifier>*</modifier></type><name>attr_widths</name></decl></parameter>,
					   <parameter><decl><type><name>BlockNumber</name> <modifier>*</modifier></type><name>pages</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>tuples</name></decl></parameter>,
					   <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>allvisfrac</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<comment type="block">/* no data available */</comment>
	<expr_stmt><expr><operator>*</operator><name>attr_widths</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>tuples</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>allvisfrac</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><operator>*</operator><name>pages</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Executor related callbacks for the fake AM
 * ------------------------------------------------------------------------
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_bitmap_next_block</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>,
							<parameter><decl><type><name>TBMIterateResult</name> <modifier>*</modifier></type><name>tbmres</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_scan_bitmap_next_block not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_bitmap_next_tuple</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>,
							<parameter><decl><type><name>TBMIterateResult</name> <modifier>*</modifier></type><name>tbmres</name></decl></parameter>,
							<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_scan_bitmap_next_tuple not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_sample_next_block</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>,
							<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>scanstate</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_scan_sample_next_block not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>bool</name></type>
<name>fake_scan_sample_next_tuple</name><parameter_list>(<parameter><decl><type><name>TableScanDesc</name></type> <name>scan</name></decl></parameter>,
							<parameter><decl><type><name>SampleScanState</name> <modifier>*</modifier></type><name>scanstate</name></decl></parameter>,
							<parameter><decl><type><name>TupleTableSlot</name> <modifier>*</modifier></type><name>slot</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>elog</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><literal type="string">"fake_scan_sample_next_tuple not implemented"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/* ------------------------------------------------------------------------
 * Definition of the fake table access method.
 * ------------------------------------------------------------------------
 */</comment>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>TableAmRoutine</name></type> <name>fake_methods</name> <init>= <expr><block>{
	<expr><operator>.</operator><name>type</name> <operator>=</operator> <name>T_TableAmRoutine</name></expr>,

	<expr><operator>.</operator><name>slot_callbacks</name> <operator>=</operator> <name>fake_slot_callbacks</name></expr>,

	<expr><operator>.</operator><name>scan_begin</name> <operator>=</operator> <name>fake_scan_begin</name></expr>,
	<expr><operator>.</operator><name>scan_end</name> <operator>=</operator> <name>fake_scan_end</name></expr>,
	<expr><operator>.</operator><name>scan_rescan</name> <operator>=</operator> <name>fake_scan_rescan</name></expr>,
	<expr><operator>.</operator><name>scan_getnextslot</name> <operator>=</operator> <name>fake_scan_getnextslot</name></expr>,

	<comment type="block">/* these are common helper functions */</comment>
	<expr><operator>.</operator><name>parallelscan_estimate</name> <operator>=</operator> <name>table_block_parallelscan_estimate</name></expr>,
	<expr><operator>.</operator><name>parallelscan_initialize</name> <operator>=</operator> <name>table_block_parallelscan_initialize</name></expr>,
	<expr><operator>.</operator><name>parallelscan_reinitialize</name> <operator>=</operator> <name>table_block_parallelscan_reinitialize</name></expr>,

	<expr><operator>.</operator><name>index_fetch_begin</name> <operator>=</operator> <name>fake_index_fetch_begin</name></expr>,
	<expr><operator>.</operator><name>index_fetch_reset</name> <operator>=</operator> <name>fake_index_fetch_reset</name></expr>,
	<expr><operator>.</operator><name>index_fetch_end</name> <operator>=</operator> <name>fake_index_fetch_end</name></expr>,
	<expr><operator>.</operator><name>index_fetch_tuple</name> <operator>=</operator> <name>fake_index_fetch_tuple</name></expr>,

	<expr><operator>.</operator><name>tuple_insert</name> <operator>=</operator> <name>fake_tuple_insert</name></expr>,
	<expr><operator>.</operator><name>tuple_insert_speculative</name> <operator>=</operator> <name>fake_tuple_insert_speculative</name></expr>,
	<expr><operator>.</operator><name>tuple_complete_speculative</name> <operator>=</operator> <name>fake_tuple_complete_speculative</name></expr>,
	<expr><operator>.</operator><name>multi_insert</name> <operator>=</operator> <name>fake_multi_insert</name></expr>,
	<expr><operator>.</operator><name>tuple_delete</name> <operator>=</operator> <name>fake_tuple_delete</name></expr>,
	<expr><operator>.</operator><name>tuple_update</name> <operator>=</operator> <name>fake_tuple_update</name></expr>,
	<expr><operator>.</operator><name>tuple_lock</name> <operator>=</operator> <name>fake_tuple_lock</name></expr>,
	<expr><operator>.</operator><name>finish_bulk_insert</name> <operator>=</operator> <name>fake_finish_bulk_insert</name></expr>,

	<expr><operator>.</operator><name>tuple_fetch_row_version</name> <operator>=</operator> <name>fake_fetch_row_version</name></expr>,
	<expr><operator>.</operator><name>tuple_get_latest_tid</name> <operator>=</operator> <name>fake_get_latest_tid</name></expr>,
	<expr><operator>.</operator><name>tuple_tid_valid</name> <operator>=</operator> <name>fake_tuple_tid_valid</name></expr>,
	<expr><operator>.</operator><name>tuple_satisfies_snapshot</name> <operator>=</operator> <name>fake_tuple_satisfies_snapshot</name></expr>,
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>PG_VERSION_NUM</name> <operator>&gt;=</operator> <name>PG_VERSION_14</name></expr></cpp:if>
	<expr><operator>.</operator><name>index_delete_tuples</name> <operator>=</operator> <name>fake_index_delete_tuples</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<expr><operator>.</operator><name>compute_xid_horizon_for_tuples</name> <operator>=</operator> <name>fake_compute_xid_horizon_for_tuples</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<expr><operator>.</operator><name>relation_set_new_filenode</name> <operator>=</operator> <name>fake_relation_set_new_filenode</name></expr>,
	<expr><operator>.</operator><name>relation_nontransactional_truncate</name> <operator>=</operator> <name>fake_relation_nontransactional_truncate</name></expr>,
	<expr><operator>.</operator><name>relation_copy_data</name> <operator>=</operator> <name>fake_copy_data</name></expr>,
	<expr><operator>.</operator><name>relation_copy_for_cluster</name> <operator>=</operator> <name>fake_copy_for_cluster</name></expr>,
	<expr><operator>.</operator><name>relation_vacuum</name> <operator>=</operator> <name>fake_vacuum</name></expr>,
	<expr><operator>.</operator><name>scan_analyze_next_block</name> <operator>=</operator> <name>fake_scan_analyze_next_block</name></expr>,
	<expr><operator>.</operator><name>scan_analyze_next_tuple</name> <operator>=</operator> <name>fake_scan_analyze_next_tuple</name></expr>,
	<expr><operator>.</operator><name>index_build_range_scan</name> <operator>=</operator> <name>fake_index_build_range_scan</name></expr>,
	<expr><operator>.</operator><name>index_validate_scan</name> <operator>=</operator> <name>fake_index_validate_scan</name></expr>,

	<expr><operator>.</operator><name>relation_size</name> <operator>=</operator> <name>fake_relation_size</name></expr>,
	<expr><operator>.</operator><name>relation_needs_toast_table</name> <operator>=</operator> <name>fake_relation_needs_toast_table</name></expr>,

	<expr><operator>.</operator><name>relation_estimate_size</name> <operator>=</operator> <name>fake_estimate_rel_size</name></expr>,

	<expr><operator>.</operator><name>scan_bitmap_next_block</name> <operator>=</operator> <name>fake_scan_bitmap_next_block</name></expr>,
	<expr><operator>.</operator><name>scan_bitmap_next_tuple</name> <operator>=</operator> <name>fake_scan_bitmap_next_tuple</name></expr>,
	<expr><operator>.</operator><name>scan_sample_next_block</name> <operator>=</operator> <name>fake_scan_sample_next_block</name></expr>,
	<expr><operator>.</operator><name>scan_sample_next_tuple</name> <operator>=</operator> <name>fake_scan_sample_next_tuple</name></expr>
}</block></expr></init></decl>;</decl_stmt>


<function><type><name>Datum</name></type>
<name>fake_am_handler</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>PG_RETURN_POINTER</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fake_methods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
