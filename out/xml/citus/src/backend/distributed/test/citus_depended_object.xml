<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/test/citus_depended_object.c"><comment type="block">/*
 * citus_depended_object.c
 *
 * Implements udf function related to hiding citus depended objects while executing
 * postgres vanilla tests.
 *
 * Copyright (c) Citus Data, Inc.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_aggregate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_am.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attribute.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_attrdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_constraint.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_class.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_depend.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_enum.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_event_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_namespace.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_proc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_rewrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_sequence.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_statistic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_trigger.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_dict.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_ts_template.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_depended_object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_cache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata/dependency.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata/distobject.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>IsCitusDependentObject</name><parameter_list>(<parameter><decl><type><name>ObjectAddress</name></type> <name>objectAddress</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>is_citus_depended_object</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block">/*
 * is_citus_depended_object a wrapper around IsCitusDependentObject, so
 * see the details there.
 *
 * The first parameter expects an oid for
 * a pg meta class, and the second parameter expects an oid for
 * the object which is found in the pg meta class.
 */</comment>
<function><type><name>Datum</name></type>
<name>is_citus_depended_object</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>CheckCitusVersion</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>PG_ARGISNULL</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* Because we want to return false for null arguments, we donot use strict keyword while creating that function. */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>Oid</name></type> <name>metaTableId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Oid</name></type> <name>objectId</name> <init>= <expr><call><name>PG_GETARG_OID</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>metaTableId</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>!</operator><call><name>OidIsValid</name><argument_list>(<argument><expr><name>objectId</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* we cannot continue without valid meta table or object oid */</comment>
		<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>dependsOnCitus</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>ObjectAddress</name></type> <name>objectAdress</name> <init>= <expr><block>{ <expr><name>metaTableId</name></expr>, <expr><name>objectId</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<switch>switch <condition>(<expr><name>metaTableId</name></expr>)</condition>
	<block>{<block_content>
		<case>case <expr><name>ProcedureRelationId</name></expr>:</case>
		<case>case <expr><name>AccessMethodRelationId</name></expr>:</case>
		<case>case <expr><name>EventTriggerRelationId</name></expr>:</case>
		<case>case <expr><name>TriggerRelationId</name></expr>:</case>
		<case>case <expr><name>TSConfigRelationId</name></expr>:</case>
		<case>case <expr><name>TSTemplateRelationId</name></expr>:</case>
		<case>case <expr><name>TSDictionaryRelationId</name></expr>:</case>
		<case>case <expr><name>LanguageRelationId</name></expr>:</case>
		<case>case <expr><name>RewriteRelationId</name></expr>:</case>
		<case>case <expr><name>AttrDefaultRelationId</name></expr>:</case>
		<case>case <expr><name>NamespaceRelationId</name></expr>:</case>
		<case>case <expr><name>ConstraintRelationId</name></expr>:</case>
		<case>case <expr><name>TypeRelationId</name></expr>:</case>
		<case>case <expr><name>RelationRelationId</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* meta classes that access their own oid */</comment>
			<expr_stmt><expr><name>dependsOnCitus</name> <operator>=</operator> <call><name>IsCitusDependentObject</name><argument_list>(<argument><expr><name>objectAdress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>EnumRelationId</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/*
			 * we do not directly access the oid in pg_enum,
			 * because it does not exist in pg_depend, but its type does
			 */</comment>
			<expr_stmt><expr><name><name>objectAdress</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>TypeRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dependsOnCitus</name> <operator>=</operator> <call><name>IsCitusDependentObject</name><argument_list>(<argument><expr><name>objectAdress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>IndexRelationId</name></expr>:</case>
		<case>case <expr><name>AttributeRelationId</name></expr>:</case>
		<case>case <expr><name>SequenceRelationId</name></expr>:</case>
		<case>case <expr><name>StatisticRelationId</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* meta classes that access their relation's oid */</comment>
			<expr_stmt><expr><name><name>objectAdress</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>RelationRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dependsOnCitus</name> <operator>=</operator> <call><name>IsCitusDependentObject</name><argument_list>(<argument><expr><name>objectAdress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<case>case <expr><name>AggregateRelationId</name></expr>:</case>
		<block>{<block_content>
			<comment type="block">/* We access procedure oid for aggregates. */</comment>
			<expr_stmt><expr><name><name>objectAdress</name><operator>.</operator><name>classId</name></name> <operator>=</operator> <name>ProcedureRelationId</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>dependsOnCitus</name> <operator>=</operator> <call><name>IsCitusDependentObject</name><argument_list>(<argument><expr><name>objectAdress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</block_content>}</block>

		<default>default:</default>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block>
	</block_content>}</block></switch>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>dependsOnCitus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * IsCitusDependentObject returns true if the given object depends on the citus extension.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>IsCitusDependentObject</name><parameter_list>(<parameter><decl><type><name>ObjectAddress</name></type> <name>objectAddress</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>IsObjectAddressOwnedByCitus</name><argument_list>(<argument><expr><operator>&amp;</operator><name>objectAddress</name></expr></argument>)</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/* object itself is owned by citus */</comment>
		<return>return <expr><name>true</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* check if object's any dependency is owned by citus. */</comment>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>citusDependencies</name> <init>= <expr><call><name>GetAllCitusDependedDependenciesForObject</name><argument_list>(<argument><expr><operator>&amp;</operator><name>objectAddress</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><call><name>list_length</name><argument_list>(<argument><expr><name>citusDependencies</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
