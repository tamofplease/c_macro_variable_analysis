<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/test/shard_rebalancer.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * test/shard_rebalancer.c
 *
 * This file contains functions used for unit testing the planning part of the
 * shard rebalancer.
 *
 * Copyright (c) 2014-2019, Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"safe_lib.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"catalog/pg_type.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_safe_lib.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/citus_ruleutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/connection_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/listutils.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/metadata_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/multi_physical_planner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_cleaner.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/shard_rebalancer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/relay_utility.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/builtins.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/lsyscache.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utils/memutils.h"</cpp:file></cpp:include>

<comment type="block">/* static declarations for json conversion */</comment>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>JsonArrayToShardPlacementTestInfoList</name><parameter_list>(
	<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>shardPlacementJsonArrayObject</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type> <name>JsonArrayToWorkerTestInfoList</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>workerNodeJsonArrayObject</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>JsonFieldValueBoolDefault</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
									  <parameter><decl><type><name>bool</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint32</name></type> <name>JsonFieldValueUInt32Default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
										  <parameter><decl><type><name>uint32</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>uint64</name></type> <name>JsonFieldValueUInt64Default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
										  <parameter><decl><type><name>uint64</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type> <name>JsonFieldValueString</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ArrayType</name> <modifier>*</modifier></type> <name>PlacementUpdateListToJsonArray</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>placementUpdateList</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type> <name>ShardAllowedOnNode</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>shardId</name></decl></parameter>, <parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>float</name></type> <name>NodeCapacity</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>ShardCost</name></type> <name>GetShardCost</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>shardId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list>;</function_decl>


<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>shard_placement_rebalance_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>shard_placement_replication_array</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>worker_node_responsive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>run_try_drop_marked_resources</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<typedef>typedef <type><struct>struct <name>ShardPlacementTestInfo</name>
<block>{
	<decl_stmt><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>placement</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name></type> <name>cost</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>nextColocationGroup</name></decl>;</decl_stmt>
}</block></struct></type> <name>ShardPlacementTestInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>WorkerTestInfo</name>
<block>{
	<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>disallowedShardIds</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>capacity</name></decl>;</decl_stmt>
}</block></struct></type> <name>WorkerTestInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>RebalancePlanContext</name>
<block>{
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerTestInfoList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementTestInfoList</name></decl>;</decl_stmt>
}</block></struct></type> <name>RebalancePlacementContext</name>;</typedef>

<comment type="block">/*
 * run_try_drop_marked_resources is a wrapper to run TryDropOrphanedResources.
 */</comment>
<function><type><name>Datum</name></type>
<name>run_try_drop_marked_resources</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>waitForLocks</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>TryDropOrphanedResources</name><argument_list>(<argument><expr><name>waitForLocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * IsActiveTestShardPlacement checks if the dummy shard placement created in tests
 * are labelled as active. Note that this function does not check if the worker is also
 * active, because the dummy test workers are not registered as actual workers.
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type>
<name>IsActiveTestShardPlacement</name><parameter_list>(<parameter><decl><type><name>ShardPlacement</name> <modifier>*</modifier></type><name>shardPlacement</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name><name>shardPlacement</name><operator>-&gt;</operator><name>shardState</name></name> <operator>==</operator> <name>SHARD_STATE_ACTIVE</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * shard_placement_rebalance_array returns a list of operations which can make a
 * cluster consisting of given shard placements and worker nodes balanced with
 * respect to the given threshold. Threshold is a value between 0 and 1 which
 * determines the evenness in shard distribution. When threshold is 0, then all
 * nodes should have equal number of shards. As threshold increases, cluster's
 * evenness requirements decrease, and we can rebalance the cluster using less
 * operations.
 */</comment>
<function><type><name>Datum</name></type>
<name>shard_placement_rebalance_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>workerNodeJsonArray</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>shardPlacementJsonArray</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>threshold</name> <init>= <expr><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32</name></type> <name>maxShardMoves</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>drainOnly</name> <init>= <expr><call><name>PG_GETARG_BOOL</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>float</name></type> <name>utilizationImproventThreshold</name> <init>= <expr><call><name>PG_GETARG_FLOAT4</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementListList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerTestInfo</name> <modifier>*</modifier></type><name>workerTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardPlacementTestInfo</name> <modifier>*</modifier></type><name>shardPlacementTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RebalancePlanFunctions</name></type> <name>rebalancePlanFunctions</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>shardAllowedOnNode</name> <operator>=</operator> <name>ShardAllowedOnNode</name></expr>,
		<expr><operator>.</operator><name>nodeCapacity</name> <operator>=</operator> <name>NodeCapacity</name></expr>,
		<expr><operator>.</operator><name>shardCost</name> <operator>=</operator> <name>GetShardCost</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>RebalancePlacementContext</name></type> <name>context</name> <init>= <expr><block>{
		<expr><operator>.</operator><name>workerTestInfoList</name> <operator>=</operator> <name>NULL</name></expr>,
	}</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>workerTestInfoList</name></name> <operator>=</operator> <call><name>JsonArrayToWorkerTestInfoList</name><argument_list>(<argument><expr><name>workerNodeJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>context</name><operator>.</operator><name>shardPlacementTestInfoList</name></name> <operator>=</operator> <call><name>JsonArrayToShardPlacementTestInfoList</name><argument_list>(
		<argument><expr><name>shardPlacementJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* we don't need original arrays any more, so we free them to save memory */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>workerNodeJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shardPlacementJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/* map workerTestInfoList to a list of its WorkerNodes */</comment>
	<macro><name>foreach_ptr</name><argument_list>(<argument>workerTestInfo</argument>, <argument>context.workerTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>workerNodeList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<comment type="block">/* map shardPlacementTestInfoList to a list of list of its ShardPlacements */</comment>
	<macro><name>foreach_ptr</name><argument_list>(<argument>shardPlacementTestInfo</argument>, <argument>context.shardPlacementTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>shardPlacementTestInfo</name><operator>-&gt;</operator><name>nextColocationGroup</name></name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>shardPlacementList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>, <argument><expr><name>CompareShardPlacements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>shardPlacementListList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>shardPlacementListList</name></expr></argument>,
											 <argument><expr><call><name>FilterShardPlacementList</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>,
																	  <argument><expr><name>IsActiveTestShardPlacement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>shardPlacementList</name> <operator>=</operator> <name>NIL</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<expr_stmt><expr><name>shardPlacementList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>,
									 <argument><expr><name><name>shardPlacementTestInfo</name><operator>-&gt;</operator><name>placement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>
	<expr_stmt><expr><name>shardPlacementList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>, <argument><expr><name>CompareShardPlacements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>shardPlacementListList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>shardPlacementListList</name></expr></argument>, <argument><expr><name>shardPlacementList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>rebalancePlanFunctions</name><operator>.</operator><name>context</name></name> <operator>=</operator> <operator>&amp;</operator><name>context</name></expr>;</expr_stmt>

	<comment type="block">/* sort the lists to make the function more deterministic */</comment>
	<expr_stmt><expr><name>workerNodeList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name>CompareWorkerNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>placementUpdateList</name> <init>= <expr><call><name>RebalancePlacementUpdates</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>,
														  <argument><expr><name>shardPlacementListList</name></expr></argument>,
														  <argument><expr><name>threshold</name></expr></argument>,
														  <argument><expr><name>maxShardMoves</name></expr></argument>,
														  <argument><expr><name>drainOnly</name></expr></argument>,
														  <argument><expr><name>utilizationImproventThreshold</name></expr></argument>,
														  <argument><expr><operator>&amp;</operator><name>rebalancePlanFunctions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>placementUpdateJsonArray</name> <init>= <expr><call><name>PlacementUpdateListToJsonArray</name><argument_list>(
		<argument><expr><name>placementUpdateList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><name>placementUpdateJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * ShardAllowedOnNode is the function that checks if shard is allowed to be on
 * a worker when running the shard rebalancer unit tests.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>ShardAllowedOnNode</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>shardId</name></decl></parameter>, <parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>voidContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RebalancePlacementContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>voidContext</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerTestInfo</name> <modifier>*</modifier></type><name>workerTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64</name> <modifier>*</modifier></type><name>disallowedShardIdPtr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>workerTestInfo</argument>, <argument>context-&gt;workerTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>workerNode</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>workerTestInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach_ptr</name><argument_list>(<argument>disallowedShardIdPtr</argument>, <argument>workerTestInfo-&gt;disallowedShardIds</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>shardId</name> <operator>==</operator> <operator>*</operator><name>disallowedShardIdPtr</name></expr>)</condition>
		<block>{<block_content>
			<return>return <expr><name>false</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * NodeCapacity is the function that gets the capacity of a worker when running
 * the shard rebalancer unit tests.
 */</comment>
<function><type><specifier>static</specifier> <name>float</name></type>
<name>NodeCapacity</name><parameter_list>(<parameter><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>voidContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RebalancePlacementContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>voidContext</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerTestInfo</name> <modifier>*</modifier></type><name>workerTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>workerTestInfo</argument>, <argument>context-&gt;workerTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>node</name></name> <operator>==</operator> <name>workerNode</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>workerTestInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * GetShardCost is the function that gets the ShardCost of a shard when running
 * the shard rebalancer unit tests.
 */</comment>
<function><type><specifier>static</specifier> <name>ShardCost</name></type>
<name>GetShardCost</name><parameter_list>(<parameter><decl><type><name>uint64</name></type> <name>shardId</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>voidContext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>RebalancePlacementContext</name> <modifier>*</modifier></type><name>context</name> <init>= <expr><name>voidContext</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardCost</name></type> <name>shardCost</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memset_struct_0</name><argument_list>(<argument><expr><name>shardCost</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shardCost</name><operator>.</operator><name>shardId</name></name> <operator>=</operator> <name>shardId</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>ShardPlacementTestInfo</name> <modifier>*</modifier></type><name>shardPlacementTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<macro><name>foreach_ptr</name><argument_list>(<argument>shardPlacementTestInfo</argument>, <argument>context-&gt;shardPlacementTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name><name>shardPlacementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>shardId</name></name> <operator>==</operator> <name>shardId</name></expr>)</condition>
		<block>{<block_content>
			<break>break;</break>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block>
	<expr_stmt><expr><call><name>Assert</name><argument_list>(<argument><expr><name>shardPlacementTestInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>shardCost</name><operator>.</operator><name>cost</name></name> <operator>=</operator> <name><name>shardPlacementTestInfo</name><operator>-&gt;</operator><name>cost</name></name></expr>;</expr_stmt>
	<return>return <expr><name>shardCost</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * shard_placement_replication_array returns a list of operations which will
 * replicate under-replicated shards in a cluster consisting of given shard
 * placements and worker nodes. A shard is under-replicated if it has less
 * active placements than the given shard replication factor.
 */</comment>
<function><type><name>Datum</name></type>
<name>shard_placement_replication_array</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>workerNodeJsonArray</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>shardPlacementJsonArray</name> <init>= <expr><call><name>PG_GETARG_ARRAYTYPE_P</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>shardReplicationFactor</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerNodeList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>WorkerTestInfo</name> <modifier>*</modifier></type><name>workerTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ShardPlacementTestInfo</name> <modifier>*</modifier></type><name>shardPlacementTestInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

	<comment type="block">/* validate shard replication factor */</comment>
	<if_stmt><if>if <condition>(<expr><name><name>shardReplicationFactor</name> <argument_list type="generic">&lt; <argument><expr><name>SHARD_REPLICATION_FACTOR_MINIMUM</name> <operator>||</operator>
		<name>shardReplicationFactor</name></expr></argument> &gt;</argument_list></name> <name>SHARD_REPLICATION_FACTOR_MAXIMUM</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"invalid shard replication factor"</literal></expr></argument>)</argument_list></call><operator>,</operator>
						<call><name>errhint</name><argument_list>(<argument><expr><literal type="string">"Shard replication factor must be an integer "</literal>
								<literal type="string">"between %d and %d"</literal></expr></argument>, <argument><expr><name>SHARD_REPLICATION_FACTOR_MINIMUM</name></expr></argument>,
								<argument><expr><name>SHARD_REPLICATION_FACTOR_MAXIMUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerTestInfoList</name> <init>= <expr><call><name>JsonArrayToWorkerTestInfoList</name><argument_list>(<argument><expr><name>workerNodeJsonArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementTestInfoList</name> <init>= <expr><call><name>JsonArrayToShardPlacementTestInfoList</name><argument_list>(
		<argument><expr><name>shardPlacementJsonArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* we don't need original arrays any more, so we free them to save memory */</comment>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>workerNodeJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shardPlacementJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<macro><name>foreach_ptr</name><argument_list>(<argument>workerTestInfo</argument>, <argument>workerTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>workerNodeList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<macro><name>foreach_ptr</name><argument_list>(<argument>shardPlacementTestInfo</argument>, <argument>shardPlacementTestInfoList</argument>)</argument_list></macro>
	<block>{<block_content>
		<expr_stmt><expr><name>shardPlacementList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>,
									 <argument><expr><name><name>shardPlacementTestInfo</name><operator>-&gt;</operator><name>placement</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>activeShardPlacementList</name> <init>= <expr><call><name>FilterShardPlacementList</name><argument_list>(<argument><expr><name>shardPlacementList</name></expr></argument>,
															  <argument><expr><name>IsActiveTestShardPlacement</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<comment type="block">/* sort the lists to make the function more deterministic */</comment>
	<expr_stmt><expr><name>workerNodeList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>, <argument><expr><name>CompareWorkerNodes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>activeShardPlacementList</name> <operator>=</operator> <call><name>SortList</name><argument_list>(<argument><expr><name>activeShardPlacementList</name></expr></argument>, <argument><expr><name>CompareShardPlacements</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>placementUpdateList</name> <init>= <expr><call><name>ReplicationPlacementUpdates</name><argument_list>(<argument><expr><name>workerNodeList</name></expr></argument>,
															<argument><expr><name>activeShardPlacementList</name></expr></argument>,
															<argument><expr><name>shardReplicationFactor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>placementUpdateJsonArray</name> <init>= <expr><call><name>PlacementUpdateListToJsonArray</name><argument_list>(
		<argument><expr><name>placementUpdateList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_ARRAYTYPE_P</name><argument_list>(<argument><expr><name>placementUpdateJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * JsonArrayToShardPlacementTestInfoList converts the given shard placement json array
 * to a list of ShardPlacement structs.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>JsonArrayToShardPlacementTestInfoList</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>shardPlacementJsonArrayObject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>shardPlacementTestInfoList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>shardPlacementJsonArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>placementCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<comment type="block">/*
	 * Memory is not automatically freed when we call UDFs using DirectFunctionCall.
	 * We call these functions in functionCallContext, so we can free the memory
	 * once they return.
	 */</comment>
	<decl_stmt><decl><type><name>MemoryContext</name></type> <name>functionCallContext</name> <init>= <expr><call><name>AllocSetContextCreate</name><argument_list>(<argument><expr><name>CurrentMemoryContext</name></expr></argument>,
															  <argument><expr><literal type="string">"Function Call Context"</literal></expr></argument>,
															  <argument><expr><name>ALLOCSET_DEFAULT_MINSIZE</name></expr></argument>,
															  <argument><expr><name>ALLOCSET_DEFAULT_INITSIZE</name></expr></argument>,
															  <argument><expr><name>ALLOCSET_DEFAULT_MAXSIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>shardPlacementJsonArrayObject</name></expr></argument>, <argument><expr><name>JSONOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>shardPlacementJsonArray</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>placementCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>placementIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>placementIndex</name> <operator>&lt;</operator> <name>placementCount</name></expr>;</condition> <incr><expr><name>placementIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>placementJson</name> <init>= <expr><name><name>shardPlacementJsonArray</name><index>[<expr><name>placementIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ShardPlacementTestInfo</name> <modifier>*</modifier></type><name>placementTestInfo</name> <init>= <expr><call><name>palloc0</name><argument_list>(
			<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardPlacementTestInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>MemoryContext</name></type> <name>oldContext</name> <init>= <expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>functionCallContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>uint64</name></type> <name>shardId</name> <init>= <expr><call><name>JsonFieldValueUInt64Default</name><argument_list>(
			<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_SHARD_ID</name></expr></argument>, <argument><expr><name>placementIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>shardLength</name> <init>= <expr><call><name>JsonFieldValueUInt64Default</name><argument_list>(
			<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_SHARD_LENGTH</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>shardState</name> <init>= <expr><call><name>JsonFieldValueUInt32Default</name><argument_list>(
			<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_SHARD_STATE</name></expr></argument>, <argument><expr><name>SHARD_STATE_ACTIVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>nodeName</name> <init>= <expr><call><name>JsonFieldValueString</name><argument_list>(<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_NODE_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>nodeName</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><name>FIELD_NAME_NODE_NAME</name> <literal type="string">" needs be set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>nodePort</name> <init>= <expr><call><name>JsonFieldValueUInt32Default</name><argument_list>(
			<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_NODE_PORT</name></expr></argument>, <argument><expr><literal type="number">5432</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint64</name></type> <name>placementId</name> <init>= <expr><call><name>JsonFieldValueUInt64Default</name><argument_list>(
			<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_PLACEMENT_ID</name></expr></argument>, <argument><expr><name>placementIndex</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>uint64</name></type> <name>cost</name> <init>= <expr><call><name>JsonFieldValueUInt64Default</name><argument_list>(<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><literal type="string">"cost"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>nextColocationGroup</name> <init>=
			<expr><call><name>JsonFieldValueBoolDefault</name><argument_list>(<argument><expr><name>placementJson</name></expr></argument>, <argument><expr><literal type="string">"next_colocation"</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>MemoryContextSwitchTo</name><argument_list>(<argument><expr><name>oldContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name></name> <operator>=</operator> <call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>ShardPlacement</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>shardId</name></name> <operator>=</operator> <name>shardId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>shardLength</name></name> <operator>=</operator> <name>shardLength</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>shardState</name></name> <operator>=</operator> <name>shardState</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>nodeName</name></name> <operator>=</operator> <call><name>pstrdup</name><argument_list>(<argument><expr><name>nodeName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>nodePort</name></name> <operator>=</operator> <name>nodePort</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>placement</name><operator>-&gt;</operator><name>placementId</name></name> <operator>=</operator> <name>placementId</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>cost</name></name> <operator>=</operator> <name>cost</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>placementTestInfo</name><operator>-&gt;</operator><name>nextColocationGroup</name></name> <operator>=</operator> <name>nextColocationGroup</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * We have copied whatever we needed from the UDF calls, so we can free
		 * the memory allocated by them.
		 */</comment>
		<expr_stmt><expr><call><name>MemoryContextReset</name><argument_list>(<argument><expr><name>functionCallContext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


		<expr_stmt><expr><name>shardPlacementTestInfoList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>shardPlacementTestInfoList</name></expr></argument>,
											 <argument><expr><name>placementTestInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>pfree</name><argument_list>(<argument><expr><name>shardPlacementJsonArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>shardPlacementTestInfoList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * JsonArrayToWorkerNodeList converts the given worker node json array to a list
 * of WorkerNode structs.
 */</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>JsonArrayToWorkerTestInfoList</name><parameter_list>(<parameter><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>workerNodeJsonArrayObject</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>workerTestInfoList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>workerNodeJsonArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>workerNodeCount</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>deconstruct_array</name><argument_list>(<argument><expr><name>workerNodeJsonArrayObject</name></expr></argument>, <argument><expr><name>JSONOID</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>,
					  <argument><expr><operator>&amp;</operator><name>workerNodeJsonArray</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>workerNodeCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>int</name></type> <name>workerNodeIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>workerNodeIndex</name> <operator>&lt;</operator> <name>workerNodeCount</name></expr>;</condition> <incr><expr><name>workerNodeIndex</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><name>Datum</name></type> <name>workerNodeJson</name> <init>= <expr><name><name>workerNodeJsonArray</name><index>[<expr><name>workerNodeIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>workerName</name> <init>= <expr><call><name>JsonFieldValueString</name><argument_list>(<argument><expr><name>workerNodeJson</name></expr></argument>, <argument><expr><name>FIELD_NAME_WORKER_NAME</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>workerName</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><name>FIELD_NAME_WORKER_NAME</name> <literal type="string">" needs be set"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
		<decl_stmt><decl><type><name>uint32</name></type> <name>workerPort</name> <init>= <expr><call><name>JsonFieldValueUInt32Default</name><argument_list>(<argument><expr><name>workerNodeJson</name></expr></argument>,
														<argument><expr><name>FIELD_NAME_WORKER_PORT</name></expr></argument>, <argument><expr><literal type="number">5432</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>disallowedShardIdList</name> <init>= <expr><name>NIL</name></expr></init></decl>;</decl_stmt>


		<decl_stmt><decl><type><name>WorkerTestInfo</name> <modifier>*</modifier></type><name>workerTestInfo</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WorkerTestInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>workerNode</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>WorkerNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>strncpy_s</name><argument_list>(<argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>workerName</name></expr></argument>,
				  <argument><expr><name>WORKER_LENGTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>workerNode</name><operator>-&gt;</operator><name>nodeId</name></name> <operator>=</operator> <name>workerNodeIndex</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>workerNode</name><operator>-&gt;</operator><name>workerPort</name></name> <operator>=</operator> <name>workerPort</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>workerNode</name><operator>-&gt;</operator><name>shouldHaveShards</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>workerNode</name><operator>-&gt;</operator><name>nodeRole</name></name> <operator>=</operator> <call><name>PrimaryNodeRoleId</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>node</name></name> <operator>=</operator> <name>workerNode</name></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <call><name>JsonFieldValueUInt64Default</name><argument_list>(<argument><expr><name>workerNodeJson</name></expr></argument>,
															   <argument><expr><literal type="string">"capacity"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name><name>workerNode</name><operator>-&gt;</operator><name>isActive</name></name> <operator>=</operator> <call><name>JsonFieldValueBoolDefault</name><argument_list>(<argument><expr><name>workerNodeJson</name></expr></argument>,
														 <argument><expr><literal type="string">"isActive"</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>workerTestInfoList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>workerTestInfoList</name></expr></argument>, <argument><expr><name>workerTestInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>disallowedShardsString</name> <init>= <expr><call><name>JsonFieldValueString</name><argument_list>(
			<argument><expr><name>workerNodeJson</name></expr></argument>, <argument><expr><literal type="string">"disallowed_shards"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<if_stmt><if>if <condition>(<expr><name>disallowedShardsString</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>strtokPosition</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>shardString</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>disallowedShardsString</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtokPosition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>shardString</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
		<block>{<block_content>
			<decl_stmt><decl><type><name>uint64</name> <modifier>*</modifier></type><name>shardInt</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><operator>*</operator><name>shardInt</name> <operator>=</operator> <call><name>SafeStringToUint64</name><argument_list>(<argument><expr><name>shardString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>disallowedShardIdList</name> <operator>=</operator> <call><name>lappend</name><argument_list>(<argument><expr><name>disallowedShardIdList</name></expr></argument>, <argument><expr><name>shardInt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>shardString</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>strtokPosition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></while>
		<expr_stmt><expr><name><name>workerTestInfo</name><operator>-&gt;</operator><name>disallowedShardIds</name></name> <operator>=</operator> <name>disallowedShardIdList</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>workerTestInfoList</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * JsonFieldValueBoolDefault gets the value of the given key in the given json
 * document and returns it as a boolean. If the field does not exist in the
 * JSON it returns defaultValue.
 */</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>JsonFieldValueBoolDefault</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>valueString</name> <init>= <expr><call><name>JsonFieldValueString</name><argument_list>(<argument><expr><name>jsonDocument</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>valueString</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>defaultValue</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>valueBoolDatum</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>boolin</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>valueString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><call><name>DatumGetBool</name><argument_list>(<argument><expr><name>valueBoolDatum</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * JsonFieldValueUInt32Default gets the value of the given key in the given json
 * document and returns it as an unsigned 32-bit integer. If the field does not
 * exist in the JSON it returns defaultValue.
 */</comment>
<function><type><specifier>static</specifier> <name>uint32</name></type>
<name>JsonFieldValueUInt32Default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint32</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>valueString</name> <init>= <expr><call><name>JsonFieldValueString</name><argument_list>(<argument><expr><name>jsonDocument</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>valueString</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>defaultValue</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>valueInt4Datum</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int4in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>valueString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint32</name></type> <name>valueUInt32</name> <init>= <expr><call><name>DatumGetInt32</name><argument_list>(<argument><expr><name>valueInt4Datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>valueUInt32</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * JsonFieldValueUInt64 gets the value of the given key in the given json
 * document and returns it as an unsigned 64-bit integer. If the field does not
 * exist in the JSON it returns defaultValue.
 */</comment>
<function><type><specifier>static</specifier> <name>uint64</name></type>
<name>JsonFieldValueUInt64Default</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>uint64</name></type> <name>defaultValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>valueString</name> <init>= <expr><call><name>JsonFieldValueString</name><argument_list>(<argument><expr><name>jsonDocument</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>valueString</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>defaultValue</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>valueInt8Datum</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>int8in</name></expr></argument>, <argument><expr><call><name>CStringGetDatum</name><argument_list>(<argument><expr><name>valueString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>uint64</name></type> <name>valueUInt64</name> <init>= <expr><call><name>DatumGetInt64</name><argument_list>(<argument><expr><name>valueInt8Datum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>valueUInt64</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * DirectFunctionalCall2Null is a version of DirectFunctionCall2 that can
 * return NULL. It still does not support NULL arguments though.
 */</comment>
<function><type><specifier>static</specifier> <name>Datum</name></type>
<name>DirectFunctionCall2Null</name><parameter_list>(<parameter><decl><type><name>PGFunction</name></type> <name>func</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>isnull</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg1</name></decl></parameter>, <parameter><decl><type><name>Datum</name></type> <name>arg2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>LOCAL_FCINFO</name><argument_list>(<argument><expr><name>fcinfo</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>InitFunctionCallInfoData</name><argument_list>(<argument><expr><operator>*</operator><name>fcinfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>InvalidOid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>arg1</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>value</name> <operator>=</operator> <name>arg2</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fcinfo</name><operator>-&gt;</operator><name>args</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>result</name> <init>= <expr><call>(<modifier>*</modifier><name>func</name>)<argument_list>(<argument><expr><name>fcinfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>fcinfo</name><operator>-&gt;</operator><name>isnull</name></name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><operator>*</operator><name>isnull</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * JsonFieldValueString gets the value of the given key in the given json
 * document and returns it as a string. If the field does not exist in the JSON
 * it returns NULL.
 */</comment>
<function><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type>
<name>JsonFieldValueString</name><parameter_list>(<parameter><decl><type><name>Datum</name></type> <name>jsonDocument</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>bool</name></type> <name>isnull</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name></type> <name>keyDatum</name> <init>= <expr><call><name>PointerGetDatum</name><argument_list>(<argument><expr><call><name>cstring_to_text</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>Datum</name></type> <name>valueTextDatum</name> <init>= <expr><call><name>DirectFunctionCall2Null</name><argument_list>(
		<argument><expr><name>json_object_field_text</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isnull</name></expr></argument>, <argument><expr><name>jsonDocument</name></expr></argument>, <argument><expr><name>keyDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>isnull</name></expr>)</condition>
	<block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>valueString</name> <init>= <expr><call><name>TextDatumGetCString</name><argument_list>(<argument><expr><name>valueTextDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>valueString</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * PlacementUpdateListToJsonArray converts the given list of placement update
 * data to a json array.
 */</comment>
<function><type><specifier>static</specifier> <name>ArrayType</name> <modifier>*</modifier></type>
<name>PlacementUpdateListToJsonArray</name><parameter_list>(<parameter><decl><type><name>List</name> <modifier>*</modifier></type><name>placementUpdateList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>ListCell</name> <modifier>*</modifier></type><name>placementUpdateCell</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>placementUpdateIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>placementUpdateCount</name> <init>= <expr><call><name>list_length</name><argument_list>(<argument><expr><name>placementUpdateList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Datum</name> <modifier>*</modifier></type><name>placementUpdateJsonArray</name> <init>= <expr><call><name>palloc0</name><argument_list>(<argument><expr><name>placementUpdateCount</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>Datum</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<macro><name>foreach</name><argument_list>(<argument>placementUpdateCell</argument>, <argument>placementUpdateList</argument>)</argument_list></macro>
	<block>{<block_content>
		<decl_stmt><decl><type><name>PlacementUpdateEvent</name> <modifier>*</modifier></type><name>placementUpdateEvent</name> <init>= <expr><call><name>lfirst</name><argument_list>(<argument><expr><name>placementUpdateCell</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>sourceNode</name> <init>= <expr><name><name>placementUpdateEvent</name><operator>-&gt;</operator><name>sourceNode</name></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>WorkerNode</name> <modifier>*</modifier></type><name>targetNode</name> <init>= <expr><name><name>placementUpdateEvent</name><operator>-&gt;</operator><name>targetNode</name></name></expr></init></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>StringInfo</name></type> <name>escapedSourceName</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>escape_json</name><argument_list>(<argument><expr><name>escapedSourceName</name></expr></argument>, <argument><expr><name><name>sourceNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>StringInfo</name></type> <name>escapedTargetName</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>escape_json</name><argument_list>(<argument><expr><name>escapedTargetName</name></expr></argument>, <argument><expr><name><name>targetNode</name><operator>-&gt;</operator><name>workerName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>StringInfo</name></type> <name>placementUpdateJsonString</name> <init>= <expr><call><name>makeStringInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>appendStringInfo</name><argument_list>(<argument><expr><name>placementUpdateJsonString</name></expr></argument>, <argument><expr><name>PLACEMENT_UPDATE_JSON_FORMAT</name></expr></argument>,
						 <argument><expr><name><name>placementUpdateEvent</name><operator>-&gt;</operator><name>updateType</name></name></expr></argument>, <argument><expr><name><name>placementUpdateEvent</name><operator>-&gt;</operator><name>shardId</name></name></expr></argument>,
						 <argument><expr><name><name>escapedSourceName</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>sourceNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>,
						 <argument><expr><name><name>escapedTargetName</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>targetNode</name><operator>-&gt;</operator><name>workerPort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>Datum</name></type> <name>placementUpdateStringDatum</name> <init>= <expr><call><name>CStringGetDatum</name><argument_list>(
			<argument><expr><name><name>placementUpdateJsonString</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>Datum</name></type> <name>placementUpdateJsonDatum</name> <init>= <expr><call><name>DirectFunctionCall1</name><argument_list>(<argument><expr><name>json_in</name></expr></argument>,
															 <argument><expr><name>placementUpdateStringDatum</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<expr_stmt><expr><name><name>placementUpdateJsonArray</name><index>[<expr><name>placementUpdateIndex</name></expr>]</index></name> <operator>=</operator> <name>placementUpdateJsonDatum</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>placementUpdateIndex</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block>

	<decl_stmt><decl><type><name>ArrayType</name> <modifier>*</modifier></type><name>placementUpdateObject</name> <init>= <expr><call><name>construct_array</name><argument_list>(<argument><expr><name>placementUpdateJsonArray</name></expr></argument>,
													   <argument><expr><name>placementUpdateCount</name></expr></argument>, <argument><expr><name>JSONOID</name></expr></argument>,
													   <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="char">'i'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<return>return <expr><name>placementUpdateObject</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * worker_node_responsive returns true if the given worker node is responsive.
 * Otherwise, it returns false.
 */</comment>
<function><type><name>Datum</name></type>
<name>worker_node_responsive</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>text</name> <modifier>*</modifier></type><name>workerNameText</name> <init>= <expr><call><name>PG_GETARG_TEXT_PP</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32</name></type> <name>workerPort</name> <init>= <expr><call><name>PG_GETARG_INT32</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>connectionFlag</name> <init>= <expr><name>FORCE_NEW_CONNECTION</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>bool</name></type> <name>workerNodeResponsive</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>workerName</name> <init>= <expr><call><name>text_to_cstring</name><argument_list>(<argument><expr><name>workerNameText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>MultiConnection</name> <modifier>*</modifier></type><name>connection</name> <init>= <expr><call><name>GetNodeConnection</name><argument_list>(<argument><expr><name>connectionFlag</name></expr></argument>, <argument><expr><name>workerName</name></expr></argument>,
													<argument><expr><name>workerPort</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>connection</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>connection</name><operator>-&gt;</operator><name>pgConn</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>PQstatus</name><argument_list>(<argument><expr><name><name>connection</name><operator>-&gt;</operator><name>pgConn</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CONNECTION_OK</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>workerNodeResponsive</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>CloseConnection</name><argument_list>(<argument><expr><name>connection</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><name>workerNodeResponsive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
