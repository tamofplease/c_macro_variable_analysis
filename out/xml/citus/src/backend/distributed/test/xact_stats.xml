<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/backend/distributed/test/xact_stats.c"><comment type="block">/*-------------------------------------------------------------------------
 *
 * xact_stats.c
 *
 * This file contains functions to provide helper UDFs for testing transaction
 * statistics.
 *
 * Copyright (c) Citus Data, Inc.
 *
 *-------------------------------------------------------------------------
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"funcapi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"miscadmin.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pgstat.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/transaction_management.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"distributed/version_compat.h"</cpp:file></cpp:include>


<function_decl><type><specifier>static</specifier> <name>Size</name></type> <name>MemoryContextTotalSpace</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>;</function_decl>

<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>top_transaction_context_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>PG_FUNCTION_INFO_V1</name><argument_list>(<argument><expr><name>coordinated_transaction_should_use_2PC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<comment type="block">/*
 * top_transaction_context_size returns current size of TopTransactionContext.
 */</comment>
<function><type><name>Datum</name></type>
<name>top_transaction_context_size</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>totalSpace</name> <init>= <expr><call><name>MemoryContextTotalSpace</name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>PG_RETURN_INT64</name><argument_list>(<argument><expr><name>totalSpace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block">/*
 * MemoryContextTotalSpace returns total space allocated in context and its children.
 */</comment>
<function><type><specifier>static</specifier> <name>Size</name></type>
<name>MemoryContextTotalSpace</name><parameter_list>(<parameter><decl><type><name>MemoryContext</name></type> <name>context</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>Size</name></type> <name>totalSpace</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>MemoryContextCounters</name></type> <name>totals</name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name><name>TopTransactionContext</name><operator>-&gt;</operator><name>methods</name><operator>-&gt;</operator><name>stats_compat</name></name><argument_list>(<argument><expr><name>TopTransactionContext</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
												 <argument><expr><operator>&amp;</operator><name>totals</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>totalSpace</name> <operator>+=</operator> <name><name>totals</name><operator>.</operator><name>totalspace</name></name></expr>;</expr_stmt>

	<for>for <control>(<init><decl><type><name>MemoryContext</name></type> <name>child</name> <init>= <expr><name><name>context</name><operator>-&gt;</operator><name>firstchild</name></name></expr></init></decl>;</init>
		 <condition><expr><name>child</name> <operator>!=</operator> <name>NULL</name></expr>;</condition>
		 <incr><expr><name>child</name> <operator>=</operator> <name><name>child</name><operator>-&gt;</operator><name>nextchild</name></name></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name>totalSpace</name> <operator>+=</operator> <call><name>MemoryContextTotalSpace</name><argument_list>(<argument><expr><name>child</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>totalSpace</name></expr>;</return>
</block_content>}</block></function>


<comment type="block">/*
 * coordinated_transaction_should_use_2PC returns true if the transaction is in a
 * coordinated transaction and uses 2PC. If the transaction is nott in a
 * coordinated transaction, the function throws an error.
 */</comment>
<function><type><name>Datum</name></type>
<name>coordinated_transaction_should_use_2PC</name><parameter_list>(<parameter><decl><type><name>PG_FUNCTION_ARGS</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>InCoordinatedTransaction</name><argument_list>()</argument_list></call></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>ereport</name><argument_list>(<argument><expr><name>ERROR</name></expr></argument>, <argument><expr><operator>(</operator><call><name>errmsg</name><argument_list>(<argument><expr><literal type="string">"The transaction is not a coordinated transaction"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>PG_RETURN_BOOL</name><argument_list>(<argument><expr><call><name>GetCoordinatedTransactionShouldUse2PC</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
