<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/citus/src/bin/pg_send_cancellation/pg_send_cancellation.c"><comment type="block">/*
 * pg_send_cancellation is a program for manually sending a cancellation
 * to a Postgres endpoint. It is effectively a command-line version of
 * PQcancel in libpq, but it can use any PID or cancellation key.
 *
 * Portions Copyright (c) Citus Data, Inc.
 *
 * For the internal_cancel function:
 *
 * Portions Copyright (c) 1996-2021, PostgreSQL Global Development Group
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation for any purpose, without fee, and without a written agreement
 * is hereby granted, provided that the above copyright notice and this
 * paragraph and the following two paragraphs appear in all copies.
 *
 * IN NO EVENT SHALL THE UNIVERSITY OF CALIFORNIA BE LIABLE TO ANY PARTY FOR
 * DIRECT, INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, INCLUDING
 * LOST PROFITS, ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS
 * DOCUMENTATION, EVEN IF THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 * THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY WARRANTIES,
 * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.  THE SOFTWARE PROVIDED HEREUNDER IS
 * ON AN "AS IS" BASIS, AND THE UNIVERSITY OF CALIFORNIA HAS NO OBLIGATIONS TO
 * PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR MODIFICATIONS.
 *
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres_fe.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ip.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/link-canary.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/scram-common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/string.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-fe.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"libpq-int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mb/pg_wchar.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"port/pg_bswap.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_BUFFER_SIZE</name></cpp:macro> <cpp:value>256</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>internal_cancel</name><parameter_list>(<parameter><decl><type><name>SockAddr</name> <modifier>*</modifier></type><name>raddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be_pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be_key</name></decl></parameter>,
						   <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbufsize</name></decl></parameter>)</parameter_list>;</function_decl>


<comment type="block">/*
 * main entry point into the pg_send_cancellation program.
 */</comment>
<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-V"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"pg_send_cancellation (PostgreSQL) "</literal> <name>PG_VERSION</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>argc</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">4</literal> <operator>||</operator> <name>argc</name></expr></argument> &gt;</argument_list></name> <literal type="number">5</literal></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>program</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>pg_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s requires 4 arguments\n\n"</literal></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>pg_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Usage: %s &lt;pid&gt; &lt;cancel key&gt; &lt;hostname&gt; [port]\n"</literal></expr></argument>, <argument><expr><name>program</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>pidString</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cancelKeyString</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>portString</name> <init>= <expr><literal type="string">"5432"</literal></expr></init></decl>;</decl_stmt>

	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&gt;=</operator> <literal type="number">5</literal></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>portString</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* parse the PID and cancellation key */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>pid</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>pidString</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>cancelAuthCode</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>cancelKeyString</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>errorBuffer</name><index>[<expr><name>ERROR_BUFFER_SIZE</name></expr>]</index></name> <init>= <expr><block>{ <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name> <modifier>*</modifier></type><name>ipAddressList</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>addrinfo</name></name></type> <name>hint</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>ipAddressListFamily</name> <init>= <expr><name>AF_UNSPEC</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>SockAddr</name></type> <name>socketAddress</name></decl>;</decl_stmt>

	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>hint</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_socktype</name></name> <operator>=</operator> <name>SOCK_STREAM</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>hint</name><operator>.</operator><name>ai_family</name></name> <operator>=</operator> <name>ipAddressListFamily</name></expr>;</expr_stmt>

	<comment type="block">/* resolve the hostname to an IP */</comment>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>pg_getaddrinfo_all</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>portString</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hint</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ipAddressList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>||</operator> <operator>!</operator><name>ipAddressList</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"could not translate host name \"%s\" to address: %s\n"</literal></expr></argument>,
				   <argument><expr><name>host</name></expr></argument>, <argument><expr><call><name>gai_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>ipAddressList</name><operator>-&gt;</operator><name>ai_addrlen</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>socketAddress</name><operator>.</operator><name>addr</name></name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid address length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Explanation of IGNORE-BANNED:
	 * This is a common pattern when using getaddrinfo. The system guarantees
	 * that ai_addrlen &lt; sizeof(socketAddress.addr). Out of an abundance of
	 * caution. We also check it above.
	 */</comment>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>socketAddress</name><operator>.</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>ipAddressList</name><operator>-&gt;</operator><name>ai_addr</name></name></expr></argument>, <argument><expr><name><name>ipAddressList</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* IGNORE-BANNED */</comment>
	<expr_stmt><expr><name><name>socketAddress</name><operator>.</operator><name>salen</name></name> <operator>=</operator> <name><name>ipAddressList</name><operator>-&gt;</operator><name>ai_addrlen</name></name></expr>;</expr_stmt>

	<comment type="block">/* send the cancellation */</comment>
	<decl_stmt><decl><type><name>bool</name></type> <name>cancelSucceeded</name> <init>= <expr><call><name>internal_cancel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>socketAddress</name></expr></argument>, <argument><expr><name>pid</name></expr></argument>, <argument><expr><name>cancelAuthCode</name></expr></argument>,
										   <argument><expr><name>errorBuffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>errorBuffer</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>cancelSucceeded</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>pg_fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"sending cancellation to %s:%s failed: %s"</literal></expr></argument>,
				   <argument><expr><name>host</name></expr></argument>, <argument><expr><name>portString</name></expr></argument>, <argument><expr><name>errorBuffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>pg_freeaddrinfo_all</name><argument_list>(<argument><expr><name>ipAddressListFamily</name></expr></argument>, <argument><expr><name>ipAddressList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* *INDENT-OFF* */</comment>

<comment type="block">/*
 * internal_cancel is copied from fe-connect.c
 *
 * The return value is true if the cancel request was successfully
 * dispatched, false if not (in which case an error message is available).
 * Note: successful dispatch is no guarantee that there will be any effect at
 * the backend.  The application must read the operation result as usual.
 *
 * CAUTION: we want this routine to be safely callable from a signal handler
 * (for example, an application might want to call it in a SIGINT handler).
 * This means we cannot use any C library routine that might be non-reentrant.
 * malloc/free are often non-reentrant, and anything that might call them is
 * just as dangerous.  We avoid sprintf here for that reason.  Building up
 * error messages with strcpy/strcat is tedious but should be quite safe.
 * We also save/restore errno in case the signal handler support doesn't.
 *
 * internal_cancel() is an internal helper function to make code-sharing
 * between the two versions of the cancel function possible.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type>
<name>internal_cancel</name><parameter_list>(<parameter><decl><type><name>SockAddr</name> <modifier>*</modifier></type><name>raddr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be_pid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>be_key</name></decl></parameter>,
				<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errbuf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>errbufsize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type>			<name>save_errno</name> <init>= <expr><name>SOCK_ERRNO</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>pgsocket</name></type>	<name>tmpsock</name> <init>= <expr><name>PGINVALID_SOCKET</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name></type>		<name><name>sebuf</name><index>[<expr><name>PG_STRERROR_R_BUFLEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type>			<name>maxlen</name></decl>;</decl_stmt>
	<struct>struct
	<block>{
		<decl_stmt><decl><type><name>uint32</name></type>		<name>packetlen</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CancelRequestPacket</name></type> <name>cp</name></decl>;</decl_stmt>
	}</block>			<decl><name>crp</name></decl>;</struct>

	<comment type="block">/*
	 * We need to open a temporary connection to the postmaster. Do this with
	 * only kernel calls.
	 */</comment>
	<if_stmt><if>if <condition>(<expr><operator>(</operator><name>tmpsock</name> <operator>=</operator> <call><name>socket</name><argument_list>(<argument><expr><name><name>raddr</name><operator>-&gt;</operator><name>addr</name><operator>.</operator><name>ss_family</name></name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>PGINVALID_SOCKET</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"PQcancel() -- socket() failed: "</literal></expr></argument>, <argument><expr><name>errbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cancel_errReturn</name>;</goto>
	</block_content>}</block></if></if_stmt>
<label><name>retry3</name>:</label>
	<if_stmt><if>if <condition>(<expr><call><name>connect</name><argument_list>(<argument><expr><name>tmpsock</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name><name>raddr</name><operator>-&gt;</operator><name>addr</name></name></expr></argument>, <argument><expr><name><name>raddr</name><operator>-&gt;</operator><name>salen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>SOCK_ERRNO</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* Interrupted system call - we'll just try again */</comment>
			<goto>goto <name>retry3</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"PQcancel() -- connect() failed: "</literal></expr></argument>, <argument><expr><name>errbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cancel_errReturn</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * We needn't set nonblocking I/O or NODELAY options here.
	 */</comment>

	<comment type="block">/* Create and send the cancel request packet. */</comment>

	<expr_stmt><expr><name><name>crp</name><operator>.</operator><name>packetlen</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><operator>(</operator><name>uint32</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>crp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>crp</name><operator>.</operator><name>cp</name><operator>.</operator><name>cancelRequestCode</name></name> <operator>=</operator> <operator>(</operator><name>MsgType</name><operator>)</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>CANCEL_REQUEST_CODE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>crp</name><operator>.</operator><name>cp</name><operator>.</operator><name>backendPID</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>be_pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>crp</name><operator>.</operator><name>cp</name><operator>.</operator><name>cancelAuthCode</name></name> <operator>=</operator> <call><name>pg_hton32</name><argument_list>(<argument><expr><name>be_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>retry4</name>:</label>
	<if_stmt><if>if <condition>(<expr><call><name>send</name><argument_list>(<argument><expr><name>tmpsock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>crp</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>crp</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>int</name><operator>)</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>crp</name></expr></argument>)</argument_list></sizeof></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>SOCK_ERRNO</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* Interrupted system call - we'll just try again */</comment>
			<goto>goto <name>retry4</name>;</goto></block_content></block></if></if_stmt>
		<expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"PQcancel() -- send() failed: "</literal></expr></argument>, <argument><expr><name>errbufsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>cancel_errReturn</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/*
	 * Wait for the postmaster to close the connection, which indicates that
	 * it's processed the request.  Without this delay, we might issue another
	 * command only to find that our cancel zaps that command instead of the
	 * one we thought we were canceling.  Note we don't actually expect this
	 * read to obtain any data, we are just waiting for EOF to be signaled.
	 */</comment>
<label><name>retry5</name>:</label>
	<if_stmt><if>if <condition>(<expr><call><name>recv</name><argument_list>(<argument><expr><name>tmpsock</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <operator>&amp;</operator><name>crp</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<if_stmt><if>if <condition>(<expr><name>SOCK_ERRNO</name> <operator>==</operator> <name>EINTR</name></expr>)</condition><block type="pseudo"><block_content>
			<comment type="block">/* Interrupted system call - we'll just try again */</comment>
			<goto>goto <name>retry5</name>;</goto></block_content></block></if></if_stmt>
		<comment type="block">/* we ignore other error conditions */</comment>
	</block_content>}</block></if></if_stmt>

	<comment type="block">/* All done */</comment>
	<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>tmpsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>SOCK_ERRNO_SET</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>true</name></expr>;</return>

<label><name>cancel_errReturn</name>:</label>

	<comment type="block">/*
	 * Make sure we don't overflow the error buffer. Leave space for the \n at
	 * the end, and for the terminating zero.
	 */</comment>
	<expr_stmt><expr><name>maxlen</name> <operator>=</operator> <name>errbufsize</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>maxlen</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition>
	<block>{<block_content>
		<comment type="block">/*
		 * Explanation of IGNORE-BANNED:
		 * This is well-tested libpq code that we would like to preserve in its
		 * original form. The appropriate length calculation is done above.
		 */</comment>
		<expr_stmt><expr><call><name>strncat</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><call><name>SOCK_STRERROR</name><argument_list>(<argument><expr><name>SOCK_ERRNO</name></expr></argument>, <argument><expr><name>sebuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sebuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>, <comment type="block">/* IGNORE-BANNED */</comment>
				<argument><expr><name>maxlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>errbuf</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* IGNORE-BANNED */</comment>
	</block_content>}</block></if></if_stmt>
	<if_stmt><if>if <condition>(<expr><name>tmpsock</name> <operator>!=</operator> <name>PGINVALID_SOCKET</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>closesocket</name><argument_list>(<argument><expr><name>tmpsock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>SOCK_ERRNO_SET</name><argument_list>(<argument><expr><name>save_errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* *INDENT-ON* */</comment>
</unit>
