<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/util/traildb_bench.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traildb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_profile.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPORT_ERROR</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>				\
	<cpp:value>do {						\
		fprintf(stderr, (fmt), ##__VA_ARGS__);	\
	} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>REPORT_WARNING</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>			\
	<cpp:value>do {						\
		fprintf(stderr, ("WARNING: " fmt), ##__VA_ARGS__);	\
	} while(0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIMED</name><parameter_list>(<parameter><type><name>msg</name></type></parameter>, <parameter><type><name>err</name></type></parameter>, <parameter><type><name>stmt</name></type></parameter>)</parameter_list></cpp:macro>			\
<cpp:value>do {						\
	TDB_TIMER_DEF;				\
	TDB_TIMER_START;			\
	(err) = (stmt);				\
	TDB_TIMER_END("traildb_bench/" msg);	\
} while(0)</cpp:value></cpp:define>


<comment type="block" format="doxygen">/**
 * super dirty hack to make the compiler happy
 *
 * also: https://www.youtube.com/watch?v=1dV_6EtfvkM
 */</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>const_quirk</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>argv</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_hex</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>raw</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>+</operator><literal type="number">4</literal> <operator>&lt;=</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">4</literal></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x%02x%02x%02x "</literal></expr></argument>,
		       <argument><expr><name><name>raw</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><name>length</name> <operator>-</operator> <operator>(</operator><name>length</name> <operator>%</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%02x"</literal></expr></argument>, <argument><expr><name><name>raw</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * calls tdb_get_trail over the full tdb
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>do_get_all_and_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>,
				 <parameter><decl><type><name>tdb_field</name><modifier>*</modifier></type> <name>ids</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>ids_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tdb_cursor</name><modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>items_decoded</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_trails</name> <init>= <expr><call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>trail_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <name>num_trails</name></expr>;</condition> <incr><expr><operator>++</operator><name>trail_id</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"%s: failed to extract trail %"</literal> <name>PRIu64</name> <literal type="string">". error=%i\n"</literal></expr></argument>,
				     <argument><expr><name>path</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>
		<while>while<condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
			<for>for<control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>ids_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
				<decl_stmt><decl><type><name>uint64_t</name></type> <name>dummy</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><specifier>const</specifier> <name>tdb_item</name></type> <name>item</name> <init>= <expr><name><name>e</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>ids</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>tdb_get_item_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>item</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dummy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><operator>++</operator><name>items_decoded</name></expr>;</expr_stmt>
			</block_content>}</block></for>
		</block_content>}</block></while>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"# items decoded: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>items_decoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_get_all_and_decode</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>dbs</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name> <init>= <expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Error code %i while opening TDB at %s\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><literal type="number">1</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>nfields</name> <init>= <expr><operator>(</operator><name>unsigned</name><operator>)</operator><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>tdb_field</name></type> <name><name>ids</name><index>[<expr><name>nfields</name></expr>]</index></name></decl>;</decl_stmt>
		<for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>field_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>field_id</name> <operator>&lt;</operator> <name>nfields</name></expr>;</condition> <incr><expr><operator>++</operator><name>field_id</name></expr></incr>)</control><block type="pseudo"><block_content>
			<expr_stmt><expr><name><name>ids</name><index>[<expr><name>field_id</name></expr>]</index></name> <operator>=</operator> <name>field_id</name></expr>;</expr_stmt></block_content></block></for>

		<expr_stmt><expr><call><name>TIMED</name><argument_list>(<argument><expr><literal type="string">"get_all"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>do_get_all_and_decode</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><name>nfields</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>resolve_fieldids</name><parameter_list>(<parameter><decl><type><name>tdb_field</name><modifier>*</modifier><modifier>*</modifier></type> <name>field_ids</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name><modifier>*</modifier></type> <name>db</name></decl></parameter>,
			    <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>field_names</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>names_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb_field</name><modifier>*</modifier></type> <name>out</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>names_length</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_field</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>field_ids</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>names_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control>
	<block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>err</name> <init>= <expr><call><name>tdb_get_field</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>out</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Could not find field name %s\n"</literal></expr></argument>,
				     <argument><expr><name><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>err</name>;</goto>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><operator>*</operator><name>field_ids</name> <operator>=</operator> <name>out</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>err</name>:</label>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_decode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>field_names</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>names_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name> <init>= <expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to open TDB. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>tdb_field</name><modifier>*</modifier></type> <name>ids</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>resolve_fieldids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ids</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>field_names</name></expr></argument>, <argument><expr><name>names_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>out</name>;</goto></block_content></block></if></if_stmt>

	<comment type="block" format="doxygen">/** actual field names (except for timestamp) */</comment>
	<for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>names_length</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"reading from timestamp column 0 not supported"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><operator>--</operator><name><name>ids</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<expr_stmt><expr><call><name>TIMED</name><argument_list>(<argument><expr><literal type="string">"cmd_decode"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>do_get_all_and_decode</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>ids</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>names_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>do_recode</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name><modifier>*</modifier> <specifier>const</specifier></type> <name>cons</name></decl></parameter>, <parameter><decl><type><name>tdb</name><modifier>*</modifier> <specifier>const</specifier></type> <name>db</name></decl></parameter>,
		     <parameter><decl><type><name>tdb_field</name><modifier>*</modifier> <specifier>const</specifier></type> <name>field_ids</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>num_fieldids</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_fields</name> <init>= <expr><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_trails</name> <init>= <expr><call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type>  <name>values</name>        <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>num_fields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier>    <specifier>const</specifier></type>  <name>value_lengths</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><name>num_fields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tdb_cursor</name><modifier>*</modifier>  <specifier>const</specifier></type>  <name>c</name>             <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>value_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="block">/*
	 * for each trail
	 *   for each "record" in the timeline
	 *     extract/decode the relevant fields that are in field_ids
	 *     insert the record
	 */</comment>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>trail_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <name>num_trails</name></expr>;</condition> <incr><expr><operator>++</operator><name>trail_id</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to get trail (trail_id=%"</literal> <name>PRIu64</name> <literal type="string">"). error=%i\n"</literal></expr></argument>,
				     <argument><expr><name>trail_id</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<goto>goto <name>free_mem</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>
		<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>ev_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>ev_id</name></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/* extract step */</comment>
			<for>for<control>(<init><decl><type><name>int</name></type> <name>field</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name>num_fieldids</name></expr>;</condition> <incr><expr><operator>++</operator><name>field</name></expr></incr>)</control> <block>{<block_content>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&lt;</operator> <name><name>field_ids</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>field_ids</name><index>[<expr><name>field</name></expr>]</index></name> <operator>&lt;=</operator> <name><name>e</name><operator>-&gt;</operator><name>num_items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

				<comment type="block" format="doxygen">/** field ids start by '1' as column 0
				    historically is the timestamp
				    column. With tdb_event, the actual
				    fields are 0-indexed */</comment>
				<expr_stmt><expr><name><name>values</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <call><name>tdb_get_item_value</name><argument_list>(
					<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>field_ids</name><index>[<expr><name>field</name></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
					<argument><expr><operator>&amp;</operator><name><name>value_lengths</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></for>

			<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr></argument>,
					   <argument><expr><name><name>e</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>value_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to append record (trail_id=%"</literal> <name>PRIu64</name> <literal type="string">", ev_id=%"</literal> <name>PRIu64</name> <literal type="string">"). error=%i\n"</literal></expr></argument>,
					     <argument><expr><name>trail_id</name></expr></argument>, <argument><expr><name>ev_id</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<goto>goto <name>free_mem</name>;</goto>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></for>

<label><name>free_mem</name>:</label>
	<expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>value_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * copies a subset of data from one DB into another one. The subset is
 * given by field names
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_recode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output_path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>,
		      <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>field_names</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>names_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>names_length</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>tdb</name><modifier>*</modifier> <specifier>const</specifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to open TDB. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>tdb_field</name><modifier>*</modifier></type> <name>field_ids</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>resolve_fieldids</name><argument_list>(<argument><expr><operator>&amp;</operator><name>field_ids</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>field_names</name></expr></argument>, <argument><expr><name>names_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<goto>goto <name>free_tdb</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>tdb_cons</name><modifier>*</modifier> <specifier>const</specifier></type> <name>cons</name> <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>output_path</name></expr></argument>, <argument><expr><name>field_names</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name><operator>)</operator><name>names_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create TDB cons. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>free_ids</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>TIMED</name><argument_list>(<argument><expr><literal type="string">"recode"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>do_recode</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>field_ids</name></expr></argument>, <argument><expr><name>names_length</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
		<goto>goto <name>close_cons</name>;</goto></block_content></block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to finalize output DB. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

<label><name>close_cons</name>:</label>
	<expr_stmt><expr><call><name>tdb_cons_close</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>free_ids</name>:</label>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>free_tdb</name>:</label>
	<expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>duplicate_fieldids</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name><modifier>*</modifier></type> <name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_fields</name> <init>= <expr><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num_fields</name> <operator>&lt;=</operator> <name>TDB_MAX_NUM_FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>fieldids</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>tdb_field</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>field_id</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>field_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>fieldids</name><index>[<expr><name>i</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>field_id</name></expr>;</expr_stmt>
	</block_content>}</block></for>

	<return>return <expr><name>fieldids</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_append_all</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>output_path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to open TDB. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_fields</name> <init>= <expr><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier></type>   <name>field_ids</name>  <init>= <expr><call><name>duplicate_fieldids</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>tdb_cons</name><modifier>*</modifier></type>      <name>cons</name>       <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>output_path</name></expr></argument>, <argument><expr><name>field_ids</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to create TDB cons. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>free_fieldids</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>TIMED</name><argument_list>(<argument><expr><literal type="string">"tdb_cons_append()"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>, <argument><expr><call><name>tdb_cons_append</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to append DB. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>close_cons</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to finalize output DB. error=%i\n"</literal></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<goto>goto <name>close_cons</name>;</goto>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully converted / rewritten DB.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>


<label><name>close_cons</name>:</label>
	<expr_stmt><expr><call><name>tdb_cons_close</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>free_fieldids</name>:</label>
	<comment type="block">/* to make the compiler not complain about casting const'ness away,
	   let's pull out this small, dirty trick */</comment>
	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>make_compiler_happy</name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>make_compiler_happy</name></expr></argument>, <argument><expr><name>field_ids</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>make_compiler_happy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field_ids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><ternary><condition><expr><name>err</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_trail</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name><modifier>*</modifier></type> <name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name><modifier>*</modifier></type> <name>uuid</name></decl></parameter>, <parameter><decl><type><name>tdb_cursor</name><modifier>*</modifier></type> <name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HEX4</name></cpp:macro> <cpp:value>"%02x%02x%02x%02x"</cpp:value></cpp:define>
	<macro><name>printf</name><argument_list>(<argument><literal type="string">"cookie "</literal> HEX4 HEX4 HEX4 HEX4 <literal type="string">"\n"</literal></argument>,
	       <argument>uuid[<literal type="number">0</literal>]</argument>,  <argument>uuid[<literal type="number">1</literal>]</argument>,  <argument>uuid[<literal type="number">2</literal>]</argument>,  <argument>uuid[<literal type="number">3</literal>]</argument>,
	       <argument>uuid[<literal type="number">4</literal>]</argument>,  <argument>uuid[<literal type="number">5</literal>]</argument>,  <argument>uuid[<literal type="number">6</literal>]</argument>,  <argument>uuid[<literal type="number">7</literal>]</argument>,
	       <argument>uuid[<literal type="number">8</literal>]</argument>,  <argument>uuid[<literal type="number">9</literal>]</argument>,  <argument>uuid[<literal type="number">10</literal>]</argument>, <argument>uuid[<literal type="number">11</literal>]</argument>,
	       <argument>uuid[<literal type="number">12</literal>]</argument>, <argument>uuid[<literal type="number">13</literal>]</argument>, <argument>uuid[<literal type="number">14</literal>]</argument>, <argument>uuid[<literal type="number">15</literal>]</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>HEX4</name></cpp:undef>

	<decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name><modifier>*</modifier></type> <name>e</name></decl>;</decl_stmt>
	<while>while<condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"ts=%"</literal> <name>PRIu64</name> <literal type="string">":\n"</literal></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>e</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>name</name> <init>= <expr><call><name>tdb_get_field_name</name><argument_list>(
				<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name><name>e</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint64_t</name></type>     <name>v_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type>  <name>v</name>     <init>= <expr><call><name>tdb_get_item_value</name><argument_list>(
				<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>e</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>v_len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s="</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>dump_hex</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>v_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></for>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_dump</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to open TDB at directory %s. error=%i\n"</literal></expr></argument>,
			     <argument><expr><name>db_path</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><name>tdb_cursor</name><modifier>*</modifier> <specifier>const</specifier></type> <name>c</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_trails</name> <init>= <expr><call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<for>for<control>(<init><decl><type><name>uint64_t</name></type> <name>trail_id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <name>num_trails</name></expr>;</condition> <incr><expr><operator>++</operator><name>trail_id</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to decode trail %"</literal> <name>PRIu64</name> <literal type="string">". error=%i\n"</literal></expr></argument>,
				     <argument><expr><name>trail_id</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<goto>goto <name>out</name>;</goto>
		</block_content>}</block></if></if_stmt>

		<expr_stmt><expr><call><name>dump_trail</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

<label><name>out</name>:</label>
	<expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmd_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>db_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt> <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>err</name> <init>= <expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>REPORT_ERROR</name><argument_list>(<argument><expr><literal type="string">"Failed to open TDB at directory %s. error=%i\n"</literal></expr></argument>,
			     <argument><expr><name>db_path</name></expr></argument>, <argument><expr><name>err</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"DB at %s:\n"</literal>
	       <literal type="string">" version: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
	       <literal type="string">" #trails: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
	       <literal type="string">" #events: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
	       <literal type="string">" #fields: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
	       <literal type="string">"\n"</literal>
	       <literal type="string">" min timestamp: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal>
	       <literal type="string">" max timestamp: %"</literal> <name>PRIu64</name> <literal type="string">"\n"</literal></expr></argument>,
	       <argument><expr><name>db_path</name></expr></argument>,
	       <argument><expr><call><name>tdb_version</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
	       <argument><expr><call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
	       <argument><expr><call><name>tdb_num_events</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
	       <argument><expr><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
	       <argument><expr><call><name>tdb_min_timestamp</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
	       <argument><expr><call><name>tdb_max_timestamp</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nColumns: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" field[00] = %s (implicit)\n"</literal></expr></argument>, <argument><expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument> )</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <for>for<control>(<init><decl><type><name>unsigned</name></type> <name>fid</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>fid</name> <operator>&lt;</operator> <call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>fid</name></expr></incr>)</control> <block>{<block_content>
	       <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" field[%02u] = %s\n"</literal></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       </block_content>}</block></for>

       <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
       <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_help</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(
<argument><expr><literal type="string">"Usage: traildb_bench &lt;command&gt; [&lt;mode-specific options&gt;*]\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Available commands:\n"</literal>
<literal type="string">"  decode-all &lt;database directory&gt;*\n"</literal>
<literal type="string">"  :: iterates over the complete DB, decoding\n"</literal>
<literal type="string">"     every value encountered\n"</literal>
<literal type="string">"  decode &lt;database directory&gt; &lt;field name&gt;+\n"</literal>
<literal type="string">"  :: iterates over the complete DB, decoding\n"</literal>
<literal type="string">"     the values of each given field\n"</literal>
<literal type="string">"  append-all &lt;output path&gt; &lt;input path&gt;\n"</literal>
<literal type="string">"  :: copies data from one DB into a new or\n"</literal>
<literal type="string">"     existing database. Has multiple use-cases,\n"</literal>
<literal type="string">"     such as: converting DB formats, merging DBs, etc..\n"</literal>
<literal type="string">"     Assumes DBs have identical fieldsets.\n"</literal>
<literal type="string">"  recode &lt;output path&gt; &lt;input path&gt; &lt;column name&gt;+\n"</literal>
<literal type="string">"  :: copies the given (sub)set of columns from the DB at\n"</literal>
<literal type="string">"      /input path/ into /output path/\n"</literal>
<literal type="string">"  info &lt;path&gt;\n"</literal>
<literal type="string">"  :: displays information on a TDB\n"</literal>
<literal type="string">"  dump &lt;path&gt;\n"</literal>
<literal type="string">"  :: dumps contents of a traildb in a most primitive way.\n"</literal></expr></argument>	       
		)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_CMD</name><parameter_list>(<parameter><type><name>cmd</name></type></parameter>, <parameter><type><name>nargs</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(strcmp(command, (cmd)) == 0 &amp;&amp; argc &gt;= (nargs + 2))</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<if_stmt><if>if<condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>

	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier>  <specifier>const</specifier></type> <name>command</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier><modifier>*</modifier> <specifier>const</specifier></type> <name>cargv</name>   <init>= <expr><call><name>const_quirk</name><argument_list>(<argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><call><name>IS_CMD</name><argument_list>(<argument><expr><literal type="string">"decode-all"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cmd_get_all_and_decode</name><argument_list>(<argument><expr><name>argv</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>IS_CMD</name><argument_list>(<argument><expr><literal type="string">"decode"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cmd_decode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cargv</name> <operator>+</operator> <literal type="number">3</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>IS_CMD</name><argument_list>(<argument><expr><literal type="string">"append-all"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cmd_append_all</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>IS_CMD</name><argument_list>(<argument><expr><literal type="string">"recode"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cmd_recode</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name>cargv</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>argc</name> <operator>-</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>IS_CMD</name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cmd_info</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<if type="elseif">else if<condition>(<expr><call><name>IS_CMD</name><argument_list>(<argument><expr><literal type="string">"dump"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><call><name>cmd_dump</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
	</block_content>}</block></if>
	<else>else <block>{<block_content>
		<expr_stmt><expr><call><name>print_help</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></else></if_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
