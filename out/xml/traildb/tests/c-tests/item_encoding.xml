<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/item_encoding.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tdb_types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tdb_limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_item</name><parameter_list>(<parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>tdb_val</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_item</name></type> <name>item</name> <init>= <expr><call><name>tdb_make_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>&lt;=</operator> <name>TDB_FIELD32_MAX</name> <operator>&amp;&amp;</operator> <name>val</name> <operator>&lt;=</operator> <name>TDB_VAL32_MAX</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>item</name> <operator>&lt;=</operator> <name>UINT32_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_item_is32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_item_field32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_item_val32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_item_is32</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_item_val</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_vals</name><parameter_list>(<parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_val</name></type> <name>val</name></decl>;</decl_stmt>

    <comment type="block">/* test small vals */</comment>

    <for>for <control>(<init><expr><name>val</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>val</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>val</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>check_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* test medium vals */</comment>

    <for>for <control>(<init><expr><name>val</name> <operator>=</operator> <name>TDB_VAL32_MAX</name> <operator>-</operator> <literal type="number">1000</literal></expr>;</init> <condition><expr><name>val</name> <operator>&lt;</operator> <name>TDB_VAL32_MAX</name> <operator>+</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>val</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>check_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* test large vals */</comment>

    <for>for <control>(<init><expr><name>val</name> <operator>=</operator> <name>TDB_MAX_NUM_VALUES</name> <operator>-</operator> <literal type="number">1000</literal></expr>;</init> <condition><expr><name>val</name> <operator>&lt;</operator> <name>TDB_MAX_NUM_VALUES</name></expr>;</condition> <incr><expr><name>val</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>check_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name></decl>;</decl_stmt>

    <comment type="block">/* test small field IDs */</comment>

    <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name>TDB_FIELD32_MAX</name> <operator>+</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>test_vals</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* test large field IDs */</comment>

    <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <name>TDB_MAX_NUM_FIELDS</name> <operator>-</operator> <literal type="number">1000</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name>TDB_MAX_NUM_FIELDS</name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>test_vals</name><argument_list>(<argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
