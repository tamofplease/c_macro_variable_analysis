<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/event_filter_simple.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<comment type="block">/* this is a macro so assert() can report the line number correctly */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>assert_num_events</name><parameter_list>(<parameter><type><name>c</name></type></parameter>, <parameter><type><name>f</name></type></parameter>, <parameter><type><name>expected</name></type></parameter>)</parameter_list></cpp:macro><cpp:value>{\
    tdb_cursor_set_event_filter(c, f);\
    assert(tdb_get_trail(c, 0) == 0);\
    assert(tdb_get_trail_length(c) == expected);\
}</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fields</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"a"</literal></expr>, <expr><literal type="string">"b"</literal></expr>, <expr><literal type="string">"c"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>event1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"bar"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>event2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"sun"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>event3</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"foo"</literal></expr>, <expr><literal type="string">"run"</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>event4</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">""</literal></expr>, <expr><literal type="string">"sun"</literal></expr>, <expr><literal type="string">"nam"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name><name>lengths1</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name><name>lengths2</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">3</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tdb_cons</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>test_cons_settings</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TDB_TMP_DIR"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>event1</name></expr></argument>, <argument><expr><name>lengths1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>event2</name></expr></argument>, <argument><expr><name>lengths1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><name>event3</name></expr></argument>, <argument><expr><name>lengths1</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>c</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>event4</name></expr></argument>, <argument><expr><name>lengths2</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cons_close</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>t</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TDB_TMP_DIR"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field_a</name></decl>, <decl><type ref="prev"/><name>field_b</name></decl>, <decl><type ref="prev"/><name>field_c</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_field</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_a</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_field</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"b"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_b</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_field</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><literal type="string">"c"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>field_c</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* SIMPLE OR-QUERIES */</comment>

    <comment type="block">/* empty clause shouldn't match to any event */</comment>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* events with a=foo: 1, 2, 3 */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* events with a=foo OR b=sun: 1, 2, 3, 4 */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_b</name></expr></argument>, <argument><expr><literal type="string">"sun"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* empty values in proper fields should be handled as any other values */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_c</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* adding another fully overlapping (duplicate) term shouldn't change anything */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* SIMPLE NEGATIONS */</comment>

    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* NOT a=foo matches one event */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* NOT c="" matches one event - empty fields are ok */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_c</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* NOT b=sun OR a=foo matches three events */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_b</name></expr></argument>, <argument><expr><literal type="string">"sun"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* SIMPLE AND-QUERIES */</comment>

    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (a=foo) AND () results to nothing */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_event_filter_new_clause</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (b=sun) AND (c=nam) matches only one event */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_b</name></expr></argument>, <argument><expr><literal type="string">"sun"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_event_filter_new_clause</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_c</name></expr></argument>, <argument><expr><literal type="string">"nam"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (b=sun) AND (c=nam OR a='') matches the same event */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (b=sun) AND (NOT a=foo) */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_b</name></expr></argument>, <argument><expr><literal type="string">"sun"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_event_filter_new_clause</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* (a=foo) AND (b=bar) AND (c='') matches one event */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_a</name></expr></argument>, <argument><expr><literal type="string">"foo"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_event_filter_new_clause</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_b</name></expr></argument>, <argument><expr><literal type="string">"bar"</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_event_filter_new_clause</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><call><name>tdb_get_item</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>field_c</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* SPECIAL NULL VALUE */</comment>

    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* null event matches nothing */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* negation of null matches everything */</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_event_filter_add_term</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* CONVENIENCE FUNCTIONS */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new_match_all</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new_match_none</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert_num_events</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* UNSETTING */</comment>

    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_set_event_filter</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_trail_length</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_unset_event_filter</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_get_trail_length</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
       ONLY_DIFF
       filters for ONLY_DIFF mode are not supported:
       The sematics are too ill-defined
    */</comment>
    <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>f</name> <operator>=</operator> <call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_set_opt</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>TDB_OPT_ONLY_DIFF_ITEMS</name></expr></argument>, <argument><expr><name>TDB_TRUE</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cursor</name> <operator>=</operator> <call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cursor_set_event_filter</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TDB_ERR_ONLY_DIFF_FILTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
