<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/judy_128_map_test.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/resource.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSFMT_MEXP</name></cpp:macro> <cpp:value>521</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dsfmt/dSFMT.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;judy_128_map.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_LIMIT</name></cpp:macro> <cpp:value>(128 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ITER</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_OOM_ITER</name></cpp:macro> <cpp:value>100000000</cpp:value></cpp:define>

<struct>struct <name>foldstate</name><block>{
    <decl_stmt><decl><type><name>__uint128_t</name></type> <name>prev_key</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fun</name><parameter_list>(<parameter><decl><type><name>__uint128_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>foldstate</name></name> <modifier>*</modifier></type><name>foldstate</name> <init>= <expr><operator>(</operator>struct <name>foldstate</name><operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>foldstate</name><operator>-&gt;</operator><name>prev_key</name></name> <operator>&lt;</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>foldstate</name><operator>-&gt;</operator><name>prev_key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> <operator>&gt;&gt;=</operator> <literal type="number">64</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal> <operator>==</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>++</operator><name><name>foldstate</name><operator>-&gt;</operator><name>count</name></name></expr>;</expr_stmt>

    <return>return <expr><name>foldstate</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>__uint128_t</name></type> <name>gen_key</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>rand</name> <init>= <expr><call><name>dsfmt_genrand_close_open</name><argument_list>(<argument><expr><name>state</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>__uint128_t</name></type> <name>ret</name> <init>= <expr><name>idx</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>&lt;&lt;=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rand</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>test_out_of_memory</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>judy_128_map</name></name></type> <name>jm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dsfmt_t</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>rlimit</name></name></type> <name>limit</name> <init>= <expr><block>{<expr><operator>.</operator><name>rlim_cur</name> <operator>=</operator> <name>MEM_LIMIT</name></expr>, <expr><operator>.</operator><name>rlim_max</name> <operator>=</operator> <name>MEM_LIMIT</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>setrlimit</name><argument_list>(<argument><expr><name>RLIMIT_AS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>limit</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>j128m_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_OOM_ITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>j128m_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>, <argument><expr><call><name>gen_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block>{<block_content>
            <comment type="block">/* we expect folding to consume no extra memory, so it should
               succeed even after insert fails with OOM */</comment>
            <decl_stmt><decl><type><name><name>struct</name> <name>foldstate</name></name></type> <name>foldstate</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>j128m_fold</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>foldstate</name><operator>.</operator><name>count</name></name> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>j128m_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>j128m_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>foldstate</name></name></type> <name>foldstate</name> <init>= <expr><block>{}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>judy_128_map</name></name></type> <name>jm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dsfmt_t</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>j128m_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test insert */</comment>

    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>j128m_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>, <argument><expr><call><name>gen_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* test num_keys */</comment>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>j128m_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NUM_ITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test get */</comment>

    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>j128m_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>, <argument><expr><call><name>gen_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init><condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ITER</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>j128m_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>, <argument><expr><call><name>gen_key</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* test fold */</comment>

    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>j128m_fold</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>, <argument><expr><name>fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>foldstate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>foldstate</name><operator>.</operator><name>count</name></name> <operator>==</operator> <name>NUM_ITER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>j128m_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test out of memory condition */</comment>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>test_out_of_memory</name><argument_list>()</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
