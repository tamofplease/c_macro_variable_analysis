<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/multi_cursor.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tdb_io.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_COMMON_TRAILS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_TRAIL_LENGTH</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>tdb</name> <modifier>*</modifier></type><name>create_db</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fields</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"id"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[]</index></name> <init>= <expr><block>{<expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>id</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>lengths</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">4</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tdb_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s.%u"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>tdb_cons</name><modifier>*</modifier></type> <name>cons</name> <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>test_cons_settings</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1000</literal> <operator>+</operator> <name>NUM_COMMON_TRAILS</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>timestamp</name> <operator>=</operator> <literal type="number">1000</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>timestamp</name> <operator>+=</operator> <name>id</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cons_close</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>timestamp_cmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>aa</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>bb</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><name>b</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>aa</name> <operator>&gt;</operator> <operator>*</operator><name>bb</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>*</operator><name>aa</name> <operator>&lt;</operator> <operator>*</operator><name>bb</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_multi_cursor_next</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mcursor</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>correct_timestamps</name></decl></parameter>,
                                   <parameter><decl><type><name>uint64_t</name></type> <name>num_correct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_multi_event</name> <modifier>*</modifier></type><name>mevent</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tdb_multi_cursor_reset</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>mevent</name> <operator>=</operator> <call><name>tdb_multi_cursor_next</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>&lt;</operator> <name>num_correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mevent</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>==</operator> <name><name>correct_timestamps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* test that mevent-&gt;db is set correctly */</comment>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>mevent</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>num_items</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>tdb_get_item_value</name><argument_list>(<argument><expr><name><name>mevent</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                                             <argument><expr><name><name>mevent</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>id</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>id</name> <operator>==</operator> <name><name>mevent</name><operator>-&gt;</operator><name>cursor_idx</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* test multi_cursor_peek */</comment>
        <expr_stmt><expr><name>mevent</name> <operator>=</operator> <call><name>tdb_multi_cursor_peek</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mevent</name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
               <name><name>mevent</name><operator>-&gt;</operator><name>event</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;=</operator> <name><name>correct_timestamps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>i</name> <operator>==</operator> <name>num_correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_multi_cursor_next_batch</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mcursor</name></decl></parameter>,
                                         <parameter><decl><type><name>tdb_multi_event</name> <modifier>*</modifier></type><name>events</name></decl></parameter>,
                                         <parameter><decl><type><name>uint64_t</name></type> <name>max_events</name></decl></parameter>,
                                         <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>correct_timestamps</name></decl></parameter>,
                                         <parameter><decl><type><name>uint64_t</name></type> <name>num_correct</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdb_multi_cursor_reset</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>n</name> <operator>=</operator> <call><name>tdb_multi_cursor_next_batch</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>, <argument><expr><name>events</name></expr></argument>, <argument><expr><name>max_events</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total</name> <operator>&lt;=</operator> <name>num_correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr><operator>,</operator> <expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>events</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>==</operator> <name><name>correct_timestamps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>total</name> <operator>==</operator> <name>num_correct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>test_multicursor</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>dbs</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>num_dbs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>trail_id</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursors</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>num_dbs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_cursor</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>correct_timestamps</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>MAX_TRAIL_LENGTH</name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_multi_event</name> <modifier>*</modifier></type><name>mevents</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name>MAX_TRAIL_LENGTH</name> <operator>*</operator>
                                      <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_multi_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>cursors</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>correct_timestamps</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mevents</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <decl_stmt><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mcursor</name> <init>= <expr><call><name>tdb_multi_cursor_new</name><argument_list>(<argument><expr><name>cursors</name></expr></argument>, <argument><expr><name>num_dbs</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>mcursor</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>trail_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <name>NUM_COMMON_TRAILS</name></expr>;</condition> <incr><expr><name>trail_id</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <comment type="block">/*
        produce a ground truth using normal cursors and
        sorted results
        */</comment>
        <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>correct_timestamps</name><index>[<expr><name>n</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></while>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name>correct_timestamps</name></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>timestamp_cmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* test tdb_multi_cursor_next */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>test_multi_cursor_next</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>, <argument><expr><name>correct_timestamps</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* test tdb_multi_cursor_next_batch (minimum batch) */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>test_multi_cursor_next_batch</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>,
                                     <argument><expr><name>mevents</name></expr></argument>,
                                     <argument><expr><literal type="number">1</literal></expr></argument>,
                                     <argument><expr><name>correct_timestamps</name></expr></argument>,
                                     <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* test tdb_multi_cursor_next_batch (medium batch) */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>test_multi_cursor_next_batch</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>,
                                     <argument><expr><name>mevents</name></expr></argument>,
                                     <argument><expr><literal type="number">100</literal></expr></argument>,
                                     <argument><expr><name>correct_timestamps</name></expr></argument>,
                                     <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* test tdb_multi_cursor_next_batch (large batch) */</comment>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>test_multi_cursor_next_batch</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>,
                                     <argument><expr><name>mevents</name></expr></argument>,
                                     <argument><expr><literal type="number">1000000</literal></expr></argument>,
                                     <argument><expr><name>correct_timestamps</name></expr></argument>,
                                     <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_dbs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>tdb_multi_cursor_free</name><argument_list>(<argument><expr><name>mcursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mevents</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>correct_timestamps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cursors</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"TDB_TMP_DIR"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb</name> <modifier>*</modifier></type><name><name>dbs</name><index>[]</index></name> <init>= <expr><block>{<expr><call><name>create_db</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>)</argument_list></call></expr>,
                  <expr><call><name>create_db</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>,
                  <expr><call><name>create_db</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>,
                  <expr><call><name>create_db</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>,
                  <expr><call><name>create_db</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">50</literal></expr></argument>)</argument_list></call></expr>,
                  <macro><name>create_db</name><argument_list>(<argument>root</argument>, <argument><literal type="number">6</literal></argument>, <argument><literal type="number">500</literal></argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint32_t</name></type> <name>NUM_DBS</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbs</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name><name>BUFFER_SIZES</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1001</literal></expr>, <expr><literal type="number">1000000</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>BUFFER_SIZES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>BUFFER_SIZES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>tdb_opt_value</name></type> <name>val</name> <init>= <expr><block>{<expr><operator>.</operator><name>value</name> <operator>=</operator> <name><name>BUFFER_SIZES</name><index>[<expr><name>i</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>NUM_DBS</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>tdb_set_opt</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>TDB_OPT_CURSOR_EVENT_BUFFER_SIZE</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>test_multicursor</name><argument_list>(<argument><expr><name>dbs</name></expr></argument>, <argument><expr><name>NUM_DBS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
