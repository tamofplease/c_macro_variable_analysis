<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/judy_str_map_test.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSFMT_MEXP</name></cpp:macro> <cpp:value>521</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dsfmt/dSFMT.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;judy_str_map.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_ITER</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>fold_fun</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* test that IDs are returned in ascending order */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>prev</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>prev</name> <operator>&lt;</operator> <name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>len</name> <operator>==</operator> <literal type="number">6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>state</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>judy_str_map</name></name></type> <name>jsm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dsfmt_t</name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>comp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>keys</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>count</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>jsm_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test insert */</comment>

    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>rand</name> <init>= <expr><call><name>dsfmt_genrand_close_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><call><name>jsm_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rand</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name></type> <name>key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>tst</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rand</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>J1S</name><argument_list>(<argument><expr><name>tst</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>&lt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>Word_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>val</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* test num_keys */</comment>
    <expr_stmt><expr><call><name>J1C</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><name>keys</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>count</name> <operator>==</operator> <call><name>jsm_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* test get */</comment>

    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><literal type="number">123</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>NUM_ITER</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>rand</name> <init>= <expr><call><name>dsfmt_genrand_close_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><call><name>jsm_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>rand</name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>&lt;=</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>comp</name></expr></argument>, <argument><expr><operator>(</operator><name>Word_t</name><operator>)</operator><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ptr</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name> <operator>==</operator> <name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/* test fold */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>prev</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>jsm_fold</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>, <argument><expr><name>fold_fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>prev</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>prev</name> <operator>==</operator> <call><name>jsm_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>jsm_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
