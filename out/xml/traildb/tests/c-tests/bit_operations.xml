<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/bit_operations.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;float.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DSFMT_MEXP</name></cpp:macro> <cpp:value>521</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dsfmt/dSFMT.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tdb_bits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NUM_WORDS</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>popcount</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>val</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>+=</operator> <name>val</name> <operator>&amp;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>random_bytes</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num_words</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>popsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>dsfmt_t</name></type> <name>state</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>dsfmt_init_gen_rand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>num_words</name><operator>--</operator></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>double</name></type> <name>tmp</name> <init>= <expr><call><name>dsfmt_genrand_close_open</name><argument_list>(<argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>DBL_MAX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dst</name><index>[<expr><name>num_words</name> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tmp</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>popsum</name> <operator>+=</operator> <call><name>popcount</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>popsum</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>src_rand</name><index>[<expr><operator>(</operator><name>NUM_WORDS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>dst_rand</name><index>[<expr><operator>(</operator><name>NUM_WORDS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>width</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">20</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>correct_popsum</name> <init>= <expr><call><name>random_bytes</name><argument_list>(<argument><expr><name>src_rand</name></expr></argument>, <argument><expr><name>NUM_WORDS</name></expr></argument>, <argument><expr><literal type="number">984345</literal> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>width</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>width</name> <operator>&lt;</operator> <literal type="number">65</literal></expr>;</condition> <incr><expr><name>width</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <for>for <control>(<init><expr><name>shift</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>shift</name> <operator>&lt;</operator> <literal type="number">9</literal></expr>;</condition> <incr><expr><name>shift</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>offs</name></decl>, <decl><type ref="prev"/><name>popsum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
                <comment type="block">/* substract the first shift bits from the sum */</comment>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>popsum_shift</name> <init>= <expr><call><name>popcount</name><argument_list>(<argument><expr><name><name>src_rand</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><literal type="number">1</literal> <operator>&lt;&lt;</operator> <name>shift</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>dst_rand</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>NUM_WORDS</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><expr><name>offs</name> <operator>=</operator> <name>shift</name></expr>;</init> <condition><expr><name>offs</name> <operator>&lt;</operator> <name>NUM_WORDS</name> <operator>*</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>offs</name> <operator>+=</operator> <name>width</name></expr></incr>)</control><block>{<block_content>
                    <decl_stmt><decl><type><name>uint64_t</name></type> <name>val</name> <init>= <expr><call><name>read_bits64</name><argument_list>(<argument><expr><name>src_rand</name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>write_bits64</name><argument_list>(<argument><expr><name>dst_rand</name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>val</name> <operator>==</operator> <call><name>read_bits64</name><argument_list>(<argument><expr><name>dst_rand</name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <for>for <control>(<init><expr><name>offs</name> <operator>=</operator> <name>shift</name></expr>;</init> <condition><expr><name>offs</name> <operator>&lt;</operator> <name>NUM_WORDS</name> <operator>*</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>offs</name> <operator>+=</operator> <name>width</name></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>popsum</name> <operator>+=</operator> <call><name>popcount</name><argument_list>(<argument><expr><call><name>read_bits64</name><argument_list>(<argument><expr><name>dst_rand</name></expr></argument>, <argument><expr><name>offs</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

                <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>popsum</name> <operator>==</operator> <operator>(</operator><name>correct_popsum</name> <operator>-</operator> <name>popsum_shift</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
