<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tests/c-tests/uuid_encoding.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_test.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <for>for <control>( <init><decl><type><name>int</name></type> <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i1</name> <operator>&lt;</operator> <literal type="number">10000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i1</name></expr></incr> )</control>
    <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hex_uuid</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hex_uuid2</name><index>[<expr><literal type="number">33</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>uuid2</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

        <for>for <control>( <init><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i2</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i2</name></expr></incr> )</control> <block>{<block_content>
            <expr_stmt><expr><name><name>uuid</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>tdb_uuid_hex</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>hex_uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdb_uuid_raw</name><argument_list>(<argument><expr><name>hex_uuid</name></expr></argument>, <argument><expr><name>uuid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>uuid2</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>( <init><decl><type><name>int</name></type> <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i2</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i2</name></expr></incr> )</control> <block>{<block_content>
            <expr_stmt><expr><name><name>hex_uuid</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">16</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>hex_uuid</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>+=</operator> <literal type="char">'0'</literal></expr>;</expr_stmt>
            <if_stmt><if>if <condition>( <expr><name><name>hex_uuid</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr> )</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>hex_uuid</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>-=</operator> <operator>(</operator><literal type="char">'9'</literal><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>hex_uuid</name><index>[<expr><name>i2</name></expr>]</index></name> <operator>+=</operator> <literal type="char">'a'</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>tdb_uuid_raw</name><argument_list>(<argument><expr><name>hex_uuid</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tdb_uuid_hex</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>hex_uuid2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>hex_uuid</name></expr></argument>, <argument><expr><name>hex_uuid2</name></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
