<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/examples/tutorial_simple_traildb.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>fields</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"username"</literal></expr>, <expr><literal type="string">"action"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_cons</name><modifier>*</modifier></type> <name>cons</name> <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><literal type="string">"tiny"</literal></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Opening TrailDB constructor failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>username</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>EVENTS</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"open"</literal></expr>, <expr><literal type="string">"save"</literal></expr>, <expr><literal type="string">"close"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>

    <comment type="block">/* create three users */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>uuid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>i</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>username</name></expr></argument>, <argument><expr><literal type="string">"user%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* every user has three events */</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>values</name><index>[]</index></name> <init>= <expr><block>{<expr><name>username</name></expr>, <expr><name><name>EVENTS</name><index>[<expr><name>j</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>lengths</name><index>[]</index></name> <init>= <expr><block>{<expr><call><name>strlen</name><argument_list>(<argument><expr><name>username</name></expr></argument>)</argument_list></call></expr>, <macro><name>strlen</name><argument_list>(<argument>EVENTS[j]</argument>)</argument_list></macro>}</block></expr></init></decl>;</decl_stmt>
            <comment type="block">/* generate a dummy timestamp */</comment>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><name>i</name> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>timestamp</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Adding an event failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <comment type="block">/* finalize the TrailDB */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Closing TrailDB constructor failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdb_cons_close</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* open the newly created TrailDB and print out its contents */</comment>

    <decl_stmt><decl><type><name>tdb</name><modifier>*</modifier></type> <name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"tiny"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Opening TrailDB failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="block">/* loop over all trails */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hexuuid</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>tdb_uuid_hex</name><argument_list>(<argument><expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hexuuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%.32s "</literal></expr></argument>, <argument><expr><name>hexuuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* loop over all events of this trail */</comment>
        <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[ timestamp=%llu"</literal></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>len</name></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><call><name>tdb_get_item_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %s=%.*s"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" ] "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
