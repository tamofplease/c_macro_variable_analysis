<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tdbcli/jsmn/jsmn.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsmn.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * Allocates a fresh unused token from the token pull.
 */</comment>
<function><type><specifier>static</specifier> <name>jsmntok_t</name> <modifier>*</modifier></type><name>jsmn_alloc_token</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>,
		<parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tok</name></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>&gt;=</operator> <name>num_tokens</name></expr>)</condition> <block>{<block_content>
		<return>return <expr><name>NULL</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>tok</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>tok</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
	<expr_stmt><expr><name><name>tok</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return <expr><name>tok</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Fills token type and boundaries.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>jsmn_fill_token</name><parameter_list>(<parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl></parameter>, <parameter><decl><type><name>jsmntype_t</name></type> <name>type</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>start</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>end</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>end</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Fills next available token with JSON primitive.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jsmn_parse_primitive</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>,
		<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>start</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>start</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<switch>switch <condition>(<expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>JSMN_STRICT</name></cpp:ifndef>
			<comment type="block">/* In strict mode primitive must be followed by "," or "}" or "]" */</comment>
			<case>case <expr><literal type="char">':'</literal></expr>:</case>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<case>case <expr><literal type="char">'\t'</literal></expr> :</case> <case>case <expr><literal type="char">'\r'</literal></expr> :</case> <case>case <expr><literal type="char">'\n'</literal></expr> :</case> <case>case <expr><literal type="char">' '</literal></expr> :</case>
			<case>case <expr><literal type="char">','</literal></expr>  :</case> <case>case <expr><literal type="char">']'</literal></expr>  :</case> <case>case <expr><literal type="char">'}'</literal></expr> :</case>
				<goto>goto <name>found</name>;</goto>
		</block_content>}</block></switch>
		<if_stmt><if>if <condition>(<expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">32</literal> <operator>||</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">127</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
			<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_STRICT</name></cpp:ifdef>
	<comment type="block">/* In strict mode primitive must be followed by a comma/object/array */</comment>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	<return>return <expr><name>JSMN_ERROR_PART</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>found</name>:</label>
	<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
		<return>return <expr><literal type="number">0</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>jsmn_alloc_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
		<return>return <expr><name>JSMN_ERROR_NOMEM</name></expr>;</return>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><call><name>jsmn_fill_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>JSMN_PRIMITIVE</name></expr></argument>, <argument><expr><name>start</name></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
	<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Fills next token with JSON string.
 */</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>jsmn_parse_string</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>,
		<parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>int</name></type> <name>start</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>

	<comment type="block">/* Skip starting quote */</comment>
	<for>for <control>(<init>;</init> <condition><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

		<comment type="block">/* Quote: end of string */</comment>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<return>return <expr><literal type="number">0</literal></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>jsmn_alloc_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
				<return>return <expr><name>JSMN_ERROR_NOMEM</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>jsmn_fill_token</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>JSMN_STRING</name></expr></argument>, <argument><expr><name>start</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
			<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<return>return <expr><literal type="number">0</literal></expr>;</return>
		</block_content>}</block></if></if_stmt>

		<comment type="block">/* Backslash: Quoted symbol expected */</comment>
		<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>&lt;</operator> <name>len</name></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
			<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
			<switch>switch <condition>(<expr><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
				<comment type="block">/* Allowed escaped symbols */</comment>
				<case>case <expr><literal type="char">'\"'</literal></expr>:</case> <case>case <expr><literal type="char">'/'</literal></expr> :</case> <case>case <expr><literal type="char">'\\'</literal></expr> :</case> <case>case <expr><literal type="char">'b'</literal></expr> :</case>
				<case>case <expr><literal type="char">'f'</literal></expr> :</case> <case>case <expr><literal type="char">'r'</literal></expr> :</case> <case>case <expr><literal type="char">'n'</literal></expr>  :</case> <case>case <expr><literal type="char">'t'</literal></expr> :</case>
					<break>break;</break>
				<comment type="block">/* Allows escaped symbol \uXXXX */</comment>
				<case>case <expr><literal type="char">'u'</literal></expr>:</case>
					<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
					<for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
						<comment type="block">/* If it isn't a hex character we have an error */</comment>
						<if_stmt><if>if<condition>(<expr><operator>!</operator><operator>(</operator><operator>(</operator><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">48</literal> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">57</literal><operator>)</operator> <operator>||</operator> <comment type="block">/* 0-9 */</comment>
									<operator>(</operator><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">65</literal> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">70</literal><operator>)</operator> <operator>||</operator> <comment type="block">/* A-F */</comment>
									<operator>(</operator><name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&gt;=</operator> <literal type="number">97</literal> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>&lt;=</operator> <literal type="number">102</literal><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content> <comment type="block">/* a-f */</comment>
							<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
							<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr>;</expr_stmt>
					</block_content>}</block></for>
					<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>--</operator></expr>;</expr_stmt>
					<break>break;</break>
				<comment type="block">/* Unexpected symbol */</comment>
				<default>default:</default>
					<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
					<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
			</block_content>}</block></switch>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <name>start</name></expr>;</expr_stmt>
	<return>return <expr><name>JSMN_ERROR_PART</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Parse JSON string and fill tokens.
 */</comment>
<function><type><name>int</name></type> <name>jsmn_parse</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>js</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>,
		<parameter><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>num_tokens</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>r</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name></expr></init></decl>;</decl_stmt>

	<for>for <control>(<init>;</init> <condition><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>&lt;</operator> <name>len</name> <operator>&amp;&amp;</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name> <operator>!=</operator> <literal type="char">'\0'</literal></expr>;</condition> <incr><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>jsmntype_t</name></type> <name>type</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>js</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>]</index></name></expr>;</expr_stmt>
		<switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
			<case>case <expr><literal type="char">'{'</literal></expr>:</case> <case>case <expr><literal type="char">'['</literal></expr>:</case>
				<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>jsmn_alloc_token</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>token</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<return>return <expr><name>JSMN_ERROR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<expr_stmt><expr><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
					<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'{'</literal></expr> ?</condition><then> <expr><name>JSMN_OBJECT</name></expr> </then><else>: <expr><name>JSMN_ARRAY</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'}'</literal></expr>:</case> <case>case <expr><literal type="char">']'</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<break>break;</break></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>type</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>c</name> <operator>==</operator> <literal type="char">'}'</literal></expr> ?</condition><then> <expr><name>JSMN_OBJECT</name></expr> </then><else>: <expr><name>JSMN_ARRAY</name></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
				<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
				</block_content>}</block></if></if_stmt>
				<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
				<for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
					<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
							<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>token</name><operator>-&gt;</operator><name>parent</name></name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
					<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>token</name><operator>-&gt;</operator><name>parent</name></name></expr>]</index></name></expr>;</expr_stmt>
				</block_content>}</block></for>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition> <block>{<block_content>
							<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
						</block_content>}</block></if></if_stmt>
						<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
						<expr_stmt><expr><name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
				<comment type="block">/* Error if unmatched closing bracket */</comment>
				<if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return></block_content></block></if></if_stmt>
				<for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
					<expr_stmt><expr><name>token</name> <operator>=</operator> <operator>&amp;</operator><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>token</name><operator>-&gt;</operator><name>start</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>token</name><operator>-&gt;</operator><name>end</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
						<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
						<break>break;</break>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<break>break;</break>
			<case>case <expr><literal type="char">'\"'</literal></expr>:</case>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>jsmn_parse_string</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>js</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tokens</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">'\t'</literal></expr> :</case> <case>case <expr><literal type="char">'\r'</literal></expr> :</case> <case>case <expr><literal type="char">'\n'</literal></expr> :</case> <case>case <expr><literal type="char">' '</literal></expr>:</case>
				<break>break;</break>
			<case>case <expr><literal type="char">':'</literal></expr>:</case>
				<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			<case>case <expr><literal type="char">','</literal></expr>:</case>
				<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator>
						<name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>JSMN_ARRAY</name> <operator>&amp;&amp;</operator>
						<name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>JSMN_OBJECT</name></expr>)</condition> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_PARENT_LINKS</name></cpp:ifdef>
					<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>parent</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
					<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
						<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_ARRAY</name> <operator>||</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_OBJECT</name></expr>)</condition> <block>{<block_content>
							<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
								<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
								<break>break;</break>
							</block_content>}</block></if></if_stmt>
						</block_content>}</block></if></if_stmt>
					</block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				</block_content>}</block></if></if_stmt>
				<break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_STRICT</name></cpp:ifdef>
			<comment type="block">/* In strict mode primitives are: numbers and booleans */</comment>
			<case>case <expr><literal type="char">'-'</literal></expr>:</case> <case>case <expr><literal type="char">'0'</literal></expr>:</case> <case>case <expr><literal type="char">'1'</literal></expr> :</case> <case>case <expr><literal type="char">'2'</literal></expr>:</case> <case>case <expr><literal type="char">'3'</literal></expr> :</case> <case>case <expr><literal type="char">'4'</literal></expr>:</case>
			<case>case <expr><literal type="char">'5'</literal></expr>:</case> <case>case <expr><literal type="char">'6'</literal></expr>:</case> <case>case <expr><literal type="char">'7'</literal></expr> :</case> <case>case <expr><literal type="char">'8'</literal></expr>:</case> <case>case <expr><literal type="char">'9'</literal></expr>:</case>
			<case>case <expr><literal type="char">'t'</literal></expr>:</case> <case>case <expr><literal type="char">'f'</literal></expr>:</case> <case>case <expr><literal type="char">'n'</literal></expr> :</case>
				<comment type="block">/* And they must not be keys of the object */</comment>
				<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
					<decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><operator>&amp;</operator><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<if_stmt><if>if <condition>(<expr><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JSMN_OBJECT</name> <operator>||</operator>
							<operator>(</operator><name><name>t</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>JSMN_STRING</name> <operator>&amp;&amp;</operator> <name><name>t</name><operator>-&gt;</operator><name>size</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
						<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
					</block_content>}</block></if></if_stmt>
				</block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<comment type="block">/* In non-strict mode every unquoted value is a primitive */</comment>
			<default>default:</default>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>jsmn_parse_primitive</name><argument_list>(<argument><expr><name>parser</name></expr></argument>, <argument><expr><name>js</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>r</name></expr>;</return></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
				<if_stmt><if>if <condition>(<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>tokens</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
					<expr_stmt><expr><name><name>tokens</name><index>[<expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name></expr>]</index></name><operator>.</operator><name>size</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<break>break;</break>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSMN_STRICT</name></cpp:ifdef>
			<comment type="block">/* Unexpected char in strict mode */</comment>
			<default>default:</default>
				<return>return <expr><name>JSMN_ERROR_INVAL</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		</block_content>}</block></switch>
	</block_content>}</block></for>

	<if_stmt><if>if <condition>(<expr><name>tokens</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
			<comment type="block">/* Unmatched opened object or array */</comment>
			<if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
				<return>return <expr><name>JSMN_ERROR_PART</name></expr>;</return>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></for>
	</block_content>}</block></if></if_stmt>

	<return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * Creates a new parser based over a given  buffer with an array of tokens
 * available.
 */</comment>
<function><type><name>void</name></type> <name>jsmn_init</name><parameter_list>(<parameter><decl><type><name>jsmn_parser</name> <modifier>*</modifier></type><name>parser</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>pos</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toknext</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>parser</name><operator>-&gt;</operator><name>toksuper</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

</unit>
