<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tdbcli/main.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbcli.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>tdbcli_options</name></name></type> <name>options</name></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>OPS</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"make"</literal></expr>, <expr><literal type="string">"dump"</literal></expr>, <expr><literal type="string">"index"</literal></expr>, <expr><literal type="string">"merge"</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MAKE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_DUMP</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_INDEX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OP_MERGE</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><name>long</name> <name>int</name></type> <name>safely_to_int</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>end</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>long</name> <name>int</name></type> <name>x</name> <init>= <expr><call><name>strtol</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>end</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <operator>*</operator><name>end</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Invalid %s: %s"</literal></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>x</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_usage_and_exit</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(
<argument><expr><literal type="string">"\ntdb - a command line interface for manipulating TrailDBs\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"USAGE:\n"</literal>
<literal type="string">"tdb &lt;command&gt; [options] [args]\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Command is one of the following:\n"</literal>
<literal type="string">"make    create a TrailDB\n"</literal>
<literal type="string">"dump    dump an existing TrailDB to an output file\n"</literal>
<literal type="string">"index   create an index for an existing TrailDB to speed up --filter\n"</literal>
<literal type="string">"merge   merges a set of TrailDBs into a new TrailDB\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"OPTIONS:\n"</literal>
<literal type="string">"-c --csv          read input as CSV or output CSV (default)\n"</literal>
<literal type="string">"-d --delimiter    CSV delimiter (default: ' ')\n"</literal>
<literal type="string">"-j --json         read input as JSON or output JSON\n"</literal>
<literal type="string">"                   the format is one JSON-encoded event (object) per line\n"</literal>
<literal type="string">"-i --input        read input from the given file:\n"</literal>
<literal type="string">"                   for 'make' this is the source of input events\n"</literal>
<literal type="string">"                    (default: stdin)\n"</literal>
<literal type="string">"                   for 'dump' this is the TrailDB to be dumped\n"</literal>
<literal type="string">"                    (default: a.tdb)\n"</literal>
<literal type="string">"                   for 'index' this is the TrailDB to be indexed\n"</literal>
<literal type="string">"                    (default: a.tdb)\n"</literal>
<literal type="string">"                   for 'merge' this is not supported\n"</literal>
<literal type="string">"                    give a list of tdbs as args\n"</literal>
<literal type="string">"-o --output       write output to the given file:\n"</literal>
<literal type="string">"                   for 'make' this is the TrailDB to be created\n"</literal>
<literal type="string">"                    (default: a.tdb)\n"</literal>
<literal type="string">"                   for 'dump' this is the output file for events\n"</literal>
<literal type="string">"                    (default: stdout)\n"</literal>
<literal type="string">"                   for 'index' this is the index path\n"</literal>
<literal type="string">"                    (default: &lt;input.tdb&gt;.index or &lt;input&gt;/index)\n"</literal>
<literal type="string">"                   for 'merge' this is the TrailDB to be created\n"</literal>
<literal type="string">"                    (default: a.tdb)\n"</literal>
<literal type="string">"-T --threads      number of threads in parallel operations\n"</literal>
<literal type="string">"                    (default: autodetect the number of cores)\n"</literal>
<literal type="string">"-u --uuids        uuid specification -- see below for details\n"</literal>
<literal type="string">"-f --fields       field specification -- see below for details\n"</literal>
<literal type="string">"-F --filter       filter specification -- see below for details\n"</literal>
<literal type="string">"--index-path      use a custom index file at this path for filters\n"</literal>
<literal type="string">"--no-index        do not use an index for filters\n"</literal>
<literal type="string">"--csv-header      read fields from the CSV header - see below for details\n"</literal>
<literal type="string">"--json-no-empty   don't output empty values to JSON output\n"</literal>
<literal type="string">"--skip-bad-input  don't quit on malformed input lines, skip them\n"</literal>
<literal type="string">"--tdb-format      TrailDB output format:\n"</literal>
<literal type="string">"                   'pkg' for the default one-file format,\n"</literal>
<literal type="string">"                   'dir' for a directory\n"</literal>
<literal type="string">"--no-bigrams      when building TrailDBS, do not build and compress with bigrams\n"</literal>
<literal type="string">"-v --verbose      print diagnostic output to stderr\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"UUIDS SPECIFICATION:\n"</literal>
<literal type="string">"The --uuids option selects a subset of trails for 'make' or 'dump'.\n"</literal>
<literal type="string">"Two modes for defining UUIDs, which are 32-character hex-encoded strings,\n"</literal>
<literal type="string">"are supported:\n"</literal>
<literal type="string">"1) comma-separated list of UUIDs:\n"</literal>
<literal type="string">"   --uuids 00112233445566778899aabbccddeeff,ffeeddccbbaa99887766554433221100\n"</literal>
<literal type="string">"2) read UUIDs from a file, prefixed with '@', containing one UUID per line:\n"</literal>
<literal type="string">"   --uuids @uuid_file\n"</literal>
<literal type="string">"Invalid or missing UUIDs are ignored.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"FIELD SPECIFICATION:\n"</literal>
<literal type="string">"The --fields option determines how fields from the input are mapped to\n"</literal>
<literal type="string">"the output. Multiple ways of defining the mapping are supported. The\n"</literal>
<literal type="string">"exact behavior varies between 'make' and 'dump':\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"make:\n"</literal>
<literal type="string">"1) if no --fields is specified, two fields are expected, 'uuid' and 'time'\n"</literal>
<literal type="string">"     - CSV file should have the first column 'uuid', second 'time'\n"</literal>
<literal type="string">"     - JSON objects must have keys 'uuid' and 'time'\n"</literal>
<literal type="string">"2) --fields uuid,time,field2,field3,...\n"</literal>
<literal type="string">"     - CSV file should have at least the specified columns\n"</literal>
<literal type="string">"       (note that 'uuid' and 'time' can be set in any column)\n"</literal>
<literal type="string">"     - JSON objects must have keys 'uuid' and 'time'. If other specified\n"</literal>
<literal type="string">"       keys are found, they are extrated to TrailDB.\n"</literal>
<literal type="string">"3) --fields 2:uuid,5:time,30:field3,102:field4\n"</literal>
<literal type="string">"     - maps the specified CSV column IDs to TrailDB fields\n"</literal>
<literal type="string">"4) --csv-header\n"</literal>
<literal type="string">"     - like 2) but reads the field names from the first row of the input\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Note that in all the cases above 'uuid' and 'time' must be specified.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"dump:\n"</literal>
<literal type="string">"1) if no --fields in specified, all fields are output.\n"</literal>
<literal type="string">"2) --fields uuid,time,field2,field3,...\n"</literal>
<literal type="string">"    - outputs only the specified fields from TrailDB\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"FILTER SPECIFICATION:\n"</literal>
<literal type="string">"The --filter option specifies an event filter for dumping a subset of\n"</literal>
<literal type="string">"events from an existing TrailDB. The filter is a boolean query, expressed\n"</literal>
<literal type="string">"in Conjunctive Normal Form. Remember to surround the query in quotes.\n"</literal>
<literal type="string">"Filters are supported in the 'dump' and 'merge' modes.\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Syntax:\n"</literal>
<literal type="string">" - Disjunctions (OR) are separated by whitespace.\n"</literal>
<literal type="string">" - Conjunctions (AND) are separated by the '&amp;' character.\n"</literal>
<literal type="string">" - Terms are one of the following:\n"</literal>
<literal type="string">"    - field_name=value (equals)\n"</literal>
<literal type="string">"    - field_name!=value (not equals)\n"</literal>
<literal type="string">"    - field_name=@filename (read value from a file. Useful for reading\n"</literal>
<literal type="string">"      binary values or values including delimiter characters)\n"</literal>
<literal type="string">"    - field_name= (empty value)\n"</literal>
<literal type="string">"\n"</literal>
<literal type="string">"Example:\n"</literal>
<literal type="string">"--filter='author=Asimov &amp; name=Foundation name=@book_name &amp; price!='\n"</literal>
<literal type="string">"(author is Asimov AND name is Foundation OR a name read from the file\n"</literal>
<literal type="string">"'book_name' AND price is not empty)\n"</literal>
<literal type="string">"\n"</literal></expr></argument>
)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>initialize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>op</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_MAKE_INPUT</name><index>[]</index></name> <init>= <expr><literal type="string">"-"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_MAKE_OUTPUT</name><index>[]</index></name> <init>= <expr><literal type="string">"a"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_DUMP_INPUT</name><index>[]</index></name> <init>= <expr><literal type="string">"a"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_DUMP_OUTPUT</name><index>[]</index></name> <init>= <expr><literal type="string">"-"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>DEFAULT_DELIMITER</name><index>[]</index></name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"csv"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'c'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"json"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'j'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"input"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'i'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"output"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"delimiter"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"fields"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"uuids"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'u'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"filter"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"threads"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'T'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"verbose"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"tdb-format"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">2</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"csv-header"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">3</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"json-no-empty"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">4</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"skip-bad-input"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">5</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"index-path"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">6</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"no-index"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">7</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"no-bigrams"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><operator>-</operator><literal type="number">8</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>, <decl><type ref="prev"/><name>option_index</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* defaults */</comment>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <name>OP_MAKE</name> <operator>||</operator> <name>op</name> <operator>==</operator> <name>OP_MERGE</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>DEFAULT_MAKE_INPUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>DEFAULT_MAKE_OUTPUT</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>OP_DUMP</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>DEFAULT_DUMP_INPUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>DEFAULT_DUMP_OUTPUT</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>op</name> <operator>==</operator> <name>OP_INDEX</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>DEFAULT_DUMP_INPUT</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>FORMAT_CSV</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <name>DEFAULT_DELIMITER</name></expr>;</expr_stmt>

    <do>do<block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>,
                        <argument><expr><name>argv</name></expr></argument>,
                        <argument><expr><literal type="string">"cvji:o:f:F:d:t:T:"</literal></expr></argument>,
                        <argument><expr><name>long_options</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>option_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <switch>switch <condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>
            <case>case <expr><operator>-</operator><literal type="number">1</literal></expr>:</case>
                <break>break;</break>
            <case>case <expr><literal type="char">'c'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>FORMAT_CSV</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'j'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>format</name></name> <operator>=</operator> <name>FORMAT_JSON</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'i'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>input</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'o'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'u'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>uuids</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'d'</literal></expr>:</case>
                <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Delimiter must be one character, not '%s'"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>delimiter</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'f'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>fields_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'F'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>filter_arg</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'T'</literal></expr>:</case>
                <expr_stmt><expr><name>errno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>num_threads</name></name> <operator>=</operator> <call><name>strtoul</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>errno</name> <operator>||</operator> <operator>!</operator><name><name>options</name><operator>.</operator><name>num_threads</name></name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Invalid value for --threads: '%s'\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>
            <case>case <expr><literal type="char">'v'</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>verbose</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">2</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output_format_is_set</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"pkg"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>TDB_OPT_CONS_OUTPUT_FORMAT_PACKAGE</name></expr>;</expr_stmt></block_content></block></if>
                <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">"dir"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>options</name><operator>.</operator><name>output_format</name></name> <operator>=</operator> <name>TDB_OPT_CONS_OUTPUT_FORMAT_DIR</name></expr>;</expr_stmt></block_content></block></if>
                <else>else<block>{<block_content>
                    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Unknown output format: '%s'.\n"</literal>
                        <literal type="string">"Expected 'pkg' or 'dir'.\n"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">3</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>csv_has_header</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">4</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>json_no_empty</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">5</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>skip_bad_input</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">6</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>index_path</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">7</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>no_index</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><operator>-</operator><literal type="number">8</literal></expr>:</case>
                <expr_stmt><expr><name><name>options</name><operator>.</operator><name>no_bigrams</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><call><name>print_usage_and_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block>while <condition>(<expr><name>c</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>options</name><operator>.</operator><name>num_threads</name></name></expr>)</condition><block>{<block_content>
        <comment type="block">/*
        _SC_NPROCESSORS_ONLN returns Hyperthreaded 'cores'. Setting
        num_threads higher than the number of real cores is detrimental
        to performance. This is a simple stupid heuristic that mitigates
        the effect.
        */</comment>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>options</name><operator>.</operator><name>num_threads</name></name> <operator>=</operator> <call><name>sysconf</name><argument_list>(<argument><expr><name>_SC_NPROCESSORS_ONLN</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>options</name><operator>.</operator><name>num_threads</name></name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>optind</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>idx</name></decl>, <decl><type ref="prev"/><name>op</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print_usage_and_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>OPS</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>OPS</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>OPS</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>op</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><name>op</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>print_usage_and_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>initialize</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><name>op</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>op</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>OP_MAKE</name></expr>:</case>
            <return>return <expr><call><name>op_make</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>OP_DUMP</name></expr>:</case>
            <return>return <expr><call><name>op_dump</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>OP_INDEX</name></expr>:</case>
            <return>return <expr><call><name>op_index</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>)</argument_list></call></expr>;</return>
        <case>case <expr><name>OP_MERGE</name></expr>:</case>
            <return>return <expr><call><name>op_merge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>options</name></expr></argument>,
                            <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>argv</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
                            <argument><expr><name>argc</name> <operator>-</operator> <name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
        <default>default:</default>
            <expr_stmt><expr><call><name>print_usage_and_exit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


</unit>
