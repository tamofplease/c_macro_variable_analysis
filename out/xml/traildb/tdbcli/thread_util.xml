<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tdbcli/thread_util.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbcli.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"thread_util.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>execute_jobs</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>thread_fun</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                  <parameter><decl><type><name><name>struct</name> <name>thread_job</name></name> <modifier>*</modifier></type><name>jobs</name></decl></parameter>,
                  <parameter><decl><type><name>uint32_t</name></type> <name>num_jobs</name></decl></parameter>,
                  <parameter><decl><type><name>uint32_t</name></type> <name>num_threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_started</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>num_done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>num_threads</name> <operator>=</operator> <ternary><condition><expr><name>num_threads</name> <operator>&lt;</operator> <name>num_jobs</name></expr> ?</condition><then> <expr><name>num_threads</name></expr></then><else>: <expr><name>num_jobs</name></expr></else></ternary></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_threads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>,
                                  <argument><expr><name>NULL</name></expr></argument>,
                                  <argument><expr><name>thread_fun</name></expr></argument>,
                                  <argument><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Could not create a thread: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>started</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>fresh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name>num_started</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <while>while <condition>(<expr><name>num_done</name> <operator>&lt;</operator> <name>num_jobs</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>, <decl><type ref="prev"/><name>all_fresh</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_jobs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>started</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>done</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fresh</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>all_fresh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pthread_join</name><argument_list>(<argument><expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ret</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"pthread_join failed: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>num_started</name> <operator>&lt;</operator> <name>num_jobs</name></expr>)</condition><block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>,
                                                  <argument><expr><name>NULL</name></expr></argument>,
                                                  <argument><expr><name>thread_fun</name></expr></argument>,
                                                  <argument><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>arg</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Could not create a thread: %s\n"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>started</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>fresh</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>num_started</name></expr>]</index></name><operator>.</operator><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                        <expr_stmt><expr><operator>++</operator><name>num_started</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                    <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>num_done</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><name>all_fresh</name></expr>)</condition><block type="pseudo"><block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_jobs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fresh</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></for></block_content></block></if></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>execute_jobs_with_reduce</name><parameter_list>(<parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>map_fun</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                               <parameter><function_decl><type><name>void</name> <modifier>*</modifier></type>(<modifier>*</modifier><name>reduce_fun</name>)<parameter_list>(<parameter><decl><type><name><name>struct</name> <name>thread_job</name></name> <modifier>*</modifier></type><name>jobs</name></decl></parameter>,
                                                   <parameter><decl><type><name>uint32_t</name></type> <name>num_jobs</name></decl></parameter>,
                                                   <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reduce_ctx</name></decl></parameter>)</parameter_list></function_decl></parameter>,
                               <parameter><decl><type><name><name>struct</name> <name>thread_job</name></name> <modifier>*</modifier></type><name>jobs</name></decl></parameter>,
                               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>reduce_ctx</name></decl></parameter>,
                               <parameter><decl><type><name>uint32_t</name></type> <name>num_jobs</name></decl></parameter>,
                               <parameter><decl><type><name>uint32_t</name></type> <name>num_threads</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>num_jobs</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>batch_size</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>num_jobs</name> <operator>-</operator> <name>i</name> <operator>&gt;</operator> <name>num_threads</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>batch_size</name> <operator>=</operator> <name>num_threads</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>batch_size</name> <operator>=</operator> <name>num_jobs</name> <operator>-</operator> <name>i</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>execute_jobs</name><argument_list>(<argument><expr><name>map_fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>batch_size</name></expr></argument>, <argument><expr><name>num_threads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>reduce_ctx</name> <operator>=</operator> <call><name>reduce_fun</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jobs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>batch_size</name></expr></argument>, <argument><expr><name>reduce_ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>batch_size</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><name>reduce_ctx</name></expr>;</return>
</block_content>}</block></function>
</unit>
