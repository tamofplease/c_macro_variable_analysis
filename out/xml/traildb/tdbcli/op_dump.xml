<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tdbcli/op_dump.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;strings.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbcli.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_index.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SAFE_FPRINTF</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>\
    <cpp:value>if (fprintf(output, fmt, ##__VA_ARGS__) &lt; 1){\
        DIE("Output to %s failed (disk full?)", opt-&gt;output);\
    }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>populate_fields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>hexuuid</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_values</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>out_lengths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>tstamp_str</name><index>[<expr><literal type="number">21</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>idx</name></decl>, <decl><type ref="prev"/><name>len</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>out_lengths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>out_values</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>hexuuid</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out_lengths</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>tstamp_str</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out_values</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>tstamp_str</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>out_lengths</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>idx</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>idx</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>out_values</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>tdb_get_item_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Value too large (over 2GB!)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name><name>out_lengths</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_csv_event</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_values</name></decl></parameter>,
                           <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>out_lengths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>out_lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"%.*s"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>out_lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>out_values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"%s%.*s"</literal></expr></argument>,
                     <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>,
                     <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>out_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                     <argument><expr><name><name>out_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_json_event</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_values</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>out_lengths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>PREFIX1</name><index>[]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>PREFIX2</name><index>[]</index></name> <init>= <expr><literal type="string">", "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>prefix</name> <init>= <expr><name>PREFIX1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>out_lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>||</operator> <operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>json_no_empty</name></name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"%s\"%s\": \"%.*s\""</literal></expr></argument>,
                         <argument><expr><name>prefix</name></expr></argument>,
                         <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                         <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>out_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                         <argument><expr><name><name>out_values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>prefix</name> <operator>=</operator> <name>PREFIX2</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"}\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_header</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>SAFE_FPRINTF</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dump_trails</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                        <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
                        <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>trail_filter</name></decl></parameter>,
                        <parameter><decl><type><name>uint64_t</name></type> <name>num_trails</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>out_values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>out_lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>hexuuid</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out_values</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>out_lengths</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>FORMAT_CSV</name> <operator>&amp;&amp;</operator> <name><name>opt</name><operator>-&gt;</operator><name>csv_has_header</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dump_header</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>trail_filter</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>num_trails</name> <operator>=</operator> <call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_trails</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>trail_id</name> <init>= <expr><ternary><condition><expr><name>trail_filter</name></expr> ?</condition><then> <expr><name><name>trail_filter</name><index>[<expr><name>i</name></expr>]</index></name></expr></then><else>: <expr><name>i</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Could not get %"</literal><name>PRIu64</name><literal type="string">"th trail: %s\n"</literal></expr></argument>,
                <argument><expr><name>trail_id</name></expr></argument>,
                <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>tdb_cursor_peek</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>tdb_uuid_hex</name><argument_list>(<argument><expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>hexuuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>populate_fields</name><argument_list>(<argument><expr><name>event</name></expr></argument>,
                                <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>hexuuid</name></expr></argument>,
                                <argument><expr><name>db</name></expr></argument>,
                                <argument><expr><name>opt</name></expr></argument>,
                                <argument><expr><name>out_values</name></expr></argument>,
                                <argument><expr><name>out_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>FORMAT_CSV</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>dump_csv_event</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>out_values</name></expr></argument>, <argument><expr><name>out_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>dump_json_event</name><argument_list>(<argument><expr><name>output</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>out_values</name></expr></argument>, <argument><expr><name>out_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out_values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>out_lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_fields_from_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fieldstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>idx</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr>)</condition><block>{<block_content>

        <if_stmt><if>if <condition>(<expr><call><name>index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Field indices in --field are not supported with dump"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>fieldstr</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>tdb_get_field</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>field</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Field not found: '%s'"</literal></expr></argument>, <argument><expr><name>fieldstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><name>field</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>fieldstr</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>idx</name> <operator>==</operator> <name>TDB_MAX_NUM_FIELDS</name> <operator>+</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Too many fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"uuid"</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>field</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>field</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>output_fields</name><index>[<expr><name>field</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>field</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>=</operator> <call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_dump</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><name>stdout</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>trail_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_trails</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Cannot read a tdb from stdin."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Output file %s already exists."</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>output</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Could not open output file %s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Opening a tdb at %s failed: %s"</literal></expr></argument>,
            <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>,
            <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>filter</name> <operator>=</operator> <call><name>apply_filter</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>index_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>free_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>opt</name><operator>-&gt;</operator><name>no_index</name></name> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>(</operator><name>index_path</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>index_path</name></name><operator>)</operator> <operator>||</operator>
             <operator>(</operator><name>index_path</name> <operator>=</operator> <name>free_path</name> <operator>=</operator> <call><name>tdb_index_find</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition><block>{<block_content>

            <decl_stmt><decl><type><name><name>struct</name> <name>tdb_index</name></name> <modifier>*</modifier></type><name>index</name> <init>= <expr><call><name>tdb_index_open</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><name>index_path</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>trail_filter</name> <operator>=</operator> <call><name>tdb_index_match_candidates</name><argument_list>(<argument><expr><name>index</name></expr></argument>,
                                                      <argument><expr><name>filter</name></expr></argument>,
                                                      <argument><expr><operator>&amp;</operator><name>num_trails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>,
                        <argument><expr><literal type="string">"Using index at %s. "</literal>
                        <literal type="string">"Evaluating %"</literal><name>PRIu64</name><literal type="string">"/%"</literal><name>PRIu64</name><literal type="string">" (%2.2f%%) trails.\n"</literal></expr></argument>,
                        <argument><expr><name>index_path</name></expr></argument>,
                        <argument><expr><name>num_trails</name></expr></argument>,
                        <argument><expr><call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><operator>(</operator><literal type="number">100.</literal> <operator>*</operator> <name>num_trails</name><operator>)</operator> <operator>/</operator> <call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>tdb_index_close</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>verbose</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Not using an index.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>free_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>init_fields_from_arg</name><argument_list>(<argument><expr><name>opt</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dump_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><name>trail_filter</name></expr></argument>, <argument><expr><name>num_trails</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>output</name> <operator>!=</operator> <name>stdout</name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>fclose</name><argument_list>(<argument><expr><name>output</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Closing %s failed. Disk full?"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>filter</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>tdb_event_filter_free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>trail_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
