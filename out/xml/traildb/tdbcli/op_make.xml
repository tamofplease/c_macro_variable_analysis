<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tdbcli/op_make.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* asprintf */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* strsep */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUDYERROR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUDYERROR</name><parameter_list>(<parameter><type><name>CallerFile</name></type></parameter>, <parameter><type><name>CallerLine</name></type></parameter>, <parameter><type><name>JudyFunc</name></type></parameter>, <parameter><type><name>JudyErrno</name></type></parameter>, <parameter><type><name>JudyErrID</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{                                                                         \
   if ((JudyErrno) == JU_ERRNO_NOMEM)                                     \
       goto out_of_memory;                                                \
}</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"jsmn/jsmn.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbcli.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>parse_uuid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name></decl></parameter>,
                                 <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>,
                                 <parameter><decl><type><name>uint64_t</name></type> <name>lineno</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>skip_bad_input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>hexuuid</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;=</operator> <literal type="number">32</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hexuuid</name></expr></argument>, <argument><expr><literal type="char">'0'</literal></expr></argument>, <argument><expr><literal type="number">32</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>hexuuid</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <literal type="number">32</literal> <operator>||</operator> <call><name>tdb_uuid_raw</name><argument_list>(<argument><expr><name>hexuuid</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>ERR_OR_DIE</name><argument_list>(<argument><expr><operator>!</operator><name>skip_bad_input</name></expr></argument>, <argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Invalid UUID '%.*s'"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name>len</name></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>uuid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>populate_fields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldstr</name></decl></parameter>,
                            <parameter><decl><type><name>Word_t</name></type> <name>idx</name></decl></parameter>,
                            <parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
                            <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><literal type="string">"uuid"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>csv_input_fields</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>fields</name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>csv_input_fields</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>fields</name> <operator>|=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>csv_input_fields</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>]</index></name> <operator>=</operator> <name>fieldstr</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>==</operator> <name>TDB_MAX_NUM_FIELDS</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Too many fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return;</return>

<label><name>out_of_memory</name>:</label>
    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_fields_from_header</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fieldstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>ssize_t</name></type> <name>line_len</name> <init>= <expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Could not read header line"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>line</name><index>[<expr><name>line_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>fieldstr</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>populate_fields</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><operator>++</operator><name>idx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fields</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Field 'uuid' is missing in input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fields</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Field 'time' is missing in input"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>init_fields_from_arg</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fieldstr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>index</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr></argument>, <argument><expr><literal type="char">':'</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <while>while <condition>(<expr><operator>(</operator><name>fieldstr</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_idx</name> <init>= <expr><call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fieldstr</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>field_idx</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Specify field index for all fields in --field"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>safely_to_int</name><argument_list>(<argument><expr><name>field_idx</name></expr></argument>, <argument><expr><literal type="string">"field index"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>populate_fields</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if><else>else<block type="pseudo"><block_content>
            <while>while <condition>(<expr><operator>(</operator><name>fieldstr</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>fields_arg</name></name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>populate_fields</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>, <argument><expr><operator>++</operator><name>idx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while></block_content></block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>populate_fields</name><argument_list>(<argument><expr><literal type="string">"uuid"</literal></expr></argument>, <argument><expr><operator>++</operator><name>idx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>populate_fields</name><argument_list>(<argument><expr><literal type="string">"time"</literal></expr></argument>, <argument><expr><operator>++</operator><name>idx</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fields</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Field 'uuid' is missing in --fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fields</name> <operator>&amp;</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Field 'time' is missing in --fields"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>populate_values</name><parameter_list>(<parameter><decl><type><name>Word_t</name></type> <name>field_idx</name></decl></parameter>,
                            <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>value_len</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>uuid</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>tstamp</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>lineno</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>skip_bad_input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>field_idx</name></expr>)</condition><block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>uuid</name> <operator>=</operator> <call><name>parse_uuid</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>value_len</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name>skip_bad_input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>
            <expr_stmt><expr><name><name>value</name><index>[<expr><name>value_len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>tstamp</name> <operator>=</operator> <call><name>safely_to_int</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name><name>values</name><index>[<expr><name>field_idx</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>value</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>lengths</name><index>[<expr><name>field_idx</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <name>value_len</name></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>insert_to_tdb</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>,
                          <parameter><decl><type><name>uint64_t</name></type> <name>tstamp</name></decl></parameter>,
                          <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>,
                          <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lengths</name></decl></parameter>,
                          <parameter><decl><type><name>uint64_t</name></type> <name>lineno</name></decl></parameter>,
                          <parameter><decl><type><name>int</name></type> <name>skip_bad_input</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>uuid</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>ERR_OR_DIE</name><argument_list>(<argument><expr><operator>!</operator><name>skip_bad_input</name></expr></argument>, <argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": UUID missing"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tstamp</name> <operator>==</operator> <name>UINT64_MAX</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>ERR_OR_DIE</name><argument_list>(<argument><expr><operator>!</operator><name>skip_bad_input</name></expr></argument>, <argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Timestamp missing"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>tstamp</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>ERR_OR_DIE</name><argument_list>(<argument><expr><operator>!</operator><name>skip_bad_input</name></expr></argument>, <argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Adding event failed: %s"</literal></expr></argument>,
            <argument><expr><name>lineno</name></expr></argument>,
            <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_csv</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                      <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>parse_line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fieldstr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>line_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>last_idx</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>values</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lengths</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>JLL</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>csv_input_fields</name></name></expr></argument>, <argument><expr><name>last_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>line_len</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>uuid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>tstamp</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name></type> <name>idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>++</operator><name>lineno</name></expr>;</expr_stmt>

        <comment type="block">/* remove newline */</comment>
        <expr_stmt><expr><name><name>line</name><index>[<expr><name>line_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>parse_line</name> <operator>=</operator> <name>line</name></expr>;</expr_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>fieldstr</name> <operator>=</operator> <call><name>strsep</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parse_line</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>

            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>idx</name> <operator>&gt;</operator> <name>last_idx</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>csv_input_fields</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>populate_values</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>,
                                <argument><expr><name>fieldstr</name></expr></argument>,
                                <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>fieldstr</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>uuid</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>tstamp</name></expr></argument>,
                                <argument><expr><name>values</name></expr></argument>,
                                <argument><expr><name>lengths</name></expr></argument>,
                                <argument><expr><name>lineno</name></expr></argument>,
                                <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>skip_bad_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>insert_to_tdb</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>tstamp</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>skip_bad_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Premature end of input or out of memory.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return;</return>

<label><name>out_of_memory</name>:</label>
    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>Pvoid_t</name></type> <name>init_json_fields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>UUID</name><index>[]</index></name> <init>= <expr><literal type="string">"uuid"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>TIME</name><index>[]</index></name> <init>= <expr><literal type="string">"time"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>json_fields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JHSI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>json_fields</name></expr></argument>, <argument><expr><name>UUID</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JHSI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>json_fields</name></expr></argument>, <argument><expr><name>TIME</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Word_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JHSI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>json_fields</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>opt</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>json_fields</name></expr>;</return>

<label><name>out_of_memory</name>:</label>
    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_json</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                       <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>line_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lineno</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>jsmn_parser</name></type> <name>parser</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>jsmntok_t</name> <modifier>*</modifier></type><name>tokens</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_tokens</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>len</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>json_fields</name> <init>= <expr><call><name>init_json_fields</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>values</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lengths</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>line_len</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>uuid</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>tstamp</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>line_len</name> <operator>&gt;</operator> <name>INT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
            <comment type="block">/* this is a jsmn library limitation (sizes are ints) */</comment>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"JSON supports at most 2GB objects"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>lineno</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>jsmn_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>num_tokens</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
               <operator>(</operator><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>jsmn_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>,
                                 <argument><expr><name>line</name></expr></argument>,
                                 <argument><expr><name>line_len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>,
                                 <argument><expr><name>tokens</name></expr></argument>,
                                 <argument><expr><name>num_tokens</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>JSMN_ERROR_NOMEM</name><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>num_tokens</name> <operator>+=</operator> <literal type="number">100000</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tokens</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tokens</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_tokens</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>jsmntok_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>jsmn_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>parser</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>JSMN_ERROR_PART</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Truncated JSON"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>==</operator> <name>JSMN_ERROR_INVAL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Corrupted JSON"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal> <operator>||</operator> <name><name>tokens</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>JSMN_OBJECT</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Not a JSON object"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>ret</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">2</literal></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>JSMN_STRING</name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>line</name><index>[<expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>JHSG</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>json_fields</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Invalid key in the JSON object"</literal></expr></argument>, <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>line</name><index>[<expr><name><name>tokens</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <switch>switch <condition>(<expr><name><name>tokens</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition><block>{<block_content>
                    <case>case <expr><name>JSMN_PRIMITIVE</name></expr>:</case>
                        <if_stmt><if>if <condition>(<expr><name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal></expr>)</condition><block type="pseudo"><block_content>
                            <comment type="block">/* ignore null values */</comment>
                            <break>break;</break></block_content></block></if></if_stmt>
                    <case>case <expr><name>JSMN_STRING</name></expr>:</case>
                        <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>tokens</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>end</name> <operator>-</operator> <name><name>tokens</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>start</name></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>populate_values</name><argument_list>(<argument><expr><operator>*</operator><name>ptr</name></expr></argument>,
                                        <argument><expr><name>value</name></expr></argument>,
                                        <argument><expr><name>len</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>uuid</name></expr></argument>,
                                        <argument><expr><operator>&amp;</operator><name>tstamp</name></expr></argument>,
                                        <argument><expr><name>values</name></expr></argument>,
                                        <argument><expr><name>lengths</name></expr></argument>,
                                        <argument><expr><name>lineno</name></expr></argument>,
                                        <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>skip_bad_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                    <default>default:</default>
                        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Line %"</literal><name>PRIu64</name><literal type="string">": Invalid value in the JSON object"</literal></expr></argument>,
                            <argument><expr><name>lineno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></switch>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>insert_to_tdb</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><name>tstamp</name></expr></argument>, <argument><expr><name>values</name></expr></argument>, <argument><expr><name>lengths</name></expr></argument>, <argument><expr><name>lineno</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>skip_bad_input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>JHSFA</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr><name>json_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>feof</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Premature end of input or out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

<label><name>out_of_memory</name>:</label>
    <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_make</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>input</name> <init>= <expr><name>stdin</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>output_file</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cons</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"out of memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format_is_set</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tdb_cons_set_opt</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>TDB_OPT_CONS_OUTPUT_FORMAT</name></expr></argument>,
                             <argument><expr><call><name>opt_val</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Invalid --tdb-format. "</literal>
                <literal type="string">"Maybe TrailDB was compiled without libarchive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>no_bigrams</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tdb_cons_set_opt</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>TDB_OPT_CONS_NO_BIGRAMS</name></expr></argument>,
                             <argument><expr><call><name>opt_val</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Invalid --no-bigrams. "</literal>
                <literal type="string">"TrailDB library doesn't understand TDB_OPT_CONS_NO_BIGRAMS; "</literal>
                <literal type="string">"library not up-to-date?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>input</name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Could not open input file %s"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>input</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Cannot output a tdb to stdout."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Output file %s already exists."</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>asprintf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>output_file</name></expr></argument>, <argument><expr><literal type="string">"%s.tdb"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>access</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>, <argument><expr><name>W_OK</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Output file %s already exists."</literal></expr></argument>, <argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>output_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>csv_has_header</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>init_fields_from_header</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>init_fields_from_arg</name><argument_list>(<argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
                             <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>field_names</name></name></expr></argument>,
                             <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>num_fields</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Opening a new tdb at %s failed: %s"</literal></expr></argument>,
            <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
            <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>format</name></name> <operator>==</operator> <name>FORMAT_CSV</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>parse_csv</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>parse_json</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Finalizing a new tdb at %s failed: %s"</literal></expr></argument>,
            <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
            <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tdb_cons_close</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>input</name> <operator>!=</operator> <name>stdin</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
