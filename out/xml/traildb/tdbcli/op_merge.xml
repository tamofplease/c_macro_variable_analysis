<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/tdbcli/op_merge.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;traildb.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdbcli.h"</cpp:file></cpp:include>

<function><type><specifier>static</specifier> <name>tdb</name> <modifier>*</modifier></type><name>open_tdb</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><call><name>tdb_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Opening a tdb at %s failed: %s"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>db</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>map_fields_and_append</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dst_fields</name></decl></parameter>,
                                  <parameter><decl><type><name>uint64_t</name></type> <name>dst_num_fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name> <modifier>*</modifier></type><name>field_map</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>trail_id</name></decl>, <decl><type ref="prev"/><name>tst</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>src_num_fields</name> <init>= <expr><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>field_map</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>src_num_fields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb_field</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>src_num_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>tst</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>dst_num_fields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>dst_fields</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>field_map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>tst</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>tst</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Assert failed: Field map mismatch (%s)!\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>values</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>dst_num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lengths</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>dst_num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>trail_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>trail_id</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>uuid</name> <init>= <expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Get_trail failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dst_num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <decl_stmt><decl><type><name>tdb_field</name></type> <name>src_field</name> <init>= <expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>tdb_val</name></type> <name>src_val</name> <init>= <expr><call><name>tdb_item_val</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>tdb_field</name></type> <name>dst_field</name> <init>= <expr><name><name>field_map</name><index>[<expr><name>src_field</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>values</name><index>[<expr><name>dst_field</name></expr>]</index></name> <operator>=</operator> <call><name>tdb_get_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
                                                  <argument><expr><name>src_field</name></expr></argument>,
                                                  <argument><expr><name>src_val</name></expr></argument>,
                                                  <argument><expr><operator>&amp;</operator><name><name>lengths</name><index>[<expr><name>dst_field</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>uuid</name></expr></argument>,
                             <argument><expr><name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>,
                             <argument><expr><name>values</name></expr></argument>,
                             <argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"tdb_cons_add failed. Out of memory?\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>open_tdbs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>inputs</name></decl></parameter>,
                       <parameter><decl><type><name>uint32_t</name></type> <name>num_inputs</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>out_fields</name></decl></parameter>,
                       <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>num_user_fields</name></decl></parameter>,
                       <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>equal_fields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>dbs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>n</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>dedup_fields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fieldname</name><index>[<expr><name>TDB_MAX_FIELDNAME_LENGTH</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>tmp</name></decl>;</decl_stmt>

    <comment type="block">/*
    TODO this could support --fields a,b,c so one one could
    create a new tdb based on a subset of existing fields
    */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dbs</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_inputs</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

     <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_inputs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
         <expr_stmt><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>open_tdb</name><argument_list>(<argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
     </block_content>}</block></for>

    <comment type="line">// count only user-defined fields, not including timestamp</comment>
    <expr_stmt><expr><operator>*</operator><name>num_user_fields</name> <operator>=</operator> <call><name>tdb_num_fields</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>equal_fields</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// check for special case of all equal fields</comment>
    <for>for<control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_inputs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// compare number of fields -- skip over timestamp</comment>
        <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tdb_num_fields</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>n</name> <operator>!=</operator> <operator>*</operator><name>num_user_fields</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>equal_fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// compare field names and ordering -- skip over timestamp</comment>
        <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <operator>*</operator><name>num_user_fields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_0</name> <init>= <expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key_j</name> <init>= <expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>key_0</name></expr></argument>, <argument><expr><name>key_j</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>equal_fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>equal_fields</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// if fields are not equal, build a mapping</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>equal_fields</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>num_user_fields</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_inputs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <comment type="line">// skip over timestamp</comment>
            <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tdb_num_fields</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

            <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>n</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <comment type="line">// skip over timestamp</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>j</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>JSLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dedup_fields</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>*</operator><name>ptr</name></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>Word_t</name><operator>)</operator><name>key</name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><operator>*</operator><name>num_user_fields</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fields</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>*</operator><name>num_user_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// handle special case of all equal fields</comment>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>equal_fields</name></expr>)</condition> <block>{<block_content> 
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>num_user_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <comment type="line">// skip over timestamp field</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// otherwise return fields from mapping</comment>
        <expr_stmt><expr><name><name>fieldname</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JSLF</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dedup_fields</name></expr></argument>, <argument><expr><name>fieldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>fields</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>*</operator><name>ptr</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JSLN</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>dedup_fields</name></expr></argument>, <argument><expr><name>fieldname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><call><name>JSLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>dedup_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>out_fields</name> <operator>=</operator> <name>fields</name></expr>;</expr_stmt>
    <return>return <expr><name>dbs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>op_merge</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdbcli_options</name></name> <modifier>*</modifier></type><name>opt</name></decl></parameter>,
             <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>inputs</name></decl></parameter>,
             <parameter><decl><type><name>uint32_t</name></type> <name>num_inputs</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>dbs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name> <init>= <expr><call><name>tdb_cons_init</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_fields</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>equal_fields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>num_inputs</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Specify at least one input tdb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cons</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>dbs</name> <operator>=</operator> <call><name>open_tdbs</name><argument_list>(<argument><expr><name>inputs</name></expr></argument>, <argument><expr><name>num_inputs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fields</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num_fields</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>equal_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_open</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
                             <argument><expr><name>fields</name></expr></argument>,
                             <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Opening a new tdb at %s failed: %s"</literal></expr></argument>,
            <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output</name></name></expr></argument>,
            <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>output_format_is_set</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tdb_cons_set_opt</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>TDB_OPT_CONS_OUTPUT_FORMAT</name></expr></argument>,
                             <argument><expr><call><name>opt_val</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>output_format</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Invalid --tdb-format. "</literal>
                <literal type="string">"Maybe TrailDB was compiled without libarchive"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <comment type="block">/* apply --filter and --uuids */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_inputs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>apply_filter</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>opt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>no_bigrams</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>tdb_cons_set_opt</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>TDB_OPT_CONS_NO_BIGRAMS</name></expr></argument>,
                             <argument><expr><call><name>opt_val</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Invalid --no-bigrams. "</literal>
                <literal type="string">"TrailDB library doesn't understand TDB_OPT_CONS_NO_BIGRAMS; "</literal>
                <literal type="string">"library not up-to-date?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_inputs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>equal_fields</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_append</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Merging %s failed: %s"</literal></expr></argument>, <argument><expr><name><name>inputs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if><else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>map_fields_and_append</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="block">/* field names may point to this db, so we can't close it yet */</comment>
        <expr_stmt><expr><call><name>tdb_dontneed</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tdb_cons_finalize</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>DIE</name><argument_list>(<argument><expr><literal type="string">"Merging failed: %s"</literal></expr></argument>, <argument><expr><call><name>tdb_error_str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_inputs</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>tdb_close</name><argument_list>(<argument><expr><name><name>dbs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>dbs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
