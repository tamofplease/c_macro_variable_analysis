<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/judy_str_map.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUDYERROR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUDYERROR</name><parameter_list>(<parameter><type><name>CallerFile</name></type></parameter>, <parameter><type><name>CallerLine</name></type></parameter>, <parameter><type><name>JudyFunc</name></type></parameter>, <parameter><type><name>JudyErrno</name></type></parameter>, <parameter><type><name>JudyErrID</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{                                                                         \
   if ((JudyErrno) == JU_ERRNO_NOMEM)                                     \
       goto out_of_memory;                                                \
}</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"judy_str_map.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_NUM_RETRIES</name></cpp:macro> <cpp:value>16</cpp:value></cpp:define>

<struct>struct <name>jsm_item</name><block>{
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>value</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></decl>;</decl_stmt>
}</block> <decl><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>packed</name><operator>)</operator></expr></argument>)</argument_list></decl>;</struct>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>jsm_get_large</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>,
                              <parameter><decl><type><name>uint32_t</name></type> <name>num_retries</name></decl></parameter>)</parameter_list>
<block>{<block_content>

    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>key</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>XXH64_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>hash_state</name></name></expr></argument>, <argument><expr><name>num_retries</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XXH64_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>hash_state</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>XXH64_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>hash_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>large_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>jsm_item</name></name> <modifier>*</modifier></type><name>item_ro</name> <init>=
            <expr><operator>(</operator><specifier>const</specifier> struct <name>jsm_item</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>item_ro</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name>length</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>item_ro</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>item_ro</name><operator>-&gt;</operator><name>id</name></name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><operator>++</operator><name>num_retries</name> <operator>&lt;</operator> <name>MAX_NUM_RETRIES</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>jsm_get_large</name><argument_list>(<argument><expr><name>jsm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>num_retries</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>jsm_insert_large</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                                 <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>,
                                 <parameter><decl><type><name>uint32_t</name></type> <name>num_retries</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>key</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>XXH64_reset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>hash_state</name></name></expr></argument>, <argument><expr><name>num_retries</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>XXH64_update</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>hash_state</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>XXH64_digest</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>hash_state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>large_map</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>jsm_item</name></name> <modifier>*</modifier></type><name>item_ro</name> <init>=
            <expr><operator>(</operator><specifier>const</specifier> struct <name>jsm_item</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><operator>*</operator><name>ptr</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>item_ro</name><operator>-&gt;</operator><name>length</name></name> <operator>==</operator> <name>length</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name><name>item_ro</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name><name>item_ro</name><operator>-&gt;</operator><name>id</name></name></expr>;</return></block_content></block></if>
        <else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>++</operator><name>num_retries</name> <operator>&lt;</operator> <name>MAX_NUM_RETRIES</name></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>jsm_insert_large</name><argument_list>(<argument><expr><name>jsm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>num_retries</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
            <else>else<block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"All hash lookups failed for a key of size %"</literal>
                                <name>PRIu64</name><literal type="string">". Very strange!\n"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>jsm_item</name></name></type> <name>item</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>+</operator> <name>length</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator> <name><name>jsm</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block>{<block_content>
            <while>while <condition>(<expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>+</operator> <name>length</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof> <operator>&gt;</operator>
                   <name><name>jsm</name><operator>-&gt;</operator><name>buffer_size</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt></block_content></block></while>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>.</operator><name>id</name></name> <operator>=</operator> <operator>++</operator><name><name>jsm</name><operator>-&gt;</operator><name>num_keys</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>item</name><operator>.</operator><name>length</name></name> <operator>=</operator> <name>length</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>+=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>+=</operator> <name>length</name></expr>;</expr_stmt>
        <return>return <expr><name><name>item</name><operator>.</operator><name>id</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>

<label><name>out_of_memory</name>:</label>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
fold must return IDs in the ascending order, e.g store_lexicon()
relies on this
*/</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>jsm_fold</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>,
               <parameter><decl><type><name>judy_str_fold_fn</name></type> <name>fun</name></decl></parameter>,
               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>offset</name> <operator>&lt;</operator> <name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>jsm_item</name></name> <modifier>*</modifier></type><name>item</name> <init>=
            <expr><operator>(</operator><specifier>const</specifier> struct <name>jsm_item</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><name>offset</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>fun</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>length</name></name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>item</name><operator>-&gt;</operator><name>length</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>jsm_item</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jsm_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>jsm_insert_large</name><argument_list>(<argument><expr><name>jsm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jsm_get</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
                 <parameter><decl><type><name>uint64_t</name></type> <name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>jsm_get_large</name><argument_list>(<argument><expr><name>jsm</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>jsm_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>jsm</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>judy_str_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_size</name></name> <operator>=</operator> <name>BUFFER_INITIAL_SIZE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>jsm_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wsign-compare"</cpp:literal></cpp:pragma>
    <expr_stmt><expr><call><name>JLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>large_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>out_of_memory</name>:</label>
    <return>return;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jsm_num_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>jsm</name><operator>-&gt;</operator><name>num_keys</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>jsm_values_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>jsm</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>jsm</name><operator>-&gt;</operator><name>buffer_offset</name></name> <operator>-</operator> <name><name>jsm</name><operator>-&gt;</operator><name>num_keys</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>jsm_item</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>JSM_MAIN</name></cpp:ifdef>
<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <function><type><name>void</name> <modifier>*</modifier></type><name>print_key</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></function>

    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>in</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>judy_str_map</name></name></type> <name>jsm</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ssize_t</name></type> <name>read</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>jsm_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>read</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>jsm_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>read</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Found %"</literal><name>PRIu64</name><literal type="string">" unique lines\n"</literal></expr></argument>, <argument><expr><call><name>jsm_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>jsm_fold</name><argument_list>(<argument><expr><operator>&amp;</operator><name>jsm</name></expr></argument>, <argument><expr><name>print_key</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
