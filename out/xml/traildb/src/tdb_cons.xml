<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb_cons.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* ftruncate() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUDYERROR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUDYERROR</name><parameter_list>(<parameter><type><name>CallerFile</name></type></parameter>, <parameter><type><name>CallerLine</name></type></parameter>, <parameter><type><name>JudyFunc</name></type></parameter>, <parameter><type><name>JudyErrno</name></type></parameter>, <parameter><type><name>JudyErrID</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{                                                                         \
   if ((JudyErrno) == JU_ERRNO_NOMEM)                                     \
       goto out_of_memory;                                                \
}</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"judy_str_map.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_package.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"arena.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>EVENTS_ARENA_INCREMENT</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EVENTS_ARENA_INCREMENT</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>jm_fold_state</name><block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>width</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>lexicon_store_fun</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>id</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>len</name></decl></parameter>,
                               <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>jm_fold_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>jm_fold_state</name><operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>state</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* NOTE: vals start at 1, otherwise we would need to +1 */</comment>
    <expr_stmt><expr><call><name>TDB_SEEK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>id</name> <operator>*</operator> <name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_SEEK</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
    <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>lexicon_store</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_str_map</name></name> <modifier>*</modifier></type><name>lexicon</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
    Lexicon format:
    [ number of values N ] 4 or 8 bytes
    [ value offsets ...  ] N * (4 or 8 bytes)
    [ last value offset  ] 4 or 8 bytes
    [ values ...         ] X bytes
    */</comment>

    <decl_stmt><decl><type><name><name>struct</name> <name>jm_fold_state</name></name></type> <name>state</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><call><name>jsm_num_keys</name><argument_list>(<argument><expr><name>lexicon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <call><name>jsm_values_size</name><argument_list>(<argument><expr><name>lexicon</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal> <operator>+</operator> <call><name>jsm_values_size</name><argument_list>(<argument><expr><name>lexicon</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>.</operator><name>width</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>TDB_MAX_LEXICON_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_LEXICON_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>out</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>.</operator><name>ret</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_TRUNCATE</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>jsm_fold</name><argument_list>(<argument><expr><name>lexicon</name></expr></argument>, <argument><expr><name>lexicon_store_fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>ret</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>TDB_SEEK</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><name>count</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>state</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>width</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>store_lexicons</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/fields"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/lexicon.%s"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>lexicon_store</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>store_version</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/version"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><literal type="string">"%llu"</literal></expr></argument>, <argument><expr><name>TDB_VERSION_LATEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>store_uuids_fun</name><argument_list>(<argument><expr><name>__uint128_t</name> <name>key</name></expr></argument>,
                             <argument><expr><name>Word_t</name> <operator>*</operator><name>value</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                             <argument><expr><name>void</name> <operator>*</operator><name>state</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>jm_fold_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>jm_fold_state</name><operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>out</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>store_uuids</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>jm_fold_state</name></name></type> <name>state</name> <init>= <expr><block>{<expr><operator>.</operator><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_trails</name> <init>= <expr><call><name>j128m_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* this is why num_trails &lt; TDB_MAX)NUM_TRAILS &lt; 2^59:
       (2^59 - 1) * 16 &lt; LONG_MAX (off_t) */</comment>
    <if_stmt><if>if <condition>(<expr><name>num_trails</name> <operator>&gt;</operator> <name>TDB_MAX_NUM_TRAILS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_TOO_MANY_TRAILS</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/uuids"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_TRUNCATE</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>off_t</name><operator>)</operator><operator>(</operator><name>num_trails</name> <operator>*</operator> <literal type="number">16</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>j128m_fold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>, <argument><expr><name>store_uuids_fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>ret</name></name></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>is_fieldname_invalid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="string">"time"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TDB_MAX_FIELDNAME_LENGTH</name> <operator>&amp;&amp;</operator> <name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>index</name><argument_list>(<argument><expr><name>TDB_FIELDNAME_CHARS</name></expr></argument>, <argument><expr><name><name>field</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>TDB_MAX_FIELDNAME_LENGTH</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>find_duplicate_fieldnames</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ofield_names</name></decl></parameter>,
                                           <parameter><decl><type><name>uint64_t</name></type> <name>num_ofields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>check</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wsign-compare"</cpp:literal></cpp:pragma>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ofields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JSLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>check</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name><operator>*</operator><operator>)</operator><name><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ptr</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>JSLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>TDB_ERR_DUPLICATE_FIELDS</name></expr>;</return>

        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>JSLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>check</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>out_of_memory</name>:</label>
    <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_cons</name> <modifier>*</modifier></type><name>tdb_cons_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb_cons</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>
        <comment type="block">/*
        this will fail if libarchive is not found but it is ok, we just
        fall back to the directory mode
        */</comment>
        <expr_stmt><expr><call><name>tdb_cons_set_opt</name><argument_list>(<argument><expr><name>c</name></expr></argument>,
                         <argument><expr><name>TDB_OPT_CONS_OUTPUT_FORMAT</name></expr></argument>,
                         <argument><expr><call><name>opt_val</name><argument_list>(<argument><expr><name>TDB_OPT_CONS_OUTPUT_FORMAT_PACKAGE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>c</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cons_open</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ofield_names</name></decl></parameter>,
                                   <parameter><decl><type><name>uint64_t</name></type> <name>num_ofields</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/*
    by handling the "cons == NULL" case here gracefully, we allow the return
    value of tdb_init() to be used unchecked like here:

    int err;
    tdb_cons *cons = tdb_cons_init();
    if ((err = tdb_cons_open(cons, path, fields, num_fields)))
        printf("Opening cons failed: %s", tdb_error(err));
    */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cons</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_HANDLE_IS_NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>item_size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_HANDLE_ALREADY_OPENED</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_ofields</name> <operator>&gt;</operator> <name>TDB_MAX_NUM_FIELDS</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_TOO_MANY_FIELDS</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>find_duplicate_fieldnames</name><argument_list>(<argument><expr><name>ofield_names</name></expr></argument>, <argument><expr><name>num_ofields</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>num_ofields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_ofields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>is_fieldname_invalid</name><argument_list>(<argument><expr><name><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_FIELDNAME</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>j128m_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>root</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>root</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name> <operator>=</operator> <name>UINT64_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name> <operator>=</operator> <name>num_ofields</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>arena_increment</name></name> <operator>=</operator> <name>EVENTS_ARENA_INCREMENT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>item_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_cons_event</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>item_size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

    <comment type="block">/* Opportunistically try to create the output directory.
       We don't care if it fails, e.g. because it already exists */</comment>
    <expr_stmt><expr><call><name>mkdir</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="number">0755</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>, <argument><expr><literal type="string">"%s/tmp.items.XXXXXX"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_OPEN</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_OPEN</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr></argument>,
                                      <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>judy_str_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>jsm_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt></block_content></block></for>

<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_cons_close</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>cons</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>jsm_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>j128m_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/*
Append an event in this cons.
*/</comment>
<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cons_add</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name></type> <name><name>uuid</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>timestamp</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>value_lengths</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_cons_event</name></name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>uuid_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>__uint128_t</name></type> <name>uuid_key</name></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><name><name>value_lengths</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name>TDB_MAX_VALUE_SIZE</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TDB_ERR_VALUE_TOO_LONG</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uuid_key</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>uuid_ptr</name> <operator>=</operator> <call><name>j128m_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>, <argument><expr><name>uuid_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>event</name> <operator>=</operator> <operator>(</operator>struct <name>tdb_cons_event</name><operator>*</operator><operator>)</operator><call><name>arena_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>item_zero</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>num_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>event</name><operator>-&gt;</operator><name>prev_event_idx</name></name> <operator>=</operator> <operator>*</operator><name>uuid_ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>uuid_ptr</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name> <init>= <expr><operator>(</operator><name>tdb_field</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_val</name></type> <name>val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_item</name></type> <name>item</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>value_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>tdb_val</name><operator>)</operator><call><name>jsm_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name><name>value_lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>tdb_make_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>dst</name> <operator>=</operator> <call><name>arena_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <comment type="block">/*
            cons-&gt;items is a file-backed arena, so this is most
            likely caused by disk being full, hence an IO error.
            */</comment>
            <return>return <expr><name>TDB_ERR_IO_WRITE</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
this function adds events from db to cons one by one, using the
public API. We need to use this with filtered dbs or otherwise when
we need to re-create lexicons.
*/</comment>
<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>tdb_cons_append_subset_lexicon</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>trail_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>num_fields</name> <init>= <expr><call><name>tdb_num_fields</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>values</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lengths</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>trail_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>trail_id</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
        <comment type="block">/*
        lookup UUID only if there are events:
        expensive to perform many unnecessary lookups with selective filters
        */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>tdb_cursor_peek</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>uuid</name> <init>= <expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
                <comment type="block">/*
                with TDB_OPT_ONLY_DIFF_ITEMS event-&gt;items may be sparse,
                hence we need to reset lengths to zero
                */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name> <init>= <expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>tdb_val</name></type> <name>val</name> <init>= <expr><call><name>tdb_item_val</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name><name>values</name><index>[<expr><name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>tdb_get_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
                                                      <argument><expr><name>field</name></expr></argument>,
                                                      <argument><expr><name>val</name></expr></argument>,
                                                      <argument><expr><operator>&amp;</operator><name><name>lengths</name><index>[<expr><name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tdb_cons_add</name><argument_list>(<argument><expr><name>cons</name></expr></argument>,
                                        <argument><expr><name>uuid</name></expr></argument>,
                                        <argument><expr><name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>,
                                        <argument><expr><name>values</name></expr></argument>,
                                        <argument><expr><name>lengths</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
            </block_content>}</block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lengths</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
Append the lexicons of an existing TrailDB, db, to this cons. Used by
tdb_cons_append().
*/</comment>
<function><type><specifier>static</specifier> <name>uint64_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>append_lexicons</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_val</name> <modifier>*</modifier><modifier>*</modifier></type><name>lexicon_maps</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_val</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lexicon_maps</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb_val</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tdb_lexicon</name></name></type> <name>lex</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>map</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>tdb_lexicon_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>field</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>map</name> <operator>=</operator> <name><name>lexicon_maps</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name><name>lex</name><operator>.</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lex</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>value_length</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>tdb_lexicon_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value_length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>tdb_val</name></type> <name>val</name></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>=</operator> <operator>(</operator><name>tdb_val</name><operator>)</operator><call><name>jsm_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>,
                                            <argument><expr><name>value</name></expr></argument>,
                                            <argument><expr><name>value_length</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>map</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>val</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <goto>goto <name>error</name>;</goto></block_content></block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>
    <return>return <expr><name>lexicon_maps</name></expr>;</return>
<label><name>error</name>:</label>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lexicon_maps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lexicon_maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
Take an event from the old db, translate its items to new vals
and append to the new cons
*/</comment>
<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>append_event</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
                              <parameter><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>uuid_ptr</name></decl></parameter>,
                              <parameter><decl><type><name>tdb_val</name> <modifier>*</modifier><modifier>*</modifier></type><name>lexicon_maps</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_cons_event</name></name> <modifier>*</modifier></type><name>new_event</name> <init>=
        <expr><operator>(</operator>struct <name>tdb_cons_event</name><operator>*</operator><operator>)</operator><call><name>arena_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>events</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>new_event</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>new_event</name><operator>-&gt;</operator><name>item_zero</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_event</name><operator>-&gt;</operator><name>num_items</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_event</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>new_event</name><operator>-&gt;</operator><name>prev_event_idx</name></name> <operator>=</operator> <operator>*</operator><name>uuid_ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>uuid_ptr</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>tdb_val</name></type> <name>val</name> <init>= <expr><call><name>tdb_item_val</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name> <init>= <expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name><name>event</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_val</name></type> <name>new_val</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <comment type="block">/* translate val */</comment>
        <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>new_val</name> <operator>=</operator> <name><name>lexicon_maps</name><index>[<expr><name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index><index>[<expr><name>val</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <decl_stmt><decl><type><name>tdb_item</name></type> <name>item</name> <init>= <expr><call><name>tdb_make_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>new_val</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><call><name>arena_add_item</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dst</name></expr>)</condition><block type="pseudo"><block_content>
            <comment type="block">/*
            cons-&gt;items is a file-backed arena, so this is most
            likely caused by disk being full, hence an IO error.
            */</comment>
            <return>return <expr><name>TDB_ERR_IO_WRITE</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>++</operator><name><name>new_event</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
this function is an optimized version of tdb_cons_append_subset_lexicon():
instead of mapping items to strings and back, we know that all entries from
the lexicon will be needed, so we can merge the lexicons and add remap items
in db to items in cons, without going through strings.
*/</comment>
<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>tdb_cons_append_full_lexicon</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_val</name> <modifier>*</modifier><modifier>*</modifier></type><name>lexicon_maps</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>trail_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name> <init>= <expr><call><name>tdb_cursor_new</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cursor</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>min_timestamp</name></name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>lexicon_maps</name> <operator>=</operator> <call><name>append_lexicons</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>trail_id</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>trail_id</name> <operator>&lt;</operator> <call><name>tdb_num_trails</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>trail_id</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>__uint128_t</name></type> <name>uuid_key</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>uuid_ptr</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tdb_get_trail</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

        <comment type="block">/*
        lookup UUID only if there are events:
        expensive to perform many unnecessary lookups with selective filters
        */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>tdb_cursor_peek</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uuid_key</name></expr></argument>, <argument><expr><call><name>tdb_get_uuid</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>uuid_ptr</name> <operator>=</operator> <call><name>j128m_insert</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>, <argument><expr><name>uuid_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <while>while <condition>(<expr><operator>(</operator><name>event</name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>append_event</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>event</name></expr></argument>, <argument><expr><name>uuid_ptr</name></expr></argument>, <argument><expr><name>lexicon_maps</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt></block_content></block></while>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<label><name>done</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>lexicon_maps</name></expr>)</condition><block>{<block_content>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>lexicon_maps</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>lexicon_maps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
Merge an existing tdb to the new cons.
*/</comment>
<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cons_append</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name></decl>;</decl_stmt>

    <comment type="block">/* NOTE we could be much more permissive with what can be joined:
    we could support "full outer join" and replace all missing fields
    with NULLs automatically.
    */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_APPEND_FIELDS_MISMATCH</name></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>field</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>tdb_get_field_name</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>field</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TDB_ERR_APPEND_FIELDS_MISMATCH</name></expr>;</return></block_content></block></if></if_stmt></block_content></block></for>

    <comment type="block">/* NOTE: When you add new options in tdb, remember to add them to
    the list below if they cause only a subset of events to be returned.
    */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opt_event_filter</name></name> <operator>||</operator>
        <name><name>db</name><operator>-&gt;</operator><name>opt_edge_encoded</name></name> <operator>||</operator>
        <name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/*
        Standard append: recreate lexicons through strings.
        We need to do this when only a subset of events is appended.
        */</comment>
        <return>return <expr><call><name>tdb_cons_append_subset_lexicon</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <comment type="block">/*
        Optimized append: merge lexicons, remap items.
        We can do this when all events are appended.
        */</comment>
        <return>return <expr><call><name>tdb_cons_append_full_lexicon</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cons_finalize</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_file</name></name></type> <name>items_mmapped</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_events</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>items_mmapped</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* finalize event items */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>arena_flush</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name> <operator>&amp;&amp;</operator> <call><name>fclose</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_CLOSE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>items</name><operator>.</operator><name>fd</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>tempfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>num_events</name> <operator>&amp;&amp;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>file_mmap</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>items_mmapped</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_READ</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>TDB_TIMER_DEF</name>

        <name>TDB_TIMER_START</name></expr></expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>store_lexicons</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
        <macro><name>TDB_TIMER_END</name><argument_list>(<argument><literal type="string">"encoder/store_lexicons"</literal></argument>)</argument_list></macro>

        <macro><name>TDB_TIMER_START</name></macro>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>store_uuids</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
        <macro><name>TDB_TIMER_END</name><argument_list>(<argument><literal type="string">"encoder/store_uuids"</literal></argument>)</argument_list></macro>

        <macro><name>TDB_TIMER_START</name></macro>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>store_version</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
        <macro><name>TDB_TIMER_END</name><argument_list>(<argument><literal type="string">"encoder/store_version"</literal></argument>)</argument_list></macro>

        <macro><name>TDB_TIMER_START</name></macro>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>tdb_encode</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>tdb_item</name><operator>*</operator><operator>)</operator><name><name>items_mmapped</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
        <macro><name>TDB_TIMER_END</name><argument_list>(<argument><literal type="string">"encoder/encode"</literal></argument>)</argument_list></macro>
    </block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
    <if_stmt><if>if <condition>(<expr><name><name>items_mmapped</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>items_mmapped</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>items_mmapped</name><operator>.</operator><name>mmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>tempfile</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>tempfile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition><block>{<block_content>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_ARCHIVE_H</name></cpp:ifdef>
        <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>output_format</name></name> <operator>==</operator> <name>TDB_OPT_CONS_OUTPUT_FORMAT_PACKAGE</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>cons_package</name><argument_list>(<argument><expr><name>cons</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cons_set_opt</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                                      <parameter><decl><type><name>tdb_opt_key</name></type> <name>key</name></decl></parameter>,
                                      <parameter><decl><type><name>tdb_opt_value</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TDB_OPT_CONS_OUTPUT_FORMAT</name></expr>:</case>
            <switch>switch <condition>(<expr><name><name>value</name><operator>.</operator><name>value</name></name></expr>)</condition><block>{<block_content>
                <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_ARCHIVE_H</name></cpp:ifdef>
                <case>case <expr><name>TDB_OPT_CONS_OUTPUT_FORMAT_PACKAGE</name></expr>:</case>
                <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <case>case <expr><name>TDB_OPT_CONS_OUTPUT_FORMAT_DIR</name></expr>:</case>
                    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>output_format</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
                    <return>return <expr><literal type="number">0</literal></expr>;</return>
                <default>default:</default>
                    <return>return <expr><name>TDB_ERR_INVALID_OPTION_VALUE</name></expr>;</return>
            </block_content>}</block></switch>
        <case>case <expr><name>TDB_OPT_CONS_NO_BIGRAMS</name></expr>:</case>
            <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>no_bigrams</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><operator>!</operator><operator>(</operator><name><name>value</name><operator>.</operator><name>value</name></name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cons_get_opt</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                                      <parameter><decl><type><name>tdb_opt_key</name></type> <name>key</name></decl></parameter>,
                                      <parameter><decl><type><name>tdb_opt_value</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TDB_OPT_CONS_OUTPUT_FORMAT</name></expr>:</case>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>output_format</name></name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>TDB_OPT_CONS_NO_BIGRAMS</name></expr>:</case>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>no_bigrams</name></name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>
</unit>
