<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb_cons_package.c"><cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_ARCHIVE_H</name></cpp:ifdef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* mkstemp() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;archive_entry.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_package.h"</cpp:file></cpp:include>

<comment type="block">/*
NOTE! DO NOT change HEADER_FILES since we guarantee that these files
(and TOC_FILE) can be found at fixed offsets
*/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>HEADER_FILES</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"version"</literal></expr>,
                                     <comment type="block">/* TODO add "id" (id should have a magic prefix) */</comment>
                                     <expr><literal type="string">"info"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>DATA_FILES</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"fields"</literal></expr>,
                                   <expr><literal type="string">"trails.codebook"</literal></expr>,
                                   <expr><literal type="string">"trails.toc"</literal></expr>,
                                   <expr><literal type="string">"trails.data"</literal></expr>,
                                   <expr><literal type="string">"uuids"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name></type> <name><name>TOC_FILE</name><index>[]</index></name> <init>= <expr><literal type="string">"tar.toc"</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>debug_print</name><argument_list>(<argument><expr><name>char</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call> <operator>*</operator><name>fmt</name></expr></argument>, <argument><expr><operator>...</operator></expr></argument>)</argument_list>
<block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TDB_PACKAGE_DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>va_list</name></type> <name>aptr</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>aptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>tdb_error</name></type> <name>write_toc_entry</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl></parameter>,
                                        <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
                                        <parameter><decl><type><name>uint64_t</name></type> <name>offset</name></decl></parameter>,
                                        <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>, <argument><expr><literal type="string">"%s %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>write_header</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>tar</name></decl></parameter>,
                              <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <name>INT64_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_IO_PACKAGE</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>archive_entry_clear</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>archive_entry_set_pathname</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>archive_entry_set_size</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>archive_entry_set_filetype</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><name>AE_IFREG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>archive_entry_set_perm</name><argument_list>(<argument><expr><name>entry</name></expr></argument>, <argument><expr><literal type="number">0644</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>archive_write_header</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_IO_PACKAGE</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>write_file_entry</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>tar</name></decl></parameter>,
                                  <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                                  <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>BUFFER_SIZE</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_left</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"opening source file %s failed\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"fstat on source file %s failed\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_header</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"write_header for %s failed\n"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_toc_entry</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>,
                               <argument><expr><name>src</name></expr></argument>,
                               <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>st_size</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"write_toc_entry for source file %s failed\n"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>num_left</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>st_size</name></name></expr>;</init> <condition><expr><name>num_left</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition><incr/>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>ssize_t</name></type> <name>r</name> <init>= <expr><call><name>read</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"reading source file %s failed\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>r</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>r</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"writing file %s failed\n"</literal></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>num_left</name> <operator>-=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>r</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="block">/*
    once the file has been successfully appended to the archive,
    we delete the source to save disk space
    */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"unlinking %s failed\n"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>write_entries</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>tar</name></decl></parameter>,
                               <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>files</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>num_files</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                               <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_files</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_file_entry</name><argument_list>(<argument><expr><name>tar</name></expr></argument>,
                                    <argument><expr><name>entry</name></expr></argument>,
                                    <argument><expr><name><name>files</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
                                    <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>,
                                    <argument><expr><name>toc_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt></block_content></block></for>
<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>init_tar_toc</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>tar</name></decl></parameter>,
                              <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                              <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>toc_offset</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>toc_max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
    We need to preallocate enough space for tar.toc file. Since we don't
    know the exact offsets yet, we allocate the absolute maximum the toc
    can take.
    */</comment>
    <comment type="block">/* VALUE_SIZE = len(' %d %d\n' % (2**64, 2**64)) */</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>VALUE_SIZE</name> <init>= <expr><literal type="number">43</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint64_t</name></type> <name>LEXICON_PREFIX_LEN</name> <init>= <expr><literal type="number">8</literal></expr></init></decl>;</decl_stmt> <comment type="block">/* = len("lexicon.") */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>size</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>TOC_FILE</name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VALUE_SIZE</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>TDB_TAR_MAGIC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>HEADER_FILES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>HEADER_FILES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>HEADER_FILES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VALUE_SIZE</name></expr>;</expr_stmt></block_content></block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>DATA_FILES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>DATA_FILES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>DATA_FILES</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>VALUE_SIZE</name></expr>;</expr_stmt></block_content></block></for>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>+</operator> <name>LEXICON_PREFIX_LEN</name> <operator>+</operator> <name>VALUE_SIZE</name></expr>;</expr_stmt></block_content></block></for>

    <expr_stmt><expr><operator>*</operator><name>toc_max_size</name> <operator>=</operator> <operator>++</operator><name>size</name></expr>;</expr_stmt> <comment type="block">/* empty line in the end */</comment>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_header</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>TOC_FILE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"write_header for TOC_FILE failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
    archives are unreadable if the TOC is not found exactly at the right
    offset. Assert that this requirement is not violated.
    */</comment>
    <expr_stmt><expr><operator>*</operator><name>toc_offset</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>archive_filter_bytes</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>toc_offset</name> <operator>!=</operator> <name>TOC_FILE_OFFSET</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"assert failed: invalid toc offset: %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
                    <argument><expr><operator>*</operator><name>toc_offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_toc_entry</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>,
                               <argument><expr><name>TOC_FILE</name></expr></argument>,
                               <argument><expr><operator>*</operator><name>toc_offset</name></expr></argument>,
                               <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"write_toc_entry for TOC_FILE failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* we just need an array of null bytes */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buffer</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>archive_write_data</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>ssize_t</name><operator>)</operator><name>size</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"reserving %"</literal><name>PRIu64</name><literal type="string">" bytes for TOC_FILE failed\n"</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>write_lexicons</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>tar</name></decl></parameter>,
                                <parameter><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                                <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"lexicon.%s"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>ofield_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_file_entry</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>toc_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>
<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>write_tar_toc</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>fd</name></decl></parameter>,
                               <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>toc_offset</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>toc_max_size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
    we rewind back to the position of the TOC_FILE and actually
    fill in the contents of the file
    */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>BUFFER_SIZE</name> <init>= <expr><literal type="number">65536</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>i</name></decl>, <decl><type ref="prev"/><name>toc_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>long</name></type> <name>offset</name></decl>;</decl_stmt>
    <comment type="block">/* find an empty line denoting EOF in toc_file */</comment>
    <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>offset</name> <operator>=</operator> <call><name>ftell</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"ftell(toc_file) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>toc_size</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>offset</name></expr>;</expr_stmt>

    <comment type="block">/* assert that our max_size estimate is not broken */</comment>
    <if_stmt><if>if <condition>(<expr><name>toc_size</name> <operator>&gt;</operator> <name>toc_max_size</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"assert failed: toc_size %"</literal><name>PRIu64</name><literal type="string">" &gt; %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
                    <argument><expr><name>toc_size</name></expr></argument>,
                    <argument><expr><name>toc_max_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>lseek</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>toc_offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>(</operator><name>off_t</name><operator>)</operator><name>toc_offset</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"lseek(fd) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name>toc_size</name></expr>;</condition><incr/>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>r</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>BUFFER_SIZE</name></expr></argument>, <argument><expr><name>toc_file</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>r</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"fread() toc_file failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_READ</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>r</name></expr>;</condition><incr/>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>ssize_t</name></type> <name>w</name> <init>= <expr><call><name>write</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buffer</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>r</name> <operator>-</operator> <name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"write(fd) failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>i</name> <operator>+=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>w</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
    </block_content>}</block></for>

<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tdb_error</name></type> <name>cons_package</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>dst_path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>archive</name></name> <modifier>*</modifier></type><name>tar</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>toc_file</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>archive_entry</name></name> <modifier>*</modifier></type><name>entry</name> <init>= <expr><call><name>archive_entry_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>toc_max_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>entry</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* 1) open archive */</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tar</name> <operator>=</operator> <call><name>archive_write_new</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"archive_write_new() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>archive_write_set_format_gnutar</name><argument_list>(<argument><expr><name>tar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"archive_write_set_format_gnutar() failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><literal type="string">"%s.tdb.XXXXXX"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"mkstemp(%s) failed\n"</literal></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>archive_write_open_fd</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"archive_write_open_fd(%s) failed\n"</literal></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* open TOC_FILE */</comment>
    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>, <argument><expr><name>TOC_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>, <argument><expr><name>TDB_TAR_MAGIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 2) write header files */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_entries</name><argument_list>(<argument><expr><name>tar</name></expr></argument>,
                             <argument><expr><name>entry</name></expr></argument>,
                             <argument><expr><name>HEADER_FILES</name></expr></argument>,
                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>HEADER_FILES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>HEADER_FILES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                             <argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>toc_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* 3) write tar toc */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_tar_toc</name><argument_list>(<argument><expr><name>tar</name></expr></argument>,
                            <argument><expr><name>entry</name></expr></argument>,
                            <argument><expr><name>cons</name></expr></argument>,
                            <argument><expr><name>toc_file</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>toc_offset</name></expr></argument>,
                            <argument><expr><operator>&amp;</operator><name>toc_max_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* 4) write lexicons */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_lexicons</name><argument_list>(<argument><expr><name>tar</name></expr></argument>, <argument><expr><name>entry</name></expr></argument>, <argument><expr><name>cons</name></expr></argument>, <argument><expr><name>toc_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* 5) write data */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_entries</name><argument_list>(<argument><expr><name>tar</name></expr></argument>,
                             <argument><expr><name>entry</name></expr></argument>,
                             <argument><expr><name>DATA_FILES</name></expr></argument>,
                             <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DATA_FILES</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>DATA_FILES</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>,
                             <argument><expr><name>cons</name></expr></argument>,
                             <argument><expr><name>toc_file</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* 6) finalize archive */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>tar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt>
        <comment type="block">/* don't call archive_write_free twice */</comment>
        <expr_stmt><expr><name>tar</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>tar</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="block">/* 7) write toc */</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>write_tar_toc</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>toc_file</name></expr></argument>, <argument><expr><name>toc_offset</name></expr></argument>, <argument><expr><name>toc_max_size</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <comment type="block">/* delete TOC_FILE */</comment>
    <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>toc_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* fsync() is required to ensure integrity of the package */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>fsync</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"fsync failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_CLOSE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"close failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_CLOSE</name></expr>;</expr_stmt>
        <comment type="block">/* never call close() twice, even if it fails */</comment>
        <expr_stmt><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fd</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="block">/* 9) rename archive */</comment>
    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s.tdb"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>rename</name><argument_list>(<argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"rename to %s -&gt; %s failed\n"</literal></expr></argument>, <argument><expr><name>dst_path</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_CLOSE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/*
    rmdir() failing (most often because the directory is not empty), is not
    considered a fatal error: This can happen e.g. if the directory contains
    remnants of a previously failed tdb_cons, which is harmless
    */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>rmdir</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>debug_print</name><argument_list>(<argument><expr><literal type="string">"rmdir(%s) failed\n"</literal></expr></argument>, <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>archive_entry_free</name><argument_list>(<argument><expr><name>entry</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>tar</name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>archive_write_free</name><argument_list>(<argument><expr><name>tar</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ARCHIVE_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_PACKAGE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_ARCHIVE_H */</comment>
</unit>
