<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* for getline() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* for madvise() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* for getline() - older compilers? */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUDYERROR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUDYERROR</name><parameter_list>(<parameter><type><name>CallerFile</name></type></parameter>, <parameter><type><name>CallerLine</name></type></parameter>, <parameter><type><name>JudyFunc</name></type></parameter>, <parameter><type><name>JudyErrno</name></type></parameter>, <parameter><type><name>JudyErrID</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{                                                                         \
   if ((JudyErrno) == JU_ERRNO_NOMEM)                                     \
       goto out_of_memory;                                                \
}</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_huffman.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_package.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DEFAULT_OPT_CURSOR_EVENT_BUFFER_SIZE</name></cpp:macro> <cpp:value>1000</cpp:value></cpp:define>

<struct>struct <name>io_ops</name><block>{
    <function_decl><type><name>FILE</name><modifier>*</modifier></type> (<modifier>*</modifier><name>fopen</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>fclose</name>)<parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>;</function_decl>

    <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>mmap</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>,
                <parameter><decl><type><name><name>struct</name> <name>tdb_file</name></name> <modifier>*</modifier></type><name>dst</name></decl></parameter>,
                <parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<decl_stmt><decl><type><name>int</name></type> <name>file_mmap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fname</name></expr></argument>,
              <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>root</name></expr></argument>,
              <argument><expr>struct <name>tdb_file</name> <operator>*</operator><name>dst</name></expr></argument>,
              <argument><expr><specifier>const</specifier> <name>tdb</name> <operator>*</operator><name>db</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stats</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>root</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>open</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>O_RDONLY</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fstat</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>mmap_size</name></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>stats</name><operator>.</operator><name>st_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>MAP_FAILED</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>PROT_READ</name></expr></argument>, <argument><expr><name>MAP_SHARED</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
<label><name>done</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>fd</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name>FILE</name> <modifier>*</modifier></type><name>file_fopen</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fname</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>root</name></expr></argument>,
                        <argument><expr><specifier>const</specifier> <name>tdb</name> <operator>*</operator><name>db</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>f</name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>int</name></type> <name>file_fclose</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>fclose</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdb_lexicon_read</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>tdb_lexicon</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>field</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>&gt;</operator> <name>UINT32_MAX</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>toc64</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>lex</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>lex</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>width</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>lex</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>toc32</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>data</name><index>[<expr><name><name>lex</name><operator>-&gt;</operator><name>width</name></name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>lex</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>tdb_lex_offset</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_lexicon</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>, <parameter><decl><type><name>tdb_val</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>width</name></name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>lex</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>toc32</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><name><name>lex</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>toc64</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdb_lexicon_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_lexicon</name></name> <modifier>*</modifier></type><name>lex</name></decl></parameter>,
                            <parameter><decl><type><name>tdb_val</name></type> <name>i</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>lex</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>TDB_VERSION_V0</name></expr>)</condition><block>{<block_content>
        <comment type="block">/* backwards compatibility with 0-terminated strings in v0 */</comment>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>data</name><index>[<expr><call><name>tdb_lex_offset</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>length</name> <operator>=</operator> <call><name>tdb_lex_offset</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>tdb_lex_offset</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <return>return <expr><operator>&amp;</operator><name><name>lex</name><operator>-&gt;</operator><name>data</name><index>[<expr><call><name>tdb_lex_offset</name><argument_list>(<argument><expr><name>lex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>fields_open</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>io_ops</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>num_ofields</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ok</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name><name>io</name><operator>-&gt;</operator><name>fopen</name></name><argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_INVALID_FIELDS_FILE</name></expr>;</return></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block>{<block_content>
            <comment type="block">/*
            V0 tdbs don't have the extra newline,
            they should read until EOF
            */</comment>
            <expr_stmt><expr><name>ok</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>num_ofields</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>ok</name> <operator>||</operator> <call><name>feof</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <comment type="block">/* we can get here if malloc fails inside getline() */</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>=</operator> <name>num_ofields</name> <operator>+</operator> <literal type="number">1U</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>field_names</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_ofields</name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>lexicons</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>num_ofields</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_file</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="block">/* io_ops doesn't support rewind(), so we have to close and reopen */</comment>
    <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>fclose</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name><name>io</name><operator>-&gt;</operator><name>fopen</name></name><argument_list>(<argument><expr><literal type="string">"fields"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_OPEN</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="string">"time"</literal></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>

        <expr_stmt><expr><name><name>line</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <comment type="block">/* let's be paranoid and sanity check the fieldname again */</comment>
        <if_stmt><if>if <condition>(<expr><call><name>is_fieldname_invalid</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_FIELDS_FILE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"lexicon.%s"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name><name>io</name><operator>-&gt;</operator><name>mmap</name></name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_LEXICON_FILE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>!=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_FIELDS_FILE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>fclose</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>init_field_stats</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>field_cardinalities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>field_cardinalities</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tdb_lexicon</name></name></type> <name>lex</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdb_lexicon_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>field_cardinalities</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>lex</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>field_stats</name></name> <operator>=</operator> <call><name>huff_field_stats</name><argument_list>(<argument><expr><name>field_cardinalities</name></expr></argument>,
                                             <argument><expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr></argument>,
                                             <argument><expr><name><name>db</name><operator>-&gt;</operator><name>max_timestamp_delta</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field_cardinalities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>read_version</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>io_ops</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name><name>io</name><operator>-&gt;</operator><name>fopen</name></name><argument_list>(<argument><expr><literal type="string">"version"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if>
    <else>else<block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>, <argument><expr><literal type="string">"%"</literal><name>PRIu64</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_VERSION_FILE</name></expr>;</expr_stmt></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name>TDB_VERSION_LATEST</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INCOMPATIBLE_VERSION</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>fclose</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>read_info</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>io_ops</name></name> <modifier>*</modifier></type><name>io</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>f</name> <operator>=</operator> <call><name><name>io</name><operator>-&gt;</operator><name>fopen</name></name><argument_list>(<argument><expr><literal type="string">"info"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_INVALID_INFO_FILE</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fscanf</name><argument_list>(<argument><expr><name>f</name></expr></argument>,
               <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>num_events</name></name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>max_timestamp</name></name></expr></argument>,
               <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>max_timestamp_delta</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">5</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_INFO_FILE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name><name>io</name><operator>-&gt;</operator><name>fclose</name></name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb</name> <modifier>*</modifier></type><name>tdb_init</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_open</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>orig_root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>root</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>stat</name></name></type> <name>stats</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>io_ops</name></name></type> <name>io</name></decl>;</decl_stmt>

    <comment type="block">/*
    by handling the "db == NULL" case here gracefully, we allow the return
    value of tdb_init() to be used unchecked like here:

    int err;
    tdb *db = tdb_init();
    if ((err = tdb_open(db, path)))
        printf("Opening tbd failed: %s", tdb_error(err));
    */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>db</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_HANDLE_IS_NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_HANDLE_ALREADY_OPENED</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* set default options */</comment>
    <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opt_cursor_event_buffer_size</name></name> <operator>=</operator> <name>DEFAULT_OPT_CURSOR_EVENT_BUFFER_SIZE</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>orig_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"%s.tdb"</literal></expr></argument>, <argument><expr><name>orig_root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>stat</name><argument_list>(<argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_OPEN</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>S_ISDIR</name><argument_list>(<argument><expr><name><name>stats</name><operator>.</operator><name>st_mode</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
        <comment type="block">/* open tdb in a directory */</comment>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>fopen</name></name> <operator>=</operator> <name>file_fopen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>fclose</name></name> <operator>=</operator> <name>file_fclose</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>mmap</name></name> <operator>=</operator> <name>file_mmap</name></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* open tdb in a tarball */</comment>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>fopen</name></name> <operator>=</operator> <name>package_fopen</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>fclose</name></name> <operator>=</operator> <name>package_fclose</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>io</name><operator>.</operator><name>mmap</name></name> <operator>=</operator> <name>package_mmap</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>open_package</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_info</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>read_version</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>fields_open</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>io</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_field_stats</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/* backwards compatibility: UUIDs used to be called cookies */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>TDB_VERSION_V0</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>io</name><operator>.</operator><name>mmap</name></name><argument_list>(<argument><expr><literal type="string">"cookies"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>uuids</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_UUIDS_FILE</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name><name>io</name><operator>.</operator><name>mmap</name></name><argument_list>(<argument><expr><literal type="string">"uuids"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>uuids</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_UUIDS_FILE</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>io</name><operator>.</operator><name>mmap</name></name><argument_list>(<argument><expr><literal type="string">"trails.codebook"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_CODEBOOK_FILE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>TDB_VERSION_V0</name></expr>)</condition><block type="pseudo"><block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>huff_convert_v0_codebook</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>codebook</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>io</name><operator>.</operator><name>mmap</name></name><argument_list>(<argument><expr><literal type="string">"trails.toc"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>toc</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_TRAILS_FILE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name><name>io</name><operator>.</operator><name>mmap</name></name><argument_list>(<argument><expr><literal type="string">"trails.data"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_TRAILS_FILE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>free_package</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdb_madvise</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>advice</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>db</name> <operator>&amp;&amp;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>,
                    <argument><expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mmap_size</name></expr></argument>,
                    <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>mmap_size</name></name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>codebook</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>codebook</name><operator>.</operator><name>mmap_size</name></name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>mmap_size</name></name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>madvise</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>mmap_size</name></name></expr></argument>, <argument><expr><name>advice</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_willneed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>tdb_madvise</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>MADV_WILLNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_dontneed</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>tdb_madvise</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>MADV_DONTNEED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_close</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>db</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name></type> <name>tmp</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ptr</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>mmap_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>mmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>codebook</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>codebook</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>codebook</name><operator>.</operator><name>mmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>mmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>munmap</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>mmap_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>JLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>lexicons</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>field_names</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>field_stats</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<label><name>out_of_memory</name>:</label>
    <return>return;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_lexicon_size</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>field</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tdb_lexicon</name></name></type> <name>lex</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdb_lexicon_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* +1 refers to the implicit NULL value (empty string) */</comment>
        <return>return <expr><name><name>lex</name><operator>.</operator><name>size</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_get_field</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>field_name</name></decl></parameter>,
                                   <parameter><decl><type><name>tdb_field</name> <modifier>*</modifier></type><name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>field_name</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>field</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt></block_content></block></for>
    <return>return <expr><name>TDB_ERR_UNKNOWN_FIELD</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdb_get_field_name</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                          <parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>field_names</name><index>[<expr><name>field</name></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_item</name></type> <name>tdb_get_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                 <parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>,
                                 <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>,
                                 <parameter><decl><type><name>uint64_t</name></type> <name>value_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value_length</name></expr>)</condition><block type="pseudo"><block_content>
        <comment type="block">/* NULL value for this field */</comment>
        <return>return <expr><call><name>tdb_make_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>field</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if>
    <else>else<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tdb_lexicon</name></name></type> <name>lex</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_val</name></type> <name>i</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdb_lexicon_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>lex</name><operator>.</operator><name>size</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>length</name></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>token</name> <init>= <expr><call><name>tdb_lexicon_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>length</name> <operator>==</operator> <name>value_length</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>memcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><call><name>tdb_make_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>
        </block_content>}</block></for>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdb_get_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                     <parameter><decl><type><name>tdb_field</name></type> <name>field</name></decl></parameter>,
                                     <parameter><decl><type><name>tdb_val</name></type> <name>val</name></decl></parameter>,
                                     <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>field</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>field</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>val</name></expr>)</condition><block>{<block_content>
        <comment type="block">/* a valid NULL value for a valid field */</comment>
        <expr_stmt><expr><operator>*</operator><name>value_length</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><literal type="string">""</literal></expr>;</return>
    </block_content>}</block></if><else>else<block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>tdb_lexicon</name></name></type> <name>lex</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdb_lexicon_read</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>val</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>lex</name><operator>.</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>tdb_lexicon_get</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lex</name></expr></argument>, <argument><expr><name>val</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>value_length</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdb_get_item_value</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                          <parameter><decl><type><name>tdb_item</name></type> <name>item</name></decl></parameter>,
                                          <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>value_length</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>tdb_get_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
                         <argument><expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><call><name>tdb_item_val</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr></argument>,
                         <argument><expr><name>value_length</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>tdb_get_uuid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                       <parameter><decl><type><name>uint64_t</name></type> <name>trail_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>trail_id</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>data</name><index>[<expr><name>trail_id</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_get_trail_id</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>uuid</name></decl></parameter>,
                                      <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>trail_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>__uint128_t</name></type> <name>cmp</name></decl>, <decl><type ref="prev"/><name>key</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>uuid</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>TDB_VERSION_V0</name></expr>)</condition><block>{<block_content>
        <comment type="block">/* V0 doesn't guarantee that UUIDs would be ordered */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>idx</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>idx</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>;</condition> <incr><expr><name>idx</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>data</name><index>[<expr><name>idx</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name>cmp</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>trail_id</name> <operator>=</operator> <name>idx</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/* note: TDB_MAX_NUM_TRAILS &lt; 2^63, so we can safely use int64_t */</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>idx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>left</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>right</name> <init>= <expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name><operator>)</operator> <operator>-</operator> <literal type="number">1LL</literal></expr></init></decl>;</decl_stmt>

        <while>while <condition>(<expr><name>left</name> <operator>&lt;=</operator> <name>right</name></expr>)</condition><block>{<block_content>
            <comment type="block">/* compute midpoint in an overflow-safe manner (see Wikipedia) */</comment>
            <expr_stmt><expr><name>idx</name> <operator>=</operator> <name>left</name> <operator>+</operator> <operator>(</operator><operator>(</operator><name>right</name> <operator>-</operator> <name>left</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>uuids</name><operator>.</operator><name>data</name><index>[<expr><name>idx</name> <operator>*</operator> <literal type="number">16</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>cmp</name> <operator>==</operator> <name>key</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>trail_id</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>idx</name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if><if type="elseif">else if <condition>(<expr><name>cmp</name> <operator>&gt;</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>right</name> <operator>=</operator> <name>idx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>left</name> <operator>=</operator> <name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><name>TDB_ERR_UNKNOWN_UUID</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tdb_error_str</name><parameter_list>(<parameter><decl><type><name>tdb_error</name></type> <name>errcode</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>errcode</name></expr>)</condition><block>{<block_content>
        <case>case        <expr><name>TDB_ERR_OK</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_OK"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_NOMEM</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_NOMEM"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_PATH_TOO_LONG</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_PATH_TOO_LONG"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_UNKNOWN_FIELD</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_UNKNOWN_FIELD"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_UNKNOWN_UUID</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_UNKNOWN_UUID"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_TRAIL_ID</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_TRAIL_ID"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_HANDLE_IS_NULL</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_HANDLE_IS_NULL"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_HANDLE_ALREADY_OPENED</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_HANDLE_ALREADY_OPENED"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_UNKNOWN_OPTION"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_OPTION_VALUE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_OPTION_VALUE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_UUID</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_UUID"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_IO_OPEN</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_IO_OPEN"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_IO_CLOSE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_IO_CLOSE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_IO_WRITE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_IO_WRITE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_IO_READ</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_IO_READ"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_IO_TRUNCATE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_IO_TRUNCATE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_IO_PACKAGE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_IO_PACKAGE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_INFO_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_INFO_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_VERSION_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_VERSION_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INCOMPATIBLE_VERSION</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INCOMPATIBLE_VERSION"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_FIELDS_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_FIELDS_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_UUIDS_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_UUIDS_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_CODEBOOK_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_CODEBOOK_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_TRAILS_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_TRAILS_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_LEXICON_FILE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_LEXICON_FILE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_PACKAGE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_PACKAGE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_TOO_MANY_FIELDS</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_TOO_MANY_FIELDS"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_DUPLICATE_FIELDS</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_DUPLICATE_FIELDS"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_FIELDNAME</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_FIELDNAME"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_TOO_MANY_TRAILS</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_TOO_MANY_TRAILS"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_VALUE_TOO_LONG</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_VALUE_TOO_LONG"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_APPEND_FIELDS_MISMATCH</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_APPEND_FIELDS_MISMATCH"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_LEXICON_TOO_LARGE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_LEXICON_TOO_LARGE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_TIMESTAMP_TOO_LARGE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_TIMESTAMP_TOO_LARGE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_TRAIL_TOO_LONG</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_TRAIL_TOO_LONG"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_ONLY_DIFF_FILTER</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_ONLY_DIFF_FILTER"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_NO_SUCH_ITEM"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INVALID_RANGE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INVALID_RANGE"</literal></expr>;</return>
        <case>case        <expr><name>TDB_ERR_INCORRECT_TERM_TYPE</name></expr>:</case>
            <return>return <expr><literal type="string">"TDB_ERR_INCORRECT_TERM_TYPE"</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><literal type="string">"Unknown error"</literal></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_num_trails</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_num_events</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>num_events</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_num_fields</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_min_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_max_timestamp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>max_timestamp</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_version</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>version</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_set_opt</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                 <parameter><decl><type><name>tdb_opt_key</name></type> <name>key</name></decl></parameter>,
                                 <parameter><decl><type><name>tdb_opt_value</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/*
    NOTE: If a new option can cause the db return a subset of
    events, like TDB_OPT_ONLY_DIFF_ITEMS or TDB_OPT_EVENT_FILTER,
    you need to add them to the list in tdb_cons_append().
    */</comment>
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TDB_OPT_ONLY_DIFF_ITEMS</name></expr>:</case>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opt_edge_encoded</name></name> <operator>=</operator> <ternary><condition><expr><name><name>value</name><operator>.</operator><name>value</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>TDB_OPT_EVENT_FILTER</name></expr>:</case>
            <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opt_event_filter</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>tdb_event_filter</name><operator>*</operator><operator>)</operator><name><name>value</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>TDB_OPT_CURSOR_EVENT_BUFFER_SIZE</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>value</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name><name>db</name><operator>-&gt;</operator><name>opt_cursor_event_buffer_size</name></name> <operator>=</operator> <name><name>value</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt>
                <return>return <expr><literal type="number">0</literal></expr>;</return>
            </block_content>}</block></if><else>else<block type="pseudo"><block_content>
                <return>return <expr><name>TDB_ERR_INVALID_OPTION_VALUE</name></expr>;</return></block_content></block></else></if_stmt>
        <default>default:</default>
            <return>return <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_get_opt</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                 <parameter><decl><type><name>tdb_opt_key</name></type> <name>key</name></decl></parameter>,
                                 <parameter><decl><type><name>tdb_opt_value</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TDB_OPT_ONLY_DIFF_ITEMS</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>value</name> <operator>=</operator> <ternary><condition><expr><name><name>db</name><operator>-&gt;</operator><name>opt_edge_encoded</name></name></expr> ?</condition><then> <expr><name>TDB_TRUE</name></expr></then><else>: <expr><name>TDB_FALSE</name></expr></else></ternary></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>TDB_OPT_EVENT_FILTER</name></expr>:</case>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>opt_event_filter</name></name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <case>case <expr><name>TDB_OPT_CURSOR_EVENT_BUFFER_SIZE</name></expr>:</case>
            <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>value</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>opt_cursor_event_buffer_size</name></name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_set_trail_opt</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                                       <parameter><decl><type><name>uint64_t</name></type> <name>trail_id</name></decl></parameter>,
                                       <parameter><decl><type><name>tdb_opt_key</name></type> <name>key</name></decl></parameter>,
                                       <parameter><decl><type><name>tdb_opt_value</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>tmp</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>trail_id</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_INVALID_TRAIL_ID</name></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name>key</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TDB_OPT_EVENT_FILTER</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>.</operator><name>ptr</name></name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><operator>*</operator><name>ptr</name> <operator>=</operator> <operator>(</operator><name>Word_t</name><operator>)</operator><name><name>value</name><operator>.</operator><name>ptr</name></name></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
                <expr_stmt><expr><call><name>JLD</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>;</return>
    </block_content>}</block></switch>
<label><name>out_of_memory</name>:</label>
    <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tdb_error</name></type> <name>tdb_get_trail_opt</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>trail_id</name></decl></parameter>,
                            <parameter><decl><type><name>tdb_opt_key</name></type> <name>key</name></decl></parameter>,
                            <parameter><decl><type><name>tdb_opt_value</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>trail_id</name> <operator>&gt;=</operator> <name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_INVALID_TRAIL_ID</name></expr>;</return></block_content></block></if></if_stmt>

    <switch>switch <condition>(<expr><name>key</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TDB_OPT_EVENT_FILTER</name></expr>:</case>
            <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>void</name><operator>*</operator><operator>)</operator><operator>*</operator><name>ptr</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        <default>default:</default>
            <return>return <expr><name>TDB_ERR_UNKNOWN_OPTION</name></expr>;</return>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>tdb_event_filter_new</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_event_filter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>f</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>f</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>clause_len_idx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>tdb_event_filter_new_match_all</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>TDB_FILTER_MATCH_ALL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>tdb_event_filter_new_match_none</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>f</name> <init>= <expr><call><name>tdb_event_filter_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>f</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>f</name><operator>-&gt;</operator><name>options</name></name> <operator>=</operator> <name>TDB_FILTER_MATCH_NONE</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>f</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>ensure_filter_size</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* ensure we can fit the largest term (time range) in the array */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>count</name></name> <operator>+</operator> <literal type="number">3</literal> <operator>&gt;=</operator> <name><name>filter</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>size</name></name> <operator>*=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name></name></expr></argument>, <argument><expr><name><name>filter</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>filter</name><operator>-&gt;</operator><name>items</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_add_term</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                               <parameter><decl><type><name>tdb_item</name></type> <name>term</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name></type> <name>is_negative</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ensure_filter_size</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
    <else>else<block>{<block_content>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>is_negative</name></expr> ?</condition><then> <expr><name>TDB_EVENT_NEGATED</name></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>term</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>clause_len_idx</name></name></expr>]</index></name> <operator>+=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_add_time_range</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint64_t</name></type> <name>start_time</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint64_t</name></type> <name>end_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>end_time</name> <operator>&lt;=</operator> <name>start_time</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_INVALID_RANGE</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ensure_filter_size</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>query_flags</name> <init>= <expr><name>TDB_EVENT_TIME_RANGE</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>query_flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>start_time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>end_time</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>clause_len_idx</name></name></expr>]</index></name> <operator>+=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
        
    <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_new_clause</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>ensure_filter_size</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></if>
    <else>else<block>{<block_content>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>clause_len_idx</name></name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name><name>filter</name><operator>-&gt;</operator><name>clause_len_idx</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_event_filter_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name>filter</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_get_term_type</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                                    <parameter><decl><type><name>uint64_t</name></type> <name>clause_index</name></decl></parameter>,
                                                    <parameter><decl><type><name>uint64_t</name></type> <name>term_index</name></decl></parameter>,
                                                    <parameter><decl><type><name>tdb_event_filter_term_type</name> <modifier>*</modifier></type><name>term_type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>term_type</name> <operator>=</operator> <name>TDB_EVENT_FILTER_UNKNOWN_TERM</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>clause</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>clause</name> <operator>&lt;</operator> <name>clause_index</name></expr>;</condition> <incr><expr><name>clause</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>filter</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause_len</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_clause_idx</name> <init>= <expr><name>i</name> <operator>+</operator> <name>clause_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>current_item_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>next_clause_idx</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>current_item_idx</name> <operator>==</operator> <name>term_index</name></expr>)</condition> <block>{<block_content>

            <expr_stmt><expr><operator>*</operator><name>term_type</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name><operator>)</operator></expr> ?</condition><then>
                <expr><name>TDB_EVENT_FILTER_TIME_RANGE_TERM</name></expr> </then><else>: <expr><name>TDB_EVENT_FILTER_MATCH_TERM</name></expr></else></ternary></expr>;</expr_stmt>

            <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>current_item_idx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_get_item</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                               <parameter><decl><type><name>uint64_t</name></type> <name>clause_index</name></decl></parameter>,
                                               <parameter><decl><type><name>uint64_t</name></type> <name>item_index</name></decl></parameter>,
                                               <parameter><decl><type><name>tdb_item</name> <modifier>*</modifier></type><name>item</name></decl></parameter>,
                                               <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>is_negative</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name> <init>= <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>clause</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>clause</name> <operator>&lt;</operator> <name>clause_index</name></expr>;</condition> <incr><expr><name>clause</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>filter</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>invalid</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause_len</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_clause_idx</name> <init>= <expr><name>i</name> <operator>+</operator> <name>clause_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>current_item_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>next_clause_idx</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>current_item_idx</name> <operator>==</operator> <name>item_index</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INCORRECT_TERM_TYPE</name></expr>;</expr_stmt>
                <goto>goto <name>invalid</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>is_negative</name> <operator>=</operator> <ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_NEGATED</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>current_item_idx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
<label><name>invalid</name>:</label>
    <expr_stmt><expr><operator>*</operator><name>item</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>is_negative</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_get_time_range</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint64_t</name></type> <name>clause_index</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint64_t</name></type> <name>item_index</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>start_time</name></decl></parameter>,
                                                     <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>end_time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>start_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>end_time</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>clause</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>clause</name> <operator>&lt;</operator> <name>clause_index</name></expr>;</condition> <incr><expr><name>clause</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>filter</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause_len</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_clause_idx</name> <init>= <expr><name>i</name> <operator>+</operator> <name>clause_len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>current_item_idx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>next_clause_idx</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>current_item_idx</name> <operator>==</operator> <name>item_index</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                <return>return <expr><name>TDB_ERR_INCORRECT_TERM_TYPE</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><operator>*</operator><name>start_time</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>end_time</name> <operator>=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
            <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name>current_item_idx</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_event_filter_num_clauses</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_clauses</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>num_clauses</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>filter</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>num_clauses</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></for>
    <return>return <expr><name>num_clauses</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_event_filter_num_terms</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                                <parameter><decl><type><name>uint64_t</name></type> <name>clause_index</name></decl></parameter>,
                                                <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>num_terms</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause</name></decl>, <decl><type ref="prev"/><name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>clause</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>clause</name> <operator>&lt;</operator> <name>clause_index</name></expr>;</condition> <incr><expr><name>clause</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>filter</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TDB_ERR_NO_SUCH_ITEM</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><operator>*</operator><name>num_terms</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause_len</name> <init>= <expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_clause_idx</name> <init>= <expr><name>i</name> <operator>+</operator> <name>clause_len</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>next_clause_idx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>+=</operator> <ternary><condition><expr><name><name>filter</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name></expr> ?</condition><then> <expr><literal type="number">3</literal></expr> </then><else>: <expr><literal type="number">2</literal></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>num_terms</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
