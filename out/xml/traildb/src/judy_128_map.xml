<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/judy_128_map.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUDYERROR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUDYERROR</name><parameter_list>(<parameter><type><name>CallerFile</name></type></parameter>, <parameter><type><name>CallerLine</name></type></parameter>, <parameter><type><name>JudyFunc</name></type></parameter>, <parameter><type><name>JudyErrno</name></type></parameter>, <parameter><type><name>JudyErrID</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{                                                                         \
   if ((JudyErrno) == JU_ERRNO_NOMEM)                                     \
       goto out_of_memory;                                                \
}</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"judy_128_map.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>j128m_init</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>j128m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>j128m</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>judy_128_map</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Word_t</name> <modifier>*</modifier></type><name>j128m_insert</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>j128m</name></decl></parameter>, <parameter><decl><type><name>__uint128_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hi_key</name> <init>= <expr><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lo_key</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>lo_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>hi_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>lo_map</name></decl>;</decl_stmt>

    <comment type="block">/* TODO handle out of memory with Judy - see man 3 judy */</comment>
    <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>hi_ptr</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>, <argument><expr><name>hi_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lo_map</name> <operator>=</operator> <operator>(</operator><name>Pvoid_t</name><operator>)</operator><operator>*</operator><name>hi_ptr</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>JLI</name><argument_list>(<argument><expr><name>lo_ptr</name></expr></argument>, <argument><expr><name>lo_map</name></expr></argument>, <argument><expr><name>lo_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>hi_ptr</name> <operator>=</operator> <operator>(</operator><name>Word_t</name><operator>)</operator><name>lo_map</name></expr>;</expr_stmt>

    <return>return <expr><name>lo_ptr</name></expr>;</return>

<label><name>out_of_memory</name>:</label>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>Word_t</name> <modifier>*</modifier></type><name>j128m_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>j128m</name></decl></parameter>, <parameter><decl><type><name>__uint128_t</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hi_key</name> <init>= <expr><operator>(</operator><name>key</name> <operator>&gt;&gt;</operator> <literal type="number">64</literal><operator>)</operator> <operator>&amp;</operator> <name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>lo_key</name> <init>= <expr><name>key</name> <operator>&amp;</operator> <name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>lo_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>hi_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>lo_map</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>hi_ptr</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>, <argument><expr><name>hi_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>hi_ptr</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>lo_map</name> <operator>=</operator> <operator>(</operator><name>Pvoid_t</name><operator>)</operator><operator>*</operator><name>hi_ptr</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>lo_ptr</name></expr></argument>, <argument><expr><name>lo_map</name></expr></argument>, <argument><expr><name>lo_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lo_ptr</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>lo_ptr</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wincompatible-pointer-types"</cpp:literal></cpp:pragma>

<function><type><name>void</name> <modifier>*</modifier></type><name>j128m_fold</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>j128m</name></decl></parameter>,
                 <parameter><decl><type><name>judy_128_fold_fn</name></type> <name>fun</name></decl></parameter>,
                 <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hi_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>hi_ptr</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>JLF</name><argument_list>(<argument><expr><name>hi_ptr</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>, <argument><expr><name>hi_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>hi_ptr</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>lo_map</name> <init>= <expr><operator>(</operator><name>Pvoid_t</name><operator>)</operator><operator>*</operator><name>hi_ptr</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>lo_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>lo_ptr</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>JLF</name><argument_list>(<argument><expr><name>lo_ptr</name></expr></argument>, <argument><expr><name>lo_map</name></expr></argument>, <argument><expr><name>lo_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>lo_ptr</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>__uint128_t</name></type> <name>key</name> <init>= <expr><name>hi_key</name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>key</name> <operator>&lt;&lt;=</operator> <literal type="number">64</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>key</name> <operator>|=</operator> <name>lo_key</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>state</name> <operator>=</operator> <call><name>fun</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>lo_ptr</name></expr></argument>, <argument><expr><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>JLN</name><argument_list>(<argument><expr><name>lo_ptr</name></expr></argument>, <argument><expr><name>lo_map</name></expr></argument>, <argument><expr><name>lo_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><call><name>JLN</name><argument_list>(<argument><expr><name>hi_ptr</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>, <argument><expr><name>hi_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>state</name></expr>;</return>

<label><name>out_of_memory</name>:</label>
    <comment type="block">/* this really should be impossible:
       iterating shouldn't consume extra memory */</comment>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"j128m_fold out of memory! this shouldn't happen\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>num_keys_fun</name><argument_list>(<argument><expr><name>__uint128_t</name> <name>key</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>Word_t</name> <operator>*</operator><name>value</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                          <argument><expr><name>void</name> <operator>*</operator><name>state</name></expr></argument>)</argument_list>
<block>{<block_content>
    <expr_stmt><expr><operator>++</operator><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>state</name></expr>;</expr_stmt>
    <return>return <expr><name>state</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uint64_t</name></type> <name>j128m_num_keys</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>j128m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>j128m_fold</name><argument_list>(<argument><expr><name>j128m</name></expr></argument>, <argument><expr><name>num_keys_fun</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>j128m_free</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>j128m</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>hi_key</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>hi_ptr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>tmp</name></decl>;</decl_stmt>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wsign-compare"</cpp:literal></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wincompatible-pointer-types"</cpp:literal></cpp:pragma>
    <expr_stmt><expr><call><name>JLF</name><argument_list>(<argument><expr><name>hi_ptr</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>, <argument><expr><name>hi_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>hi_ptr</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>lo_map</name> <init>= <expr><operator>(</operator><name>Pvoid_t</name><operator>)</operator><operator>*</operator><name>hi_ptr</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>JLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>lo_map</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>JLN</name><argument_list>(<argument><expr><name>hi_ptr</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>, <argument><expr><name>hi_key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>JLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
    <expr_stmt><expr><name><name>j128m</name><operator>-&gt;</operator><name>hi_map</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

<label><name>out_of_memory</name>:</label>
    <return>return;</return>
</block_content>}</block></function>

</unit>
