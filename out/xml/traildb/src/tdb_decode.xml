<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb_decode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_huffman.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CURSOR_FILTER</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TRAIL_FILTER</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>uint64_t</name></type> <name>tdb_get_trail_offs</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>trail_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>size</name></name> <operator>&lt;</operator> <name>UINT32_MAX</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint32_t</name><operator>*</operator><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>trail_id</name></expr>]</index></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>toc</name><operator>.</operator><name>data</name></name><operator>)</operator><index>[<expr><name>trail_id</name></expr>]</index></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>event_satisfies_filter</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb_item</name> <modifier>*</modifier></type><name>event</name></decl></parameter>,
                                  <parameter><decl><type><name>uint64_t</name></type> <name>timestamp</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>tdb_item</name> <modifier>*</modifier></type><name>filter</name></decl></parameter>,
                                  <parameter><decl><type><name>uint64_t</name></type> <name>filter_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>filter_len</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>clause_len</name> <init>= <expr><name><name>filter</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_clause</name> <init>= <expr><name>i</name> <operator>+</operator> <name>clause_len</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>match</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>next_clause</name> <operator>&gt;</operator> <name>filter_len</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>next_clause</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>op_flags</name> <init>= <expr><name><name>filter</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>filter_item</name> <init>= <expr><name><name>filter</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <comment type="block">/* Time range queries */</comment>
            <if_stmt><if>if <condition>(<expr><name>op_flags</name> <operator>&amp;</operator> <name>TDB_EVENT_TIME_RANGE</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>end_filter</name> <init>= <expr><name><name>filter</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>filter_item</name> <operator>&lt;=</operator> <name>timestamp</name> <operator>&amp;&amp;</operator> <name>timestamp</name> <operator>&lt;</operator> <name>end_filter</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content> <comment type="block">/* Item-matching queries */</comment>
                <decl_stmt><decl><type><name>uint64_t</name></type> <name>is_negative</name> <init>= <expr><name>op_flags</name> <operator>&amp;</operator> <name>TDB_EVENT_NEGATED</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name> <init>= <expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name>filter_item</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition><block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>event</name><index>[<expr><name>field</name></expr>]</index></name> <operator>==</operator> <name>filter_item</name><operator>)</operator> <operator>!=</operator> <name>is_negative</name></expr>)</condition><block>{<block_content>
                        <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>is_negative</name></expr>)</condition> <block>{<block_content>
                        <expr_stmt><expr><name>match</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                        <break>break;</break>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>match</name></expr>)</condition><block>{<block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>next_clause</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>TDB_EXPORT</name> <name>tdb_cursor</name> <modifier>*</modifier></type><name>tdb_cursor_new</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>c</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>c</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tdb_cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_decode_state</name></expr></argument>)</argument_list></sizeof> <operator>+</operator>
                               <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>edge_encoded</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>opt_edge_encoded</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>events_buffer_len</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>opt_cursor_event_buffer_size</name></name></expr>;</expr_stmt>
    <comment type="block">/*
    set the filter type to TRAIL_FILTER initially so it can be
    overriden with the right value in tdb_get_trail()
    */</comment>
    <expr_stmt><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name>TRAIL_FILTER</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>events_buffer</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>events_buffer_len</name></name></expr></argument>,
                                           <argument><expr><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator>
                                           <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name>c</name></expr>;</return>
<label><name>err</name>:</label>
    <expr_stmt><expr><call><name>tdb_cursor_free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_cursor_free</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>events_buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_cursor_unset_event_filter</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name>TRAIL_FILTER</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_cursor_set_event_filter</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
                                                 <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_event_filter</name></name> <modifier>*</modifier></type><name>filter</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>edge_encoded</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_ONLY_DIFF_FILTER</name></expr>;</return></block_content></block></if>
    <else>else<block>{<block_content>
        <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>filter</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name>CURSOR_FILTER</name></expr>;</expr_stmt>
        <return>return <expr><name>TDB_ERR_OK</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_error</name></type> <name>tdb_get_trail</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>,
                                   <parameter><decl><type><name>uint64_t</name></type> <name>trail_id</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_decode_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>db</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_error</name></type> <name>err</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>trail_id</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_trails</name></name></expr>)</condition><block>{<block_content>
        <comment type="block">/* initialize cursor for a new trail */</comment>

        <decl_stmt><decl><type><name>uint64_t</name></type> <name>trail_size</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name></decl>;</decl_stmt>

        <comment type="block">/*
        db-&gt;opt_event_filter may have changed since the last
        tdb_get_trail call, so we will always reset it. Also
        we need to reset any trail-level filter that may have
        been set previously.
        */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>==</operator> <name>TRAIL_FILTER</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opt_event_filter</name></name></expr>)</condition><block>{<block_content>
                <comment type="block">/*
                apply a db-level filter,
                may be overriden by a trail-level below
                */</comment>
                <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>edge_encoded</name></name></expr>)</condition><block>{<block_content>
                    <comment type="block">/*
                    setting a filter in the edge-encoded mode fails as in
                    tdb_cursor_set_event_filter above
                    */</comment>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>TDB_ERR_ONLY_DIFF_FILTER</name></expr>;</expr_stmt>
                    <goto>goto <name>done</name>;</goto>
                </block_content>}</block></if><else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>opt_event_filter</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>
            </block_content>}</block></if><else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/*
        we can apply a trail-level filter only if
        trail-level filters exist AND a cursor-level filter wasn't set
        */</comment>
        <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name> <operator>&amp;&amp;</operator> <name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>!=</operator> <name>CURSOR_FILTER</name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>Word_t</name> <modifier>*</modifier></type><name>ptr</name></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>JLG</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>opt_trail_event_filters</name></name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition><block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>edge_encoded</name></name></expr>)</condition><block>{<block_content>
                    <comment type="block">/*
                    setting a filter in the edge-encoded mode fails as in
                    tdb_cursor_set_event_filter above
                    */</comment>
                    <expr_stmt><expr><name>err</name> <operator>=</operator> <name>TDB_ERR_ONLY_DIFF_FILTER</name></expr>;</expr_stmt>
                    <goto>goto <name>done</name>;</goto>
                </block_content>}</block></if><else>else<block>{<block_content>
                    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> struct <name>tdb_event_filter</name><operator>*</operator><operator>)</operator><operator>*</operator><name>ptr</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>filter_type</name></name> <operator>=</operator> <name>TRAIL_FILTER</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>TDB_FILTER_MATCH_NONE</name><operator>)</operator></expr>)</condition><block>{<block_content>
            <comment type="block">/*
            no need to evaluate anything if the filter matches nothing
            */</comment>
            <expr_stmt><expr><name>err</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if><else>else<block>{<block_content>
            <comment type="block">/*
            edge encoding: some fields may be inherited from previous events.
            Keep track what we have seen in the past. Start with NULL values.
            */</comment>
            <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>previous_items</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <call><name>tdb_make_item</name><argument_list>(<argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>db</name><operator>-&gt;</operator><name>trails</name><operator>.</operator><name>data</name><index>[<expr><call><name>tdb_get_trail_offs</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>trail_size</name> <operator>=</operator> <call><name>tdb_get_trail_offs</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>-</operator>
                         <call><name>tdb_get_trail_offs</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>trail_id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">8</literal> <operator>*</operator> <name>trail_size</name> <operator>-</operator> <call><name>read_bits</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tstamp</name></name> <operator>=</operator> <name><name>db</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>trail_id</name></name> <operator>=</operator> <name>trail_id</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>num_events_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>next_event</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>events_buffer</name></name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if><else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>err</name> <operator>=</operator> <name>TDB_ERR_INVALID_TRAIL_ID</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>num_events_left</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>next_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_get_trail_length</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><call><name>_tdb_cursor_next_batch</name><argument_list>(<argument><expr><name>cursor</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>count</name> <operator>+=</operator> <name><name>cursor</name><operator>-&gt;</operator><name>num_events_left</name></name></expr>;</expr_stmt></block_content></block></while>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>int</name></type> <name>_tdb_cursor_next_batch</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_decode_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><name><name>cursor</name><operator>-&gt;</operator><name>state</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>huff_codebook</name></name> <modifier>*</modifier></type><name>codebook</name> <init>=
        <expr><operator>(</operator><specifier>const</specifier> struct <name>huff_codebook</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>codebook</name><operator>.</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>field_stats</name></name> <modifier>*</modifier></type><name>fstats</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>field_stats</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name><name>s</name><operator>-&gt;</operator><name>events_buffer</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_item</name></type> <name>item</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>edge_encoded</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>edge_encoded</name></name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* decode the trail - exit early if destination buffer runs out of space */</comment>
    <while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator> <name>num_events</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>events_buffer_len</name></name></expr>)</condition><block>{<block_content>
        <comment type="block">/* Every event starts with a timestamp.
           Timestamp may be the first member of a bigram */</comment>
        <decl_stmt><decl><type><name>__uint128_t</name></type> <name>gram</name> <init>= <expr><call><name>huff_decode_value</name><argument_list>(<argument><expr><name>codebook</name></expr></argument>,
                                             <argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                                             <argument><expr><name>fstats</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>orig_i</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><call><name>tdb_item_val</name><argument_list>(<argument><expr><call><name>HUFF_BIGRAM_TO_ITEM</name><argument_list>(<argument><expr><name>gram</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>num_items</name></decl>;</decl_stmt>

        <comment type="block">/*
        events buffer format:

           [ [ timestamp | num_items | items ... ] tdb_event 1
             [ timestamp | num_items | items ... ] tdb_event 2
             ...
             [ timestamp | num_items | items ... ] tdb_event N ]

        note that events may have a varying number of items, due to
        edge encoding
        */</comment>

        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>tstamp</name></name> <operator>+=</operator> <name>delta</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>tstamp</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>num_items</name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>HUFF_BIGRAM_OTHER_ITEM</name><argument_list>(<argument><expr><name>gram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* handle a possible latter part of the first bigram */</comment>
        <if_stmt><if>if <condition>(<expr><name>item</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>tdb_item_field</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>previous_items</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>edge_encoded</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="block">/* decode one event: timestamp is followed by at most num_ofields
           field values */</comment>
        <while>while <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block>{<block_content>
            <decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_offs</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>gram</name> <operator>=</operator> <call><name>huff_decode_value</name><argument_list>(<argument><expr><name>codebook</name></expr></argument>,
                                     <argument><expr><name><name>s</name><operator>-&gt;</operator><name>data</name></name></expr></argument>,
                                     <argument><expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
                                     <argument><expr><name>fstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>item</name> <operator>=</operator> <call><name>HUFF_BIGRAM_TO_ITEM</name><argument_list>(<argument><expr><name>gram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>field</name> <operator>=</operator> <call><name>tdb_item_field</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>field</name></expr>)</condition><block>{<block_content>
                <comment type="block">/* value may be either a unigram or a bigram */</comment>
                <do>do<block>{<block_content>
                    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>previous_items</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>edge_encoded</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>item</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    <expr_stmt><expr><name>gram</name> <operator>=</operator> <name>item</name> <operator>=</operator> <call><name>HUFF_BIGRAM_OTHER_ITEM</name><argument_list>(<argument><expr><name>gram</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>while <condition>(<expr><operator>(</operator><name>field</name> <operator>=</operator> <call><name>tdb_item_field</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>;</do>
            </block_content>}</block></if><else>else<block>{<block_content>
                <comment type="block">/* we hit the next timestamp, take a step back and break */</comment>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name>prev_offs</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>s</name><operator>-&gt;</operator><name>filter</name></name> <operator>||</operator>
            <operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>options</name></name> <operator>&amp;</operator> <name>TDB_FILTER_MATCH_ALL</name><operator>)</operator> <operator>||</operator>
            <call><name>event_satisfies_filter</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>previous_items</name></name></expr></argument>,
                                   <argument><expr><name><name>s</name><operator>-&gt;</operator><name>tstamp</name></name></expr></argument>,
                                   <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>items</name></name></expr></argument>,
                                   <argument><expr><name><name>s</name><operator>-&gt;</operator><name>filter</name><operator>-&gt;</operator><name>count</name></name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>

            <comment type="block">/* no filter or filter matches, finalize the event */</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>edge_encoded</name></expr>)</condition><block>{<block_content>
                <comment type="block">/* dump all the fields of this event in the result, if edge
                   encoding is not requested
                */</comment>
                <for>for <control>(<init><expr><name>field</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>field</name> <operator>&lt;</operator> <name><name>s</name><operator>-&gt;</operator><name>db</name><operator>-&gt;</operator><name>num_fields</name></name></expr>;</condition> <incr><expr><name>field</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>dst</name><index>[<expr><name>i</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>previous_items</name><index>[<expr><name>field</name></expr>]</index></name></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>++</operator><name>num_events</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>num_items</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>-</operator> <operator>(</operator><name>orig_i</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
            <comment type="block">/* filter doesn't match - ignore this event */</comment>
            <expr_stmt><expr><name>i</name> <operator>=</operator> <name>orig_i</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>next_event</name></name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>events_buffer</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cursor</name><operator>-&gt;</operator><name>num_events_left</name></name> <operator>=</operator> <name>num_events</name></expr>;</expr_stmt>
    <return>return <expr><ternary><condition><expr><name>num_events</name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">1</literal></expr></then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
the following ensures that tdb_cursor_next() is exported to
libtraildb.so

this is "strategy 3" from
http://www.greenend.org.uk/rjk/tech/inline.html
*/</comment>
<function_decl><type><name>TDB_EXPORT</name> <specifier>extern</specifier> <specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>tdb_cursor_next</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>TDB_EXPORT</name> <specifier>extern</specifier> <specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>tdb_cursor_peek</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl></parameter>)</parameter_list>;</function_decl>

</unit>
