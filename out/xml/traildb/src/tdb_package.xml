<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb_package.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* getline() */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_package.h"</cpp:file></cpp:include>


<struct>struct <name>pkg_toc</name><block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>uint64_t</name></type> <name>toc_count_lines</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_lines</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TDB_TAR_MAGIC</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>num_lines</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>++</operator><name>num_lines</name></expr>;</expr_stmt>
    </block_content>}</block></while>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>num_lines</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>toc_parse</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>f</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>pkg_toc</name></name> <modifier>*</modifier></type><name>toc</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>num_lines</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>saveptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="block">/* ignore magic line */</comment>
    <if_stmt><if>if <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_IO_READ</name></expr>;</return></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_lines</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>TDB_ERR_IO_READ</name></expr>;</return></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>tok</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TDB_ERR_INVALID_PACKAGE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>tok</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TDB_ERR_INVALID_PACKAGE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>tok</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>tok</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>TDB_ERR_INVALID_PACKAGE</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <call><name>strtoull</name><argument_list>(<argument><expr><name>tok</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>tdb_error</name></type> <name>open_package</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>root</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_lines</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>, <argument><expr><name>root</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>, <argument><expr><name>TOC_FILE_OFFSET</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>num_lines</name> <operator>=</operator> <call><name>toc_count_lines</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>db</name><operator>-&gt;</operator><name>package_toc</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>num_lines</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>pkg_toc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>, <argument><expr><name>TOC_FILE_OFFSET</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_INVALID_PACKAGE</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>toc_parse</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>, <argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_toc</name></name></expr></argument>, <argument><expr><name>num_lines</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
<label><name>done</name>:</label>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>free_package</name><parameter_list>(<parameter><decl><type><name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>package_toc</name></name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>pkg_toc</name></name> <modifier>*</modifier></type><name>toc</name> <init>= <expr><operator>(</operator>struct <name>pkg_toc</name><operator>*</operator><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>package_toc</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_toc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>toc_get</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                   <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>,
                   <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>offset</name></decl></parameter>,
                   <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>pkg_toc</name></name> <modifier>*</modifier></type><name>toc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>pkg_toc</name><operator>*</operator><operator>)</operator><name><name>db</name><operator>-&gt;</operator><name>package_toc</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <comment type="block">/*
    NOTE we find the matching file using a linear scan below.
    This shouldn't be a problem UNLESS there are a very large number of fields
    and lexicon.* files, in which case the list can get long. It should be easy
    to replace this with a faster search like JudySL, if needed.
    */</comment>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><operator>*</operator><name>offset</name> <operator>=</operator> <name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>offset</name></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
        </block_content>}</block></if></if_stmt></block_content></block></for>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>package_fopen</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fname</name></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>root</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><specifier>const</specifier> <name>tdb</name> <operator>*</operator><name>db</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>size</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>toc_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fseek</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>, <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>package_fclose</name><argument_list>(<argument><expr><name>FILE</name> <operator>*</operator><name>f</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list>
<block>{<block_content>
    <comment type="block">/* we don't want to close db-&gt;package_handle */</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<decl_stmt><decl><type><name>int</name></type> <name>package_mmap</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>fname</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator><name>root</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr>struct <name>tdb_file</name> <operator>*</operator><name>dst</name></expr></argument>,
                 <argument><expr><specifier>const</specifier> <name>tdb</name> <operator>*</operator><name>db</name></expr></argument>)</argument_list>
<block>{<block_content>
    <comment type="block">/*
    we need to page-align offsets for mmap() and adjust data pointers
    accordingly. dst-&gt;mmap_size and dst-&gt;ptr correspond to the page-aligned
    values, dst-&gt;size and dst-&gt;data to the values containing the actual data.
    */</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><call><name>fileno</name><argument_list>(<argument><expr><name><name>db</name><operator>-&gt;</operator><name>package_handle</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>offset</name></decl>, <decl><type ref="prev"/><name>shift</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>toc_get</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>shift</name> <operator>=</operator> <name>offset</name> <operator>&amp;</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><call><name>getpagesize</name><argument_list>()</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>mmap_size</name></name> <operator>=</operator> <name><name>dst</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name>shift</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>-=</operator> <name>shift</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
                    <argument><expr><name><name>dst</name><operator>-&gt;</operator><name>mmap_size</name></name></expr></argument>,
                    <argument><expr><name>PROT_READ</name></expr></argument>,
                    <argument><expr><name>MAP_SHARED</name></expr></argument>,
                    <argument><expr><name>fd</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>off_t</name><operator>)</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>dst</name><operator>-&gt;</operator><name>ptr</name></name> <operator>==</operator> <name>MAP_FAILED</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>dst</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>dst</name><operator>-&gt;</operator><name>ptr</name><index>[<expr><name>shift</name></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></decl></decl_stmt>
</unit>
