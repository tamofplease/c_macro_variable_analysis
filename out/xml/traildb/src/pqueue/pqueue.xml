<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/pqueue/pqueue.c"><comment type="block">/*
 * Copyright (c) 2014, Volkan YazÄ±cÄ± &lt;volkan.yazici@gmail.com&gt;
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */</comment>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqueue.h"</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>left</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((i) &lt;&lt; 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>right</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>(((i) &lt;&lt; 1) + 1)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>parent</name><parameter_list>(<parameter><type><name>i</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((i) &gt;&gt; 1)</cpp:value></cpp:define>


<function><type><name>pqueue_t</name> <modifier>*</modifier></type>
<name>pqueue_init</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>n</name></decl></parameter>,
            <parameter><decl><type><name>pqueue_cmp_pri_f</name></type> <name>cmppri</name></decl></parameter>,
            <parameter><decl><type><name>pqueue_get_pri_f</name></type> <name>getpri</name></decl></parameter>,
            <parameter><decl><type><name>pqueue_set_pri_f</name></type> <name>setpri</name></decl></parameter>,
            <parameter><decl><type><name>pqueue_get_pos_f</name></type> <name>getpos</name></decl></parameter>,
            <parameter><decl><type><name>pqueue_set_pos_f</name></type> <name>setpos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>q</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pqueue_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* Need to allocate n+1 elements since element 0 isn't used. */</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>n</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <operator>(</operator><name>n</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>  <comment type="block">/* see comment above about n+1 */</comment>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name> <operator>=</operator> <name>cmppri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>setpri</name></name> <operator>=</operator> <name>setpri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name> <operator>=</operator> <name>getpri</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>getpos</name></name> <operator>=</operator> <name>getpos</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>setpos</name></name> <operator>=</operator> <name>setpos</name></expr>;</expr_stmt>

    <return>return <expr><name>q</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>pqueue_reset</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>pqueue_free</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>q</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type>
<name>pqueue_size</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* queue element 0 exists but doesn't count since it isn't used. */</comment>
    <return>return <expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>bubble_up</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>parent_node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>moving_node</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pqueue_pri_t</name></type> <name>moving_pri</name> <init>= <expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name>moving_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><expr><name>parent_node</name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</init>
         <condition><expr><operator>(</operator><operator>(</operator><name>i</name> <operator>&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>parent_node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>moving_pri</name></expr></argument>)</argument_list></call><operator>)</operator></expr>;</condition>
         <incr><expr><name>i</name> <operator>=</operator> <name>parent_node</name></expr><operator>,</operator> <expr><name>parent_node</name> <operator>=</operator> <call><name>parent</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>parent_node</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>setpos</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>moving_node</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>setpos</name></name><argument_list>(<argument><expr><name>moving_node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>maxchild</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>child_node</name> <init>= <expr><call><name>left</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>child_node</name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>child_node</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>&lt;</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>&amp;&amp;</operator>
        <call><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>child_node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>child_node</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>child_node</name><operator>++</operator></expr>;</expr_stmt></block_content></block></if></if_stmt> <comment type="block">/* use right child instead of left */</comment>

    <return>return <expr><name>child_node</name></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>percolate_down</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>child_node</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>moving_node</name> <init>= <expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pqueue_pri_t</name></type> <name>moving_pri</name> <init>= <expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name>moving_node</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>child_node</name> <operator>=</operator> <call><name>maxchild</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
           <call><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name><argument_list>(<argument><expr><name>moving_pri</name></expr></argument>, <argument><expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>child_node</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>child_node</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>setpos</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>child_node</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>moving_node</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>setpos</name></name><argument_list>(<argument><expr><name>moving_node</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>pqueue_insert</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>newsize</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* allocate more memory if necessary */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>q</name><operator>-&gt;</operator><name>avail</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>newsize</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <name><name>q</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>tmp</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>newsize</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name></name> <operator>=</operator> <name>tmp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name>newsize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="block">/* insert item */</comment>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bubble_up</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>pqueue_change_priority</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
                       <parameter><decl><type><name>pqueue_pri_t</name></type> <name>new_pri</name></decl></parameter>,
                       <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>posn</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pqueue_pri_t</name></type> <name>old_pri</name> <init>= <expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name><name>q</name><operator>-&gt;</operator><name>setpri</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><name>new_pri</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>posn</name> <operator>=</operator> <call><name><name>q</name><operator>-&gt;</operator><name>getpos</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name><argument_list>(<argument><expr><name>old_pri</name></expr></argument>, <argument><expr><name>new_pri</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bubble_up</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>percolate_down</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int</name></type>
<name>pqueue_remove</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>posn</name> <init>= <expr><call><name><name>q</name><operator>-&gt;</operator><name>getpos</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>posn</name></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><operator>--</operator><name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name><argument_list>(<argument><expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>posn</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bubble_up</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>percolate_down</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><name>posn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type>
<name>pqueue_pop</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>head</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name> <operator>||</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>head</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><operator>--</operator><name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>percolate_down</name><argument_list>(<argument><expr><name>q</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>head</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>void</name> <modifier>*</modifier></type>
<name>pqueue_peek</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>q</name> <operator>||</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <return>return <expr><name>d</name></expr>;</return>
</block_content>}</block></function>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
void
pqueue_dump(pqueue_t *q,
            FILE *out,
            pqueue_print_entry_f print)
{
    int i;

    fprintf(stdout,"posn\tleft\tright\tparent\tmaxchild\t...\n");
    for (i = 1; i &lt; q-&gt;size ;i++) {
        fprintf(stdout,
                "%d\t%d\t%d\t%d\t%ul\t",
                i,
                left(i), right(i), parent(i),
                (unsigned int)maxchild(q, i));
        print(out, q-&gt;d[i]);
    }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_pos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* do nothing */</comment>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type>
<name>set_pri</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>d</name></decl></parameter>, <parameter><decl><type><name>pqueue_pri_t</name></type> <name>pri</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="block">/* do nothing */</comment>
</block_content>}</block></function>


<function><type><name>void</name></type>
<name>pqueue_print</name><parameter_list>(<parameter><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>q</name></decl></parameter>,
             <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>,
             <parameter><decl><type><name>pqueue_print_entry_f</name></type> <name>print</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>dup</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>e</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>dup</name> <operator>=</operator> <call><name>pqueue_init</name><argument_list>(<argument><expr><name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr></argument>,
                      <argument><expr><name><name>q</name><operator>-&gt;</operator><name>cmppri</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>getpri</name></name></expr></argument>, <argument><expr><name>set_pri</name></expr></argument>,
                      <argument><expr><name><name>q</name><operator>-&gt;</operator><name>getpos</name></name></expr></argument>, <argument><expr><name>set_pos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dup</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name><name>q</name><operator>-&gt;</operator><name>step</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>dup</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name><name>q</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>q</name><operator>-&gt;</operator><name>size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>void</name> <operator>*</operator></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>e</name> <operator>=</operator> <call><name>pqueue_pop</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>e</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

    <expr_stmt><expr><call><name>pqueue_free</name><argument_list>(<argument><expr><name>dup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int
subtree_is_valid(pqueue_t *q, int pos)
{
    if (left(pos) &lt; q-&gt;size) {
        <comment type="block">/* has a left child */</comment>
        if (q-&gt;cmppri(q-&gt;getpri(q-&gt;d[pos]), q-&gt;getpri(q-&gt;d[left(pos)])))
            return 0;
        if (!subtree_is_valid(q, left(pos)))
            return 0;
    }
    if (right(pos) &lt; q-&gt;size) {
        <comment type="block">/* has a right child */</comment>
        if (q-&gt;cmppri(q-&gt;getpri(q-&gt;d[pos]), q-&gt;getpri(q-&gt;d[right(pos)])))
            return 0;
        if (!subtree_is_valid(q, right(pos)))
            return 0;
    }
    return 1;
}


int
pqueue_is_valid(pqueue_t *q)
{
    return subtree_is_valid(q, 1);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
