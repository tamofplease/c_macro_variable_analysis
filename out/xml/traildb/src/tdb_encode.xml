<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb_encode.c"><cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define> <comment type="block">/* mkstemp */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>JUDYERROR</name></cpp:undef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>JUDYERROR</name><parameter_list>(<parameter><type><name>CallerFile</name></type></parameter>, <parameter><type><name>CallerLine</name></type></parameter>, <parameter><type><name>JudyFunc</name></type></parameter>, <parameter><type><name>JudyErrno</name></type></parameter>, <parameter><type><name>JudyErrID</name></type></parameter>)</parameter_list></cpp:macro> \
<cpp:value>{                                                                         \
   if ((JudyErrno) == JU_ERRNO_NOMEM)                                     \
       goto out_of_memory;                                                \
}</cpp:value></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;Judy.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_internal.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_encode_model.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_huffman.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_io.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>EDGE_INCREMENT</name></cpp:macro>     <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GROUPBUF_INCREMENT</name></cpp:macro> <cpp:value>1000000</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_BUFFER_SIZE</name></cpp:macro>  <cpp:value>(1000000 * sizeof(struct tdb_grouped_event))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WRITE_BUFFER_SIZE</name></cpp:macro> <cpp:value>(8 * 1024 * 1024)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INITIAL_ENCODING_BUF_BITS</name></cpp:macro> <cpp:value>8 * 1024 * 1024</cpp:value></cpp:define>

<struct>struct <name>jm_fold_state</name><block>{
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>grouped_w</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_grouped_event</name></name> <modifier>*</modifier></type><name>buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>buf_size</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>trail_id</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_cons_event</name></name> <modifier>*</modifier></type><name>events</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>min_timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>max_timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>max_timedelta</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>tdb_error</name></type> <name>ret</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compare</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_grouped_event</name></name> <modifier>*</modifier></type><name>x</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>tdb_grouped_event</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_grouped_event</name></name> <modifier>*</modifier></type><name>y</name> <init>= <expr><operator>(</operator><specifier>const</specifier> struct <name>tdb_grouped_event</name><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&gt;</operator> <name><name>y</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><name><name>x</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;</operator> <name><name>y</name><operator>-&gt;</operator><name>timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>groupby_uuid_handle_one_trail</name><argument_list>(
    <argument><expr><name>__uint128_t</name> <name>uuid</name> <call><name>__attribute__</name><argument_list>(<argument><expr><operator>(</operator><name>unused</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><name>Word_t</name> <operator>*</operator><name>value</name></expr></argument>,
    <argument><expr><name>void</name> <operator>*</operator><name>state</name></expr></argument>)</argument_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>jm_fold_state</name></name> <modifier>*</modifier></type><name>s</name> <init>= <expr><operator>(</operator>struct <name>jm_fold_state</name><operator>*</operator><operator>)</operator><name>state</name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* find the last event belonging to this trail */</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_cons_event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>events</name><index>[<expr><operator>*</operator><name>value</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_events</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>s</name><operator>-&gt;</operator><name>ret</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="block">/* loop through all events belonging to this trail,
       following back-links */</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;=</operator> <name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>+=</operator> <name>GROUPBUF_INCREMENT</name></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>s</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
                    <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf_size</name></name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_grouped_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>trail_id</name> <operator>=</operator> <name><name>s</name><operator>-&gt;</operator><name>trail_id</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>item_zero</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>item_zero</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>num_items</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <name><name>ev</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>

        <comment type="block">/* TODO write a test for an extra long (&gt;2^32) trail */</comment>
        <if_stmt><if>if <condition>(<expr><operator>++</operator><name>j</name> <operator>==</operator> <name>TDB_MAX_TRAIL_LENGTH</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_TRAIL_TOO_LONG</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>prev_event_idx</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>ev</name> <operator>=</operator> <operator>&amp;</operator><name><name>s</name><operator>-&gt;</operator><name>events</name><index>[<expr><name><name>ev</name><operator>-&gt;</operator><name>prev_event_idx</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <break>break;</break></block_content></block></else></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>num_events</name> <operator>=</operator> <name>j</name></expr>;</expr_stmt>

    <comment type="block">/* sort events of this trail by time */</comment>
    <comment type="block">/* TODO make this stable sort */</comment>
    <comment type="block">/* TODO this could really benefit from Timsort since raw data
       is often partially sorted */</comment>
    <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name>num_events</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_grouped_event</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>compare</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* delta-encode timestamps */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>prev_timestamp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_events</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>timestamp</name> <init>= <expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>timestamp</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>delta</name> <init>= <expr><name>timestamp</name> <operator>-</operator> <name>prev_timestamp</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <name>TDB_MAX_TIMEDELTA</name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>timestamp</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_timestamp</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_timestamp</name></name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <name><name>s</name><operator>-&gt;</operator><name>max_timedelta</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>max_timedelta</name></name> <operator>=</operator> <name>delta</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><name>prev_timestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
            <comment type="block">/* convert the delta value to a proper item */</comment>
            <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <call><name>tdb_make_item</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_TIMESTAMP_TOO_LARGE</name></expr>;</expr_stmt>
            <goto>goto <name>done</name>;</goto>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name><name>s</name><operator>-&gt;</operator><name>grouped_w</name></name></expr></argument>,
              <argument><expr><name><name>s</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>,
              <argument><expr><name>num_events</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_grouped_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name><name>s</name><operator>-&gt;</operator><name>trail_id</name></name></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><name><name>s</name><operator>-&gt;</operator><name>ret</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>
    <return>return <expr><name>s</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>groupby_uuid</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>grouped_w</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_cons_event</name></name> <modifier>*</modifier></type><name>events</name></decl></parameter>,
                              <parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>num_trails</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>max_timestamp</name></decl></parameter>,
                              <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>max_timedelta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>jm_fold_state</name></name></type> <name>state</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>grouped_w</name> <operator>=</operator> <name>grouped_w</name></expr>,
        <expr><operator>.</operator><name>events</name> <operator>=</operator> <name>events</name></expr>,
        <expr><operator>.</operator><name>min_timestamp</name> <operator>=</operator> <name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <comment type="block">/* we require (min_timestamp - 0 &lt; TDB_MAX_TIMEDELTA) */</comment>
    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name> <operator>&gt;=</operator> <name>TDB_MAX_TIMEDELTA</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>TDB_ERR_TIMESTAMP_TOO_LARGE</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>j128m_fold</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>, <argument><expr><name>groupby_uuid_handle_one_trail</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>state</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>num_trails</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>trail_id</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>max_timestamp</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>max_timestamp</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>max_timedelta</name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>max_timedelta</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>state</name><operator>.</operator><name>ret</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tdb_error</name></type> <name>edge_encode_items</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb_item</name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
                            <parameter><decl><type><name>tdb_item</name> <modifier>*</modifier><modifier>*</modifier></type><name>encoded</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>num_encoded</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>encoded_size</name></decl></parameter>,
                            <parameter><decl><type><name>tdb_item</name> <modifier>*</modifier></type><name>prev_items</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>tdb_grouped_event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>j</name> <init>= <expr><name><name>ev</name><operator>-&gt;</operator><name>item_zero</name></name></expr></init></decl>;</decl_stmt>
    <comment type="block">/* edge encode items: keep only fields that are different from
       the previous event */</comment>
    <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>ev</name><operator>-&gt;</operator><name>item_zero</name></name> <operator>+</operator> <name><name>ev</name><operator>-&gt;</operator><name>num_items</name></name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><name>tdb_field</name></type> <name>field</name> <init>= <expr><call><name>tdb_item_field</name><argument_list>(<argument><expr><name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>prev_items</name><index>[<expr><name>field</name></expr>]</index></name> <operator>!=</operator> <name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>*</operator><name>encoded_size</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><operator>*</operator><name>encoded_size</name> <operator>+=</operator> <name>EDGE_INCREMENT</name></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>encoded</name> <operator>=</operator> <call><name>realloc</name><argument_list>(<argument><expr><operator>*</operator><name>encoded</name></expr></argument>,
                                         <argument><expr><operator>*</operator><name>encoded_size</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><operator>(</operator><operator>*</operator><name>encoded</name><operator>)</operator><index>[<expr><name>n</name><operator>++</operator></expr>]</index> <operator>=</operator> <name><name>prev_items</name><index>[<expr><name>field</name></expr>]</index></name> <operator>=</operator> <name><name>items</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><operator>*</operator><name>num_encoded</name> <operator>=</operator> <name>n</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>store_info</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>num_trails</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>num_events</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>min_timestamp</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>max_timestamp</name></decl></parameter>,
                            <parameter><decl><type><name>uint64_t</name></type> <name>max_timedelta</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <comment type="block">/*
    NOTE - this file shouldn't grow to be more than 512
    bytes, so it occupies a constant amount of space in a
    tar package.
    */</comment>
    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_FPRINTF</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
                <argument><expr><literal type="string">"%"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">" %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
                <argument><expr><name>num_trails</name></expr></argument>,
                <argument><expr><name>num_events</name></expr></argument>,
                <argument><expr><name>min_timestamp</name></expr></argument>,
                <argument><expr><name>max_timestamp</name></expr></argument>,
                <argument><expr><name>max_timedelta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>encode_trails</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>tdb_item</name> <modifier>*</modifier></type><name>items</name></decl></parameter>,
                               <parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>grouped</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>num_events</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>num_trails</name></decl></parameter>,
                               <parameter><decl><type><name>uint64_t</name></type> <name>num_fields</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>codemap</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>gram_freqs</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>field_stats</name></name> <modifier>*</modifier></type><name>fstats</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
                               <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>toc_path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>__uint128_t</name> <modifier>*</modifier></type><name>grams</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_item</name> <modifier>*</modifier></type><name>prev_items</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>encoded</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>encoded_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>buf_size</name> <init>= <expr><name>INITIAL_ENCODING_BUF_BITS</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>file_offs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>toc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>gram_bufs</name></name></type> <name>gbufs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>tdb_grouped_event</name></name></type> <name>ev</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>write_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>init_gram_bufs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbufs</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>write_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>WRITE_BUFFER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>write_buf</name></expr></argument>, <argument><expr><name>_IOFBF</name></expr></argument>, <argument><expr><name>WRITE_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>buf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>prev_items</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>grams</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>num_fields</name> <operator>*</operator> <literal type="number">16</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>toc</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>num_trails</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>rewind</name><argument_list>(<argument><expr><name>grouped</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>num_events</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TDB_READ</name><argument_list>(<argument><expr><name>grouped</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_grouped_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><name>i</name> <operator>&lt;=</operator> <name>num_events</name></expr>)</condition><block>{<block_content>
        <comment type="block">/* encode trail for one UUID (multiple events) */</comment>

        <comment type="block">/* reserve 3 bits in the head of the trail for a length residual:
           Length of a trail is measured in bytes but the last byte may
           be short. The residual indicates how many bits in the end we
           should ignore. */</comment>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>offs</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>trail_id</name> <init>= <expr><name><name>ev</name><operator>.</operator><name>trail_id</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name></decl>, <decl><type ref="prev"/><name>m</name></decl>, <decl><type ref="prev"/><name>trail_size</name></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>toc</name><index>[<expr><name>trail_id</name></expr>]</index></name> <operator>=</operator> <name>file_offs</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>prev_items</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>num_fields</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>tdb_item</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <while>while <condition>(<expr><name><name>ev</name><operator>.</operator><name>trail_id</name></name> <operator>==</operator> <name>trail_id</name></expr>)</condition><block>{<block_content>

            <comment type="block">/* 1) produce an edge-encoded set of items for this event */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>edge_encode_items</name><argument_list>(<argument><expr><name>items</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>encoded</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>n</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>encoded_size</name></expr></argument>,
                                         <argument><expr><name>prev_items</name></expr></argument>,
                                         <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

            <comment type="block">/* 2) cover the encoded set with a set of unigrams and bigrams */</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>choose_grams_one_event</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>,
                                              <argument><expr><name>n</name></expr></argument>,
                                              <argument><expr><name>gram_freqs</name></expr></argument>,
                                              <argument><expr><operator>&amp;</operator><name>gbufs</name></expr></argument>,
                                              <argument><expr><name>grams</name></expr></argument>,
                                              <argument><expr><operator>&amp;</operator><name>m</name></expr></argument>,
                                              <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>uint64_t</name></type> <name>bits_needed</name> <init>= <expr><name>offs</name> <operator>+</operator> <call><name>huff_encoded_max_bits</name><argument_list>(<argument><expr><name>m</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">64</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>bits_needed</name> <operator>&gt;</operator> <name>buf_size</name></expr>)</condition><block>{<block_content>
                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>new_buf</name></decl>;</decl_stmt>
                <expr_stmt><expr><name>buf_size</name> <operator>=</operator> <name>bits_needed</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>new_buf</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buf_size</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
                    <goto>goto <name>done</name>;</goto>
                </block_content>}</block></if></if_stmt>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>new_buf</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>offs</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> <operator>=</operator> <name>new_buf</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="block">/* 3) huffman-encode grams */</comment>
            <expr_stmt><expr><call><name>huff_encode_grams</name><argument_list>(<argument><expr><name>codemap</name></expr></argument>,
                              <argument><expr><name>grams</name></expr></argument>,
                              <argument><expr><name>m</name></expr></argument>,
                              <argument><expr><name>buf</name></expr></argument>,
                              <argument><expr><operator>&amp;</operator><name>offs</name></expr></argument>,
                              <argument><expr><name>fstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>i</name><operator>++</operator> <operator>&lt;</operator> <name>num_events</name></expr>)</condition><block>{<block_content>
                <expr_stmt><expr><call><name>TDB_READ</name><argument_list>(<argument><expr><name>grouped</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_grouped_event</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if><else>else<block type="pseudo"><block_content>
                <break>break;</break></block_content></block></else></if_stmt>
        </block_content>}</block></while>

        <comment type="block">/* write the length residual */</comment>
        <if_stmt><if>if <condition>(<expr><name>offs</name> <operator>&amp;</operator> <literal type="number">7</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name>trail_size</name> <operator>=</operator> <name>offs</name> <operator>/</operator> <literal type="number">8</literal> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>write_bits</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal> <operator>-</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>offs</name> <operator>&amp;</operator> <literal type="number">7LLU</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if><else>else<block>{<block_content>
            <expr_stmt><expr><name>trail_size</name> <operator>=</operator> <name>offs</name> <operator>/</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="block">/* append trail to the end of file */</comment>
        <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>trail_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>file_offs</name> <operator>+=</operator> <name>trail_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>trail_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    </block_content>}</block></while>
    <comment type="block">/* keep the redundant last offset in the TOC, so we can determine
       trail length with toc[i + 1] - toc[i]. */</comment>
    <expr_stmt><expr><name><name>toc</name><index>[<expr><name>num_trails</name></expr>]</index></name> <operator>=</operator> <name>file_offs</name></expr>;</expr_stmt>

    <comment type="block">/* write an extra 8 null bytes: huffman may require up to 7 when reading */</comment>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>zero</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>zero</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>file_offs</name> <operator>+=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_CLOSE</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>toc_path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>offs_size</name> <init>= <expr><ternary><condition><expr><name>file_offs</name> <operator>&lt;</operator> <name>UINT32_MAX</name></expr> ?</condition><then> <expr><literal type="number">4</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_trails</name> <operator>+</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>toc</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>offs_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>write_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free_gram_bufs</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gbufs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>grams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>encoded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>prev_items</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>toc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tdb_error</name></type> <name>store_codebook</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>judy_128_map</name></name> <modifier>*</modifier></type><name>codemap</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>huff_codebook</name></name> <modifier>*</modifier></type><name>book</name> <init>= <expr><call><name>huff_create_codebook</name><argument_list>(<argument><expr><name>codemap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_WRITE</name><argument_list>(<argument><expr><name>out</name></expr></argument>, <argument><expr><name>book</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>out</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>book</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tdb_error</name></type> <name>tdb_encode</name><parameter_list>(<parameter><decl><type><name>tdb_cons</name> <modifier>*</modifier></type><name>cons</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>tdb_item</name> <modifier>*</modifier></type><name>items</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>grouped_path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>toc_path</name><index>[<expr><name>TDB_MAX_PATH_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>root</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>root</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>read_buf</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>field_stats</name></name> <modifier>*</modifier></type><name>fstats</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_trails</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_events</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_fields</name> <init>= <expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>max_timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>max_timedelta</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>field_cardinalities</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Pvoid_t</name></type> <name>unigram_freqs</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>judy_128_map</name></name></type> <name>gram_freqs</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>judy_128_map</name></name></type> <name>codemap</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Word_t</name></type> <name>tmp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>grouped_w</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>grouped_r</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fd</name></decl>, <decl><type ref="prev"/><name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TDB_TIMER_DEF</name></type>

    <name>j128m_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gram_freqs</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>j128m_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codemap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>field_cardinalities</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cons</name><operator>-&gt;</operator><name>num_ofields</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>field_cardinalities</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>jsm_num_keys</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>lexicons</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

    <comment type="block">/* 1. group events by trail, sort events of each trail by time,
          and delta-encode timestamps */</comment>
    <decl_stmt><decl><type><name>TDB_TIMER_START</name></type>

    <name>TDB_PATH</name><argument_list>(<argument><expr><name>grouped_path</name></expr></argument>, <argument><expr><literal type="string">"%s/tmp.grouped.XXXXXX"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>fd</name> <operator>=</operator> <call><name>mkstemp</name><argument_list>(<argument><expr><name>grouped_path</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_OPEN</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>grouped_w</name> <operator>=</operator> <call><name>fdopen</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="string">"w"</literal></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_IO_OPEN</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>data</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>groupby_uuid</name><argument_list>(<argument><expr><name>grouped_w</name></expr></argument>,
                                <argument><expr><operator>(</operator>struct <name>tdb_cons_event</name><operator>*</operator><operator>)</operator><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>data</name></name></expr></argument>,
                                <argument><expr><name>cons</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>num_trails</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>max_timestamp</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name>max_timedelta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <comment type="block">/*
    not the most clean separation of ownership here, but these objects
    can be huge so keeping them around unecessarily is expensive
    */</comment>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cons</name><operator>-&gt;</operator><name>events</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>j128m_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cons</name><operator>-&gt;</operator><name>trails</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_CLOSE</name><argument_list>(<argument><expr><name>grouped_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>grouped_w</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>TDB_OPEN</name><argument_list>(<argument><expr><name>grouped_r</name></expr></argument>, <argument><expr><name>grouped_path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>read_buf</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>READ_BUFFER_SIZE</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>setvbuf</name><argument_list>(<argument><expr><name>grouped_r</name></expr></argument>, <argument><expr><name>read_buf</name></expr></argument>, <argument><expr><name>_IOFBF</name></expr></argument>, <argument><expr><name>READ_BUFFER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/groupby_uuid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 2. store metatadata */</comment>
    <decl_stmt><decl><type><name>TDB_TIMER_START</name></type>
    <name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/info"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>store_info</name><argument_list>(<argument><expr><name>path</name></expr></argument>,
                          <argument><expr><name>num_trails</name></expr></argument>,
                          <argument><expr><name>num_events</name></expr></argument>,
                          <argument><expr><name><name>cons</name><operator>-&gt;</operator><name>min_timestamp</name></name></expr></argument>,
                          <argument><expr><name>max_timestamp</name></expr></argument>,
                          <argument><expr><name>max_timedelta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 3. collect value (unigram) freqs, including delta-encoded timestamps */</comment>
    <decl_stmt><decl><type><name>TDB_TIMER_START</name></type>
    <name>unigram_freqs</name> <init>= <expr><call><name>collect_unigrams</name><argument_list>(<argument><expr><name>grouped_r</name></expr></argument>, <argument><expr><name>num_events</name></expr></argument>, <argument><expr><name>items</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>num_events</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>unigram_freqs</name></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/collect_unigrams"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 4. construct uni/bi-grams */</comment>
    <decl_stmt><decl><type><name>tdb_opt_value</name></type> <name>dont_build_bigrams</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tdb_cons_get_opt</name><argument_list>(<argument><expr><name>cons</name></expr></argument>, <argument><expr><name>TDB_OPT_CONS_NO_BIGRAMS</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dont_build_bigrams</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>TDB_TIMER_START</name></macro>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>make_grams</name><argument_list>(<argument><expr><name>grouped_r</name></expr></argument>,
                          <argument><expr><name>num_events</name></expr></argument>,
                          <argument><expr><name>items</name></expr></argument>,
                          <argument><expr><name>num_fields</name></expr></argument>,
                          <argument><expr><name>unigram_freqs</name></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name>gram_freqs</name></expr></argument>,
                          <argument><expr><name><name>dont_build_bigrams</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/gram_freqs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 5. build a huffman codebook and stats struct for encoding grams */</comment>
    <macro><name>TDB_TIMER_START</name></macro>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>huff_create_codemap</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gram_freqs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>codemap</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>fstats</name> <operator>=</operator> <call><name>huff_field_stats</name><argument_list>(<argument><expr><name>field_cardinalities</name></expr></argument>,
                                    <argument><expr><name>num_fields</name></expr></argument>,
                                    <argument><expr><name>max_timedelta</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>TDB_ERR_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>done</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/huff_create_codemap"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 6. encode and write trails to disk */</comment>
    <decl_stmt><decl><type><name>TDB_TIMER_START</name></type>
    <name>TDB_PATH</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/trails.data"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>TDB_PATH</name><argument_list>(<argument><expr><name>toc_path</name></expr></argument>, <argument><expr><literal type="string">"%s/trails.toc"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>encode_trails</name><argument_list>(<argument><expr><name>items</name></expr></argument>,
                             <argument><expr><name>grouped_r</name></expr></argument>,
                             <argument><expr><name>num_events</name></expr></argument>,
                             <argument><expr><name>num_trails</name></expr></argument>,
                             <argument><expr><name>num_fields</name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>codemap</name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>gram_freqs</name></expr></argument>,
                             <argument><expr><name>fstats</name></expr></argument>,
                             <argument><expr><name>path</name></expr></argument>,
                             <argument><expr><name>toc_path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/encode_trails"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* 7. write huffman codebook to disk */</comment>
    <decl_stmt><decl><type><name>TDB_TIMER_START</name></type>
    <name>tdb_path</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"%s/trails.codebook"</literal></expr></argument>, <argument><expr><name>root</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>store_codebook</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codemap</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>done</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>TDB_TIMER_END</name><argument_list>(<argument><expr><literal type="string">"trail/store_codebook"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>done</name>:</label>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>grouped_w</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TDB_CLOSE_FINAL</name><argument_list>(<argument><expr><name>grouped_r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>j128m_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gram_freqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>j128m_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codemap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wsign-compare"</cpp:literal></cpp:pragma>
    <expr_stmt><expr><call><name>JLFA</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>unigram_freqs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>

    <expr_stmt><expr><call><name>unlink</name><argument_list>(<argument><expr><name>grouped_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>field_cardinalities</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>read_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>fstats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>

<label><name>out_of_memory</name>:</label>
    <return>return <expr><name>TDB_ERR_NOMEM</name></expr>;</return>
</block_content>}</block></function>

</unit>
