<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/dsfmt/dSFMT.c"><comment type="block" format="doxygen">/**
 * @file dSFMT.c
 * @brief double precision SIMD-oriented Fast Mersenne Twister (dSFMT)
 * based on IEEE 754 format.
 *
 * @author Mutsuo Saito (Hiroshima University)
 * @author Makoto Matsumoto (Hiroshima University)
 *
 * Copyright (C) 2007,2008 Mutsuo Saito, Makoto Matsumoto and Hiroshima
 * University. All rights reserved.
 *
 * The new BSD License is applied to this software, see LICENSE.txt
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dSFMT-params.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dSFMT-common.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
<extern>extern <literal type="string">"C"</literal> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/** dsfmt internal state vector */</comment>
<decl_stmt><decl><type><name>dsfmt_t</name></type> <name>dsfmt_global_data</name></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** dsfmt mexp for check */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>dsfmt_mexp</name> <init>= <expr><name>DSFMT_MEXP</name></expr></init></decl>;</decl_stmt>

<comment type="block">/*----------------
  STATIC FUNCTIONS
  ----------------*/</comment>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>uint32_t</name></type> <name>ini_func1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>uint32_t</name></type> <name>ini_func2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_c1o2</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_c0o1</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_o0c1</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_o0o1</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type> <name>idxof</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>initial_mask</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>period_certification</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/** 1 in 64bit for sse2 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>union</name> <name>X128I_T</name></name></type> <name>sse2_int_one</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">1</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** 2.0 double for sse2 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>union</name> <name>X128D_T</name></name></type> <name>sse2_double_two</name> <init>= <expr><block>{<expr><block>{<expr><literal type="number">2.0</literal></expr>, <expr><literal type="number">2.0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<comment type="block" format="doxygen">/** -1.0 double for sse2 */</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>union</name> <name>X128D_T</name></name></type> <name>sse2_double_m_one</name> <init>= <expr><block>{<expr><block>{<expr><operator>-</operator><literal type="number">1.0</literal></expr>, <expr><operator>-</operator><literal type="number">1.0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * This function simulate a 32-bit array index overlapped to 64-bit
 * array of LITTLE ENDIAN in BIG ENDIAN machine.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>DSFMT_BIG_ENDIAN</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type> <name>idxof</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>i</name> <operator>^</operator> <literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>int</name></type> <name>idxof</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SSE2</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * This function converts the double precision floating point numbers which
 * distribute uniformly in the range [1, 2) to those which distribute uniformly
 * in the range [0, 1).
 * @param w 128bit stracture of double precision floating point numbers (I/O)
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>convert_c0o1</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>sd</name></name> <operator>=</operator> <call><name>_mm_add_pd</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>sd</name></name></expr></argument>, <argument><expr><name><name>sse2_double_m_one</name><operator>.</operator><name>d128</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function converts the double precision floating point numbers which
 * distribute uniformly in the range [1, 2) to those which distribute uniformly
 * in the range (0, 1].
 * @param w 128bit stracture of double precision floating point numbers (I/O)
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>convert_o0c1</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>sd</name></name> <operator>=</operator> <call><name>_mm_sub_pd</name><argument_list>(<argument><expr><name><name>sse2_double_two</name><operator>.</operator><name>d128</name></name></expr></argument>, <argument><expr><name><name>w</name><operator>-&gt;</operator><name>sd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function converts the double precision floating point numbers which
 * distribute uniformly in the range [1, 2) to those which distribute uniformly
 * in the range (0, 1).
 * @param w 128bit stracture of double precision floating point numbers (I/O)
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>convert_o0o1</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>si</name></name> <operator>=</operator> <call><name>_mm_or_si128</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>si</name></name></expr></argument>, <argument><expr><name><name>sse2_int_one</name><operator>.</operator><name>i128</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>sd</name></name> <operator>=</operator> <call><name>_mm_add_pd</name><argument_list>(<argument><expr><name><name>w</name><operator>-&gt;</operator><name>sd</name></name></expr></argument>, <argument><expr><name><name>sse2_double_m_one</name><operator>.</operator><name>d128</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="block">/* standard C and altivec */</comment>
<comment type="block" format="doxygen">/**
 * This function converts the double precision floating point numbers which
 * distribute uniformly in the range [1, 2) to those which distribute uniformly
 * in the range [0, 1).
 * @param w 128bit stracture of double precision floating point numbers (I/O)
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>convert_c0o1</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function converts the double precision floating point numbers which
 * distribute uniformly in the range [1, 2) to those which distribute uniformly
 * in the range (0, 1].
 * @param w 128bit stracture of double precision floating point numbers (I/O)
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>convert_o0c1</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0</literal> <operator>-</operator> <name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">2.0</literal> <operator>-</operator> <name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function converts the double precision floating point numbers which
 * distribute uniformly in the range [1, 2) to those which distribute uniformly
 * in the range (0, 1).
 * @param w 128bit stracture of double precision floating point numbers (I/O)
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>convert_o0o1</name><parameter_list>(<parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>w</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>|=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>w</name><operator>-&gt;</operator><name>d</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>-=</operator> <literal type="number">1.0</literal></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * This function fills the user-specified array with double precision
 * floating point pseudorandom numbers of the IEEE 754 format.
 * @param dsfmt dsfmt state vector.
 * @param array an 128-bit array to be filled by pseudorandom numbers.
 * @param size number of 128-bit pseudorandom numbers to be generated.
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_c1o2</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>w128_t</name></type> <name>lung</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lung</name> <operator>=</operator> <name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_POS1</name></expr>]</index></name></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name> <operator>-</operator> <name>DSFMT_POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>DSFMT_N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name> <operator>=</operator> <name>lung</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function fills the user-specified array with double precision
 * floating point pseudorandom numbers of the IEEE 754 format.
 * @param dsfmt dsfmt state vector.
 * @param array an 128-bit array to be filled by pseudorandom numbers.
 * @param size number of 128-bit pseudorandom numbers to be generated.
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_c0o1</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>w128_t</name></type> <name>lung</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lung</name> <operator>=</operator> <name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_POS1</name></expr>]</index></name></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name> <operator>-</operator> <name>DSFMT_POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_c0o1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>DSFMT_N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_c0o1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>convert_c0o1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name> <operator>=</operator> <name>lung</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function fills the user-specified array with double precision
 * floating point pseudorandom numbers of the IEEE 754 format.
 * @param dsfmt dsfmt state vector.
 * @param array an 128-bit array to be filled by pseudorandom numbers.
 * @param size number of 128-bit pseudorandom numbers to be generated.
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_o0o1</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>w128_t</name></type> <name>lung</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lung</name> <operator>=</operator> <name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_POS1</name></expr>]</index></name></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name> <operator>-</operator> <name>DSFMT_POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_o0o1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>DSFMT_N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_o0o1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>convert_o0o1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name> <operator>=</operator> <name>lung</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function fills the user-specified array with double precision
 * floating point pseudorandom numbers of the IEEE 754 format.
 * @param dsfmt dsfmt state vector.
 * @param array an 128-bit array to be filled by pseudorandom numbers.
 * @param size number of 128-bit pseudorandom numbers to be generated.
 */</comment>
<function><type><specifier>inline</specifier> <specifier>static</specifier> <name>void</name></type> <name>gen_rand_array_o0c1</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>w128_t</name> <modifier>*</modifier></type><name>array</name></decl></parameter>,
				       <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>w128_t</name></type> <name>lung</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lung</name> <operator>=</operator> <name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_POS1</name></expr>]</index></name></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name> <operator>-</operator> <name>DSFMT_POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_o0c1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">2</literal> <operator>*</operator> <name>DSFMT_N</name> <operator>-</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>j</name> <operator>+</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr><operator>,</operator> <expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>convert_o0c1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>size</name> <operator>-</operator> <name>DSFMT_N</name></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>convert_o0c1</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>array</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name> <operator>=</operator> <name>lung</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function represents a function used in the initialization
 * by init_by_array
 * @param x 32-bit integer
 * @return 32-bit integer
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ini_func1</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1664525UL</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function represents a function used in the initialization
 * by init_by_array
 * @param x 32-bit integer
 * @return 32-bit integer
 */</comment>
<function><type><specifier>static</specifier> <name>uint32_t</name></type> <name>ini_func2</name><parameter_list>(<parameter><decl><type><name>uint32_t</name></type> <name>x</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>x</name> <operator>^</operator> <operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">27</literal><operator>)</operator><operator>)</operator> <operator>*</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><literal type="number">1566083941UL</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function initializes the internal state array to fit the IEEE
 * 754 format.
 * @param dsfmt dsfmt state vector.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>initial_mask</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>psfmt</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>psfmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>psfmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>psfmt</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&amp;</operator> <name>DSFMT_LOW_MASK</name><operator>)</operator> <operator>|</operator> <name>DSFMT_HIGH_CONST</name></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function certificate the period of 2^{SFMT_MEXP}-1.
 * @param dsfmt dsfmt state vector.
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>period_certification</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>pcv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><name>DSFMT_PCV1</name></expr>, <expr><name>DSFMT_PCV2</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name><name>tmp</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>inner</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DSFMT_PCV2</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr></cpp:if>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>work</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>^</operator> <name>DSFMT_FIX1</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^</operator> <name>DSFMT_FIX2</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>inner</name> <operator>=</operator> <name><name>tmp</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>pcv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>inner</name> <operator>^=</operator> <name><name>tmp</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>&amp;</operator> <name><name>pcv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">32</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>&gt;&gt;=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>inner</name> <operator>^=</operator> <name>inner</name> <operator>&gt;&gt;</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>inner</name> <operator>&amp;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <comment type="block">/* check OK */</comment>
    <if_stmt><if>if <condition>(<expr><name>inner</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
	<return>return;</return>
    </block_content>}</block></if></if_stmt>
    <comment type="block">/* check NG, and modification */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><name>DSFMT_PCV2</name> <operator>&amp;</operator> <literal type="number">1</literal><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr></cpp:if>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>work</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">64</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>work</name> <operator>&amp;</operator> <name><name>pcv</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name><operator>.</operator><name><name>u</name><index>[<expr><name>i</name></expr>]</index></name> <operator>^=</operator> <name>work</name></expr>;</expr_stmt>
		<return>return;</return>
	    </block_content>}</block></if></if_stmt>
	    <expr_stmt><expr><name>work</name> <operator>=</operator> <name>work</name> <operator>&lt;&lt;</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	</block_content>}</block></for>
    </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <return>return;</return>
</block_content>}</block></function>

<comment type="block">/*----------------
  PUBLIC FUNCTIONS
  ----------------*/</comment>
<comment type="block" format="doxygen">/**
 * This function returns the identification string.  The string shows
 * the Mersenne exponent, and all parameters of this generator.
 * @return id string.
 */</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dsfmt_get_idstring</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>DSFMT_IDSTR</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function returns the minimum size of array used for \b
 * fill_array functions.
 * @return minimum size of array used for fill_array functions.
 */</comment>
<function><type><name>int</name></type> <name>dsfmt_get_min_array_size</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
    <return>return <expr><name>DSFMT_N64</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function fills the internal state array with double precision
 * floating point pseudorandom numbers of the IEEE 754 format.
 * @param dsfmt dsfmt state vector.
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_gen_rand_all</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>w128_t</name></type> <name>lung</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>lung</name> <operator>=</operator> <name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>,
		 <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_POS1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name> <operator>-</operator> <name>DSFMT_POS1</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>DSFMT_N</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><call><name>do_recursion</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>,
		     <argument><expr><operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>i</name> <operator>+</operator> <name>DSFMT_POS1</name> <operator>-</operator> <name>DSFMT_N</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lung</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><name>DSFMT_N</name></expr>]</index></name> <operator>=</operator> <name>lung</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function generates double precision floating point
 * pseudorandom numbers which distribute in the range [1, 2) to the
 * specified array[] by one call. The number of pseudorandom numbers
 * is specified by the argument \b size, which must be at least (SFMT_MEXP
 * / 128) * 2 and a multiple of two.  The function
 * get_min_array_size() returns this minimum size.  The generation by
 * this function is much faster than the following fill_array_xxx functions.
 *
 * For initialization, init_gen_rand() or init_by_array() must be called
 * before the first call of this function. This function can not be
 * used after calling genrand_xxx functions, without initialization.
 *
 * @param dsfmt dsfmt state vector.
 * @param array an array where pseudorandom numbers are filled
 * by this function.  The pointer to the array must be "aligned"
 * (namely, must be a multiple of 16) in the SIMD version, since it
 * refers to the address of a 128-bit integer.  In the standard C
 * version, the pointer is arbitrary.
 *
 * @param size the number of 64-bit pseudorandom integers to be
 * generated.  size must be a multiple of 2, and greater than or equal
 * to (SFMT_MEXP / 128) * 2.
 *
 * @note \b memalign or \b posix_memalign is available to get aligned
 * memory. Mac OSX doesn't have these functions, but \b malloc of OSX
 * returns the pointer to the aligned memory block.
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_fill_array_close1_open2</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>DSFMT_N64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gen_rand_array_c1o2</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>, <argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function generates double precision floating point
 * pseudorandom numbers which distribute in the range (0, 1] to the
 * specified array[] by one call. This function is the same as
 * fill_array_close1_open2() except the distribution range.
 *
 * @param dsfmt dsfmt state vector.
 * @param array an array where pseudorandom numbers are filled
 * by this function.
 * @param size the number of pseudorandom numbers to be generated.
 * see also \sa fill_array_close1_open2()
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_fill_array_open_close</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>DSFMT_N64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gen_rand_array_o0c1</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>, <argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function generates double precision floating point
 * pseudorandom numbers which distribute in the range [0, 1) to the
 * specified array[] by one call. This function is the same as
 * fill_array_close1_open2() except the distribution range.
 *
 * @param array an array where pseudorandom numbers are filled
 * by this function.
 * @param dsfmt dsfmt state vector.
 * @param size the number of pseudorandom numbers to be generated.
 * see also \sa fill_array_close1_open2()
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_fill_array_close_open</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>DSFMT_N64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gen_rand_array_c0o1</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>, <argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function generates double precision floating point
 * pseudorandom numbers which distribute in the range (0, 1) to the
 * specified array[] by one call. This function is the same as
 * fill_array_close1_open2() except the distribution range.
 *
 * @param dsfmt dsfmt state vector.
 * @param array an array where pseudorandom numbers are filled
 * by this function.
 * @param size the number of pseudorandom numbers to be generated.
 * see also \sa fill_array_close1_open2()
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_fill_array_open_open</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name><name>array</name><index>[]</index></name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>DSFMT_N64</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>gen_rand_array_o0o1</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>, <argument><expr><operator>(</operator><name>w128_t</name> <operator>*</operator><operator>)</operator><name>array</name></expr></argument>, <argument><expr><name>size</name> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#  <cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name><name>:</name><name>981</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="block" format="doxygen">/**
 * This function initializes the internal state array with a 32-bit
 * integer seed.
 * @param dsfmt dsfmt state vector.
 * @param seed a 32-bit integer used as the seed.
 * @param mexp caller's mersenne expornent
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_chk_init_gen_rand</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mexp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt</name></decl>;</decl_stmt>

    <comment type="block">/* make sure caller program is compiled with the same MEXP */</comment>
    <if_stmt><if>if <condition>(<expr><name>mexp</name> <operator>!=</operator> <name>dsfmt_mexp</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DSFMT_MEXP doesn't match with dSFMT.c\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>psfmt</name> <operator>=</operator> <operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>psfmt</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>(</operator><name>DSFMT_N</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>psfmt</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <literal type="number">1812433253UL</literal>
	    <operator>*</operator> <operator>(</operator><name><name>psfmt</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <operator>(</operator><name><name>psfmt</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>&gt;&gt;</operator> <literal type="number">30</literal><operator>)</operator><operator>)</operator> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>initial_mask</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>period_certification</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>DSFMT_N64</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This function initializes the internal state array,
 * with an array of 32-bit integers used as the seeds
 * @param dsfmt dsfmt state vector.
 * @param init_key the array of 32-bit integers, used as a seed.
 * @param key_length the length of init_key.
 * @param mexp caller's mersenne expornent
 */</comment>
<function><type><name>void</name></type> <name>dsfmt_chk_init_by_array</name><parameter_list>(<parameter><decl><type><name>dsfmt_t</name> <modifier>*</modifier></type><name>dsfmt</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name><name>init_key</name><index>[]</index></name></decl></parameter>,
			     <parameter><decl><type><name>int</name></type> <name>key_length</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>mexp</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>j</name></decl>, <decl><type ref="prev"/><name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>r</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>psfmt32</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>lag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>mid</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>DSFMT_N</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>	<comment type="block">/* pulmonary */</comment>

    <comment type="block">/* make sure caller program is compiled with the same MEXP */</comment>
    <if_stmt><if>if <condition>(<expr><name>mexp</name> <operator>!=</operator> <name>dsfmt_mexp</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"DSFMT_MEXP doesn't match with dSFMT.c\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">623</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">68</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">39</literal></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name>lag</name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>mid</name> <operator>=</operator> <operator>(</operator><name>size</name> <operator>-</operator> <name>lag</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>psfmt32</name> <operator>=</operator> <operator>&amp;</operator><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name><name>u32</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name></name></expr></argument>, <argument><expr><literal type="number">0x8b</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>key_length</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <name>key_length</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
	<expr_stmt><expr><name>count</name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ini_func1</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>mid</name> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name>
		  <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>mid</name> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>+=</operator> <name>key_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>count</name><operator>--</operator></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">1</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><operator>(</operator><name>j</name> <operator>&lt;</operator> <name>count</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>j</name> <operator>&lt;</operator> <name>key_length</name><operator>)</operator></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ini_func1</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name>
		      <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name>
		      <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>+=</operator> <name><name>init_key</name><index>[<expr><name>j</name></expr>]</index></name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ini_func1</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name>
		      <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name>
		      <operator>^</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>+=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>+=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <for>for <control>(<init><expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
	<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>ini_func2</name><argument_list>(<argument><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name>
		      <operator>+</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name>
		      <operator>+</operator> <name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>r</name> <operator>-=</operator> <name>i</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><operator>(</operator><name>i</name> <operator>+</operator> <name>mid</name> <operator>+</operator> <name>lag</name><operator>)</operator> <operator>%</operator> <name>size</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>^=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>psfmt32</name><index>[<expr><call><name>idxof</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>]</index></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>size</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>initial_mask</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>period_certification</name><argument_list>(<argument><expr><name>dsfmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dsfmt</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <name>DSFMT_N64</name></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:pragma>#  <cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>default</name><name>:</name><name>981</name><name>)</name></cpp:pragma>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__cplusplus</name></expr></argument>)</argument_list></call></expr></cpp:if>
</block_content>}</block></extern>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
