<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/tdb_multi_cursor.c">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"traildb.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdb_internal.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pqueue/pqueue.h"</cpp:file></cpp:include>

<comment type="block">/*
Multi-cursor merges events from K cursors (trails) in a single
stream of timestamp ordered events on the fly. Merging is done with
a simple priority queue (heap), implemented by the pqueue library.

A key feature of multi-cursor is that it performs merging in a
zero-copy fashion by relying on the event buffers of underlying
cursors. A downside of this performance optimization is that the
buffer/event lifetime needs to be managed carefully.

If the buffer of an underlying cursor is exhausted temporarily, the
cursor can't be refreshed right away since this would invalidate
the past events. Instead, the cursor is marked as dirty in
popped_node, so it can be reinstered when multi-cursor is called
the next time.
*/</comment>

<struct>struct <name>mcursor_node</name><block>{
    <decl_stmt><decl><type><name>pqueue_pri_t</name></type> <name>timestamp</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cursor</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>index</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>tdb_multi_cursor</name><block>{
    <comment type="block">/* priority queue */</comment>
    <decl_stmt><decl><type><name>pqueue_t</name> <modifier>*</modifier></type><name>queue</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>nodes</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>num_nodes</name></decl>;</decl_stmt>

    <comment type="block">/* node that needs to be reinserted on the next call */</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>popped_node</name></decl>;</decl_stmt>

    <comment type="block">/* returned event buffer */</comment>
    <decl_stmt><decl><type><name>tdb_multi_event</name></type> <name>current_event</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="block">/* pqueue callback functions */</comment>

<function><type><specifier>static</specifier> <name>int</name></type> <name>cmp_pri</name><parameter_list>(<parameter><decl><type><name>pqueue_pri_t</name></type> <name>next</name></decl></parameter>, <parameter><decl><type><name>pqueue_pri_t</name></type> <name>cur</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><name>next</name> <operator>&gt;</operator> <name>cur</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>pqueue_pri_t</name></type> <name>get_pri</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>timestamp</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_pri</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>pqueue_pri_t</name></type> <name>timestamp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>timestamp</name> <operator>=</operator> <name>timestamp</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>size_t</name></type> <name>get_pos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<return>return <expr><operator>(</operator><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>pos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>set_pos</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>pos</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><name>a</name><operator>)</operator><operator>-&gt;</operator><name>pos</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_entry</name><parameter_list>(<parameter><decl><type><name>FILE</name> <modifier>*</modifier></type><name>out</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>node</name> <init>= <expr><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><name>a</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>out</name></expr></argument>,
            <argument><expr><literal type="string">"node[%"</literal><name>PRIu64</name><literal type="string">"] timestamp %"</literal><name>PRIu64</name><literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name><name>node</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
            <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>tdb_multi_cursor_new</name><parameter_list>(<parameter><decl><type><name>tdb_cursor</name> <modifier>*</modifier><modifier>*</modifier></type><name>cursors</name></decl></parameter>,
                                                  <parameter><decl><type><name>uint64_t</name></type> <name>num_cursors</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_cursors</name> <operator>&gt;</operator> <name>SIZE_MAX</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>mc</name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>tdb_multi_cursor</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mc</name><operator>-&gt;</operator><name>nodes</name></name> <operator>=</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>num_cursors</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>mcursor_node</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>pqueue_init</name><argument_list>(<argument><expr><name>num_cursors</name></expr></argument>,
                                  <argument><expr><name>cmp_pri</name></expr></argument>,
                                  <argument><expr><name>get_pri</name></expr></argument>,
                                  <argument><expr><name>set_pri</name></expr></argument>,
                                  <argument><expr><name>get_pos</name></expr></argument>,
                                  <argument><expr><name>set_pos</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>num_nodes</name></name> <operator>=</operator> <name>num_cursors</name></expr>;</expr_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_cursors</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cursor</name> <operator>=</operator> <name><name>cursors</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdb_multi_cursor_reset</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>mc</name></expr>;</return>
<label><name>err</name>:</label>
    <expr_stmt><expr><call><name>tdb_multi_cursor_free</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
Reinitialize the priority queue after the state of the underlying cursors
has changed, e.g. after tdb_get_trail().
*/</comment>
<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_multi_cursor_reset</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>i</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pqueue_reset</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>mc</name><operator>-&gt;</operator><name>num_nodes</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>tdb_cursor_peek</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>cursor</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>event</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>timestamp</name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
            <comment type="block">/*
            we can ignore the return value of pqueue_insert since it
            won't need to call realloc()
            */</comment>
            <expr_stmt><expr><call><name>pqueue_insert</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block">/*
Reinsert exhausted cursor in the heap
(see the top of this file for an explanation)
*/</comment>
<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>reinsert_popped</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name></name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><call><name>tdb_cursor_peek</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>event</name></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>pqueue_insert</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block">/* Peek the next event to be returned */</comment>
<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>tdb_multi_event</name> <modifier>*</modifier></type><name>tdb_multi_cursor_peek</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>next_event</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>reinsert_popped</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><call><name>pqueue_peek</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>current_event</name><operator>.</operator><name>event</name></name> <operator>=</operator> <call><name>tdb_cursor_peek</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>current_event</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>current_event</name><operator>.</operator><name>cursor_idx</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

    <return>return <expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>current_event</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* Return the next event */</comment>
<function><type><name>TDB_EXPORT</name> <specifier>const</specifier> <name>tdb_multi_event</name> <modifier>*</modifier></type><name>tdb_multi_cursor_next</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>node</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>reinsert_popped</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>node</name> <operator>=</operator> <operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><call><name>pqueue_peek</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>node</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>current_event</name><operator>.</operator><name>event</name></name> <operator>=</operator> <call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>cursor</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>current_event</name><operator>.</operator><name>db</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>current_event</name><operator>.</operator><name>cursor_idx</name></name> <operator>=</operator> <name><name>node</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>num_events_left</name></name></expr>)</condition><block>{<block_content>
        <comment type="block">/*
        the event buffer of the cursor has remaining events,
        so we can just update the heap with the next timestamp
        */</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>next_event</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>tdb_event</name><operator>*</operator><operator>)</operator><name><name>node</name><operator>-&gt;</operator><name>cursor</name><operator>-&gt;</operator><name>next_event</name></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>pqueue_change_priority</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>next_event</name><operator>-&gt;</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
        <comment type="block">/*
        the event buffer of the cursor is empty. We don't know
        the next timestamp, so mark this cursor as dirty in popped_node
        (calling tdb_cursor_peek() would invalidate mc-&gt;current_event.event)
        */</comment>
        <expr_stmt><expr><call><name>pqueue_pop</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><operator>&amp;</operator><name><name>mc</name><operator>-&gt;</operator><name>current_event</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*
Return a batch of events. This is an optimized version of
tdb_multi_cursor_next()
*/</comment>
<function><type><name>TDB_EXPORT</name> <name>uint64_t</name></type> <name>tdb_multi_cursor_next_batch</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name></decl></parameter>,
                                                <parameter><decl><type><name>tdb_multi_event</name> <modifier>*</modifier></type><name>events</name></decl></parameter>,
                                                <parameter><decl><type><name>uint64_t</name></type> <name>max_events</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>reinsert_popped</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/*
    next batch relies on the following heuristic:
    Often an individual cursor contains a long run of events whose
    timestamp is smaller than those of any other cursor, e.g. if there is
    a cursor for each daily traildb.

    Updating the heap for every single event is expensive and unnecessary
    in this case. It suffices to update the heap only when we switch cursors.
    This logic is implemented by popping the current cursor and peeking the
    next one: We can consume the current cursor as long as its timestamps are
    smaller than that of the next cursor.
    */</comment>
    <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>max_events</name></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>current</name> <init>=
            <expr><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><call><name>pqueue_pop</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name><name>struct</name> <name>mcursor_node</name></name> <modifier>*</modifier></type><name>next</name> <init>=
            <expr><operator>(</operator>struct <name>mcursor_node</name><operator>*</operator><operator>)</operator><call><name>pqueue_peek</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>tdb_cursor</name> <modifier>*</modifier></type><name>cur</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>next_timestamp</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>is_last</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>cur</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>cursor</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <comment type="block">/* heap is empty - all cursors exhausted */</comment>
            <break>break;</break></block_content></block></else></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>next</name></expr>)</condition><block type="pseudo"><block_content>
            <comment type="block">/*
            consume the current cursor while timestamps are smaller than
            next_timestamp
            */</comment>
            <expr_stmt><expr><name>next_timestamp</name> <operator>=</operator> <name><name>next</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <comment type="block">/*
            no next timestamp - current is the last one. We can consume
            current until its end
            */</comment>
            <expr_stmt><expr><name>is_last</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition><block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>cur</name><operator>-&gt;</operator><name>num_events_left</name></name></expr>)</condition><block>{<block_content>
                <comment type="block">/* there are events left in the buffer */</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>tdb_event</name> <modifier>*</modifier></type><name>event</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>tdb_event</name><operator>*</operator><operator>)</operator><name><name>cur</name><operator>-&gt;</operator><name>next_event</name></name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>max_events</name> <operator>&amp;&amp;</operator>
                    <operator>(</operator><name>is_last</name> <operator>||</operator> <name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>&lt;=</operator> <name>next_timestamp</name><operator>)</operator></expr>)</condition><block>{<block_content>

                    <expr_stmt><expr><name><name>events</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>event</name> <operator>=</operator> <name>event</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>events</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>db</name> <operator>=</operator> <name><name>cur</name><operator>-&gt;</operator><name>state</name><operator>-&gt;</operator><name>db</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>events</name><index>[<expr><name>n</name></expr>]</index></name><operator>.</operator><name>cursor_idx</name> <operator>=</operator> <name><name>current</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><operator>++</operator><name>n</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>tdb_cursor_next</name><argument_list>(<argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if><else>else<block>{<block_content>
                    <comment type="block">/*
                    update the timestamp of the current cursor and
                    return it to the heap
                    */</comment>
                    <expr_stmt><expr><name><name>current</name><operator>-&gt;</operator><name>timestamp</name></name> <operator>=</operator> <name><name>event</name><operator>-&gt;</operator><name>timestamp</name></name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>pqueue_insert</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if><else>else<block>{<block_content>
                <comment type="block">/*
                no events left in the buffer, we must stop iterating
                to avoid the previous events from becoming invalid
                */</comment>
                <expr_stmt><expr><name><name>mc</name><operator>-&gt;</operator><name>popped_node</name></name> <operator>=</operator> <name>current</name></expr>;</expr_stmt>
                <goto>goto <name>done</name>;</goto>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>
    </block_content>}</block></while>
<label><name>done</name>:</label>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TDB_EXPORT</name> <name>void</name></type> <name>tdb_multi_cursor_free</name><parameter_list>(<parameter><decl><type><name>tdb_multi_cursor</name> <modifier>*</modifier></type><name>mc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>mc</name></expr>)</condition><block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pqueue_free</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>mc</name><operator>-&gt;</operator><name>nodes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>mc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
