<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/traildb/src/xxhash/xxhash.c"><comment type="block">/*
xxHash - Fast Hash algorithm
Copyright (C) 2012-2015, Yann Collet

BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following disclaimer
in the documentation and/or other materials provided with the
distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

You can contact the author at :
- xxHash source repository : https://github.com/Cyan4973/xxHash
*/</comment>


<comment type="block" format="doxygen">/**************************************
*  Tuning parameters
**************************************/</comment>
<comment type="block">/* XXH_FORCE_MEMORY_ACCESS
 * By default, access to unaligned memory is controlled by `memcpy()`, which is safe and portable.
 * Unfortunately, on some target/compiler combinations, the generated assembly is sub-optimal.
 * The below switch allow to select different access method for improved performance.
 * Method 0 (default) : use `memcpy()`. Safe and portable.
 * Method 1 : `__packed` statement. It depends on compiler extension (ie, not portable).
 *            This method is safe if your compiler supports it, and *generally* as fast or faster than `memcpy`.
 * Method 2 : direct access. This method is portable but violate C standard.
 *            It can generate buggy code on targets which generate assembly depending on alignment.
 *            But in some circumstances, it's the only known way to get the most performance (ie GCC + ARMv6)
 * See http://stackoverflow.com/a/32095106/646947 for details.
 * Prefer these methods in priority order (0 &gt; 1 &gt; 2)
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XXH_FORCE_MEMORY_ACCESS</name></cpp:ifndef>   <comment type="block">/* can be defined externally, on command line for example */</comment>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6J__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6K__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6Z__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6ZK__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_6T2__</name></expr></argument>)</argument_list></call> <operator>)</operator></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_FORCE_MEMORY_ACCESS</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:elif>#  <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__INTEL_COMPILER</name></expr></argument>)</argument_list></call> <operator>||</operator> \
  <operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_7__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_7A__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_7R__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_7M__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__ARM_ARCH_7S__</name></expr></argument>)</argument_list></call> <operator>)</operator><operator>)</operator></expr></cpp:elif>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_FORCE_MEMORY_ACCESS</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* XXH_ACCEPT_NULL_INPUT_POINTER :
 * If the input pointer is a null pointer, xxHash default behavior is to trigger a memory access error, since it is a bad pointer.
 * When this option is enabled, xxHash output for null input pointers will be the same as a null-length input.
 * By default, this option is disabled. To enable it, uncomment below define :
 */</comment>
<comment type="block">/* #define XXH_ACCEPT_NULL_INPUT_POINTER 1 */</comment>

<comment type="block">/* XXH_FORCE_NATIVE_FORMAT :
 * By default, xxHash library provides endian-independant Hash values, based on little-endian convention.
 * Results are therefore identical for little-endian and big-endian CPU.
 * This comes at a performance cost for big-endian CPU, since some swapping is required to emulate little-endian format.
 * Should endian-independance be of no importance for your application, you may set the #define below to 1,
 * to improve speed for Big-endian CPU.
 * This option has no impact on Little_Endian CPU.
 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_FORCE_NATIVE_FORMAT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<comment type="block">/* XXH_USELESS_ALIGN_BRANCH :
 * This is a minor performance trick, only useful with lots of very small keys.
 * It means : don't make a test between aligned/unaligned, because performance will be the same.
 * It saves one initial branch per hash.
 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__i386</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_M_X64</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_USELESS_ALIGN_BRANCH</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen">/**************************************
*  Compiler Specific Options
***************************************/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_MSC_VER</name></cpp:ifdef>    <comment type="block">/* Visual Studio */</comment>
<cpp:pragma>#  <cpp:directive>pragma</cpp:directive> <name>warning</name><name>(</name><name>disable</name> <name>:</name> <name>4127</name><name>)</name></cpp:pragma>      <comment type="block">/* disable: C4127: conditional expression is constant */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>static __forceinline</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>   <comment type="block">/* C99 */</comment>
<cpp:ifdef>#    <cpp:directive>ifdef</cpp:directive> <name>__GNUC__</name></cpp:ifdef>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>static inline __attribute__((always_inline))</cpp:value></cpp:define>
<cpp:else>#    <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#      <cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>static inline</cpp:value></cpp:define>
<cpp:endif>#    <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <cpp:macro><name>FORCE_INLINE</name></cpp:macro> <cpp:value>static</cpp:value></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* __STDC_VERSION__ */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen">/**************************************
*  Includes &amp; Memory related functions
***************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"xxhash.h"</cpp:file></cpp:include>
<comment type="block">/* Modify the local functions below should you wish to use some other memory routines */</comment>
<comment type="block">/* for malloc(), free() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>XXH_malloc</name><parameter_list>(<parameter><decl><type><name>size_t</name></type> <name>s</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type>  <name>XXH_free</name>  <parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list>  <block>{<block_content> <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<comment type="block">/* for memcpy() */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>XXH_memcpy</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>dest</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>src</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dest</name></expr></argument>,<argument><expr><name>src</name></expr></argument>,<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>


<comment type="block" format="doxygen">/**************************************
*  Basic Types
***************************************/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>__STDC_VERSION__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>__STDC_VERSION__</name> <operator>&gt;=</operator> <literal type="number">199901L</literal></expr></cpp:if>   <comment type="block">/* C99 */</comment>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;stdint.h&gt;</cpp:file></cpp:include>
  <typedef>typedef <type><name>uint8_t</name></type>  <name>BYTE</name>;</typedef>
  <typedef>typedef <type><name>uint16_t</name></type> <name>U16</name>;</typedef>
  <typedef>typedef <type><name>uint32_t</name></type> <name>U32</name>;</typedef>
  <typedef>typedef  <type><name>int32_t</name></type> <name>S32</name>;</typedef>
  <typedef>typedef <type><name>uint64_t</name></type> <name>U64</name>;</typedef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <typedef>typedef <type><name>unsigned</name> <name>char</name></type>      <name>BYTE</name>;</typedef>
  <typedef>typedef <type><name>unsigned</name> <name>short</name></type>     <name>U16</name>;</typedef>
  <typedef>typedef <type><name>unsigned</name> <name>int</name></type>       <name>U32</name>;</typedef>
  <typedef>typedef   <type><name>signed</name> <name>int</name></type>       <name>S32</name>;</typedef>
  <typedef>typedef <type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>U64</name>;</typedef>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_FORCE_MEMORY_ACCESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XXH_FORCE_MEMORY_ACCESS</name><operator>==</operator><literal type="number">2</literal><operator>)</operator><operator>)</operator></expr></cpp:if>

<comment type="block">/* Force direct memory access. Only works on CPU which support unaligned memory access in hardware */</comment>
<function><type><specifier>static</specifier> <name>U32</name></type> <name>XXH_read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator> <name>memPtr</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>U64</name></type> <name>XXH_read64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>U64</name><operator>*</operator><operator>)</operator> <name>memPtr</name></expr>;</return> </block_content>}</block></function>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><operator>(</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_FORCE_MEMORY_ACCESS</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>XXH_FORCE_MEMORY_ACCESS</name><operator>==</operator><literal type="number">1</literal><operator>)</operator><operator>)</operator></expr></cpp:elif>

<comment type="block">/* __pack instructions are safer, but compiler specific, hence potentially problematic for some compilers */</comment>
<comment type="block">/* currently only defined for gcc and icc */</comment>
<typedef>typedef <type><union>union <block>{ <decl_stmt><decl><type><name>U32</name></type> <name>u32</name></decl>;</decl_stmt> <decl_stmt><decl><type><name>U64</name></type> <name>u64</name></decl>;</decl_stmt> }</block></union></type> <name>__attribute__</name>((<name>packed</name>)) <name>unalign</name>;</typedef>

<function><type><specifier>static</specifier> <name>U32</name></type> <name>XXH_read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unalign</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>u32</name></expr>;</return> </block_content>}</block></function>
<function><type><specifier>static</specifier> <name>U64</name></type> <name>XXH_read64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>unalign</name><operator>*</operator><operator>)</operator><name>ptr</name><operator>)</operator><operator>-&gt;</operator><name>u64</name></expr>;</return> </block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<comment type="block">/* portable and safe solution. Generally efficient.
 * see : http://stackoverflow.com/a/32095106/646947
 */</comment>

<function><type><specifier>static</specifier> <name>U32</name></type> <name>XXH_read32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U32</name></type> <name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>memPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>U64</name></type> <name>XXH_read64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>memPtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>U64</name></type> <name>val</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>val</name></expr></argument>, <argument><expr><name>memPtr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>val</name></expr>;</return>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// XXH_FORCE_DIRECT_MEMORY_ACCESS</comment>


<comment type="block" format="doxygen">/******************************************
*  Compiler-specific Functions and Macros
******************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCC_VERSION</name></cpp:macro> <cpp:value>(__GNUC__ * 100 + __GNUC_MINOR__)</cpp:value></cpp:define>

<comment type="block">/* Note : although _rotl exists for minGW (GCC under windows), performance seems poor */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_rotl(x,r)</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>_rotl64(x,r)</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl32</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &lt;&lt; r) | (x &gt;&gt; (32 - r)))</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_rotl64</name><parameter_list>(<parameter><type><name>x</name></type></parameter>,<parameter><type><name>r</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((x &lt;&lt; r) | (x &gt;&gt; (64 - r)))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:if>     <comment type="block">/* Visual Studio */</comment>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_swap32</name></cpp:macro> <cpp:value>_byteswap_ulong</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_swap64</name></cpp:macro> <cpp:value>_byteswap_uint64</cpp:value></cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>GCC_VERSION</name> <operator>&gt;=</operator> <literal type="number">403</literal></expr></cpp:elif>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_swap32</name></cpp:macro> <cpp:value>__builtin_bswap32</cpp:value></cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_swap64</name></cpp:macro> <cpp:value>__builtin_bswap64</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><specifier>static</specifier> <name>U32</name></type> <name>XXH_swap32</name> <parameter_list>(<parameter><decl><type><name>U32</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return  <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff000000</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff0000</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator>  <literal type="number">8</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000ff00</literal> <operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000000ff</literal> <operator>)</operator></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>U64</name></type> <name>XXH_swap64</name> <parameter_list>(<parameter><decl><type><name>U64</name></type> <name>x</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return  <expr><operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0xff00000000000000ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00ff000000000000ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000ff0000000000ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&lt;&lt;</operator> <literal type="number">8</literal><operator>)</operator>  <operator>&amp;</operator> <literal type="number">0x000000ff00000000ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">8</literal><operator>)</operator>  <operator>&amp;</operator> <literal type="number">0x00000000ff000000ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">24</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x0000000000ff0000ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">40</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x000000000000ff00ULL</literal><operator>)</operator> <operator>|</operator>
            <operator>(</operator><operator>(</operator><name>x</name> <operator>&gt;&gt;</operator> <literal type="number">56</literal><operator>)</operator> <operator>&amp;</operator> <literal type="number">0x00000000000000ffULL</literal><operator>)</operator></expr>;</return>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen">/***************************************
*  Architecture Macros
***************************************/</comment>
<typedef>typedef <type><enum>enum <block>{ <decl><name>XXH_bigEndian</name><init>=<expr><literal type="number">0</literal></expr></init></decl>, <decl><name>XXH_littleEndian</name><init>=<expr><literal type="number">1</literal></expr></init></decl> }</block></enum></type> <name>XXH_endianess</name>;</typedef>

<comment type="block">/* XXH_CPU_LITTLE_ENDIAN can be defined externally, for example one the compiler command line */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>XXH_CPU_LITTLE_ENDIAN</name></cpp:ifndef>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>one</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<cpp:define>#   <cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_CPU_LITTLE_ENDIAN</name></cpp:macro>   <cpp:value>(*(const char*)(&amp;one))</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block" format="doxygen">/*****************************
*  Memory reads
*****************************/</comment>
<typedef>typedef <type><enum>enum <block>{ <decl><name>XXH_aligned</name></decl>, <decl><name>XXH_unaligned</name></decl> }</block></enum></type> <name>XXH_alignment</name>;</typedef>

<function><type><name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH_readLE32_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>XXH_alignment</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>align</name><operator>==</operator><name>XXH_unaligned</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><name>endian</name><operator>==</operator><name>XXH_littleEndian</name></expr> ?</condition><then> <expr><call><name>XXH_read32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>XXH_swap32</name><argument_list>(<argument><expr><call><name>XXH_read32</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><name>endian</name><operator>==</operator><name>XXH_littleEndian</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>ptr</name></expr> </then><else>: <expr><call><name>XXH_swap32</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>U32</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH_readLE32</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>XXH_readLE32_align</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>U64</name></type> <name>XXH_readLE64_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>XXH_alignment</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>align</name><operator>==</operator><name>XXH_unaligned</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><name>endian</name><operator>==</operator><name>XXH_littleEndian</name></expr> ?</condition><then> <expr><call><name>XXH_read64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>XXH_swap64</name><argument_list>(<argument><expr><call><name>XXH_read64</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><ternary><condition><expr><name>endian</name><operator>==</operator><name>XXH_littleEndian</name></expr> ?</condition><then> <expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>U64</name><operator>*</operator><operator>)</operator><name>ptr</name></expr> </then><else>: <expr><call><name>XXH_swap64</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>U64</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>U64</name></type> <name>XXH_readLE64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>ptr</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>XXH_readLE64_align</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/***************************************
*  Macros
***************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_STATIC_ASSERT</name><parameter_list>(<parameter><type><name>c</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>{ enum { XXH_static_assert = 1/(!!(c)) }; }</cpp:value></cpp:define>    <comment type="block">/* use only *after* variable declarations */</comment>


<comment type="block" format="doxygen">/***************************************
*  Constants
***************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_1</name></cpp:macro>   <cpp:value>2654435761U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_2</name></cpp:macro>   <cpp:value>2246822519U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_3</name></cpp:macro>   <cpp:value>3266489917U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_4</name></cpp:macro>    <cpp:value>668265263U</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME32_5</name></cpp:macro>    <cpp:value>374761393U</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME64_1</name></cpp:macro> <cpp:value>11400714785074694791ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME64_2</name></cpp:macro> <cpp:value>14029467366897019727ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME64_3</name></cpp:macro>  <cpp:value>1609587929392839161ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME64_4</name></cpp:macro>  <cpp:value>9650029242287828579ULL</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRIME64_5</name></cpp:macro>  <cpp:value>2870177450012600261ULL</cpp:value></cpp:define>


<comment type="block" format="doxygen">/*****************************
*  Simple Hash Functions
*****************************/</comment>
<function><type><name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH32_endian_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>U32</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>XXH_alignment</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>h32</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_get32bits</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XXH_readLE32_align(p, endian, align)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XXH_ACCEPT_NULL_INPUT_POINTER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>p</name><operator>==</operator><name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>len</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bEnd</name><operator>=</operator><name>p</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">16</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>len</name><operator>&gt;=</operator><literal type="number">16</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v1</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME32_1</name> <operator>+</operator> <name>PRIME32_2</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v2</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME32_2</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v3</name> <init>= <expr><name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v4</name> <init>= <expr><name>seed</name> <operator>-</operator> <name>PRIME32_1</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>limit</name></expr>)</condition>;</do>

        <expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name>  <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><name>U32</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>p</name><operator>+</operator><literal type="number">4</literal><operator>&lt;=</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name> <operator>+=</operator> <call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h32</name>  <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_4</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><name>p</name><operator>&lt;</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_1</name></expr> ;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

    <return>return <expr><name>h32</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>XXH32</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="block">/* Simple version, good for code maintenance, but unfortunately slow for small inputs */</comment>
    XXH32_state_t state;
    XXH32_reset(&amp;state, seed);
    XXH32_update(&amp;state, input, len);
    return XXH32_digest(&amp;state);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_USELESS_ALIGN_BRANCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>input</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>   <comment type="block">/* Input is 4-bytes aligned, leverage the speed benefit */</comment>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>, <argument><expr><name>XXH_aligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>, <argument><expr><name>XXH_aligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH32_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>FORCE_INLINE</name> <name>U64</name></type> <name>XXH64_endian_align</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>U64</name></type> <name>seed</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>, <parameter><decl><type><name>XXH_alignment</name></type> <name>align</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>h64</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>XXH_get64bits</name><parameter_list>(<parameter><type><name>p</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>XXH_readLE64_align(p, endian, align)</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XXH_ACCEPT_NULL_INPUT_POINTER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>p</name><operator>==</operator><name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>len</name><operator>=</operator><literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bEnd</name><operator>=</operator><name>p</name><operator>=</operator><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name>size_t</name><operator>)</operator><literal type="number">32</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><name>len</name><operator>&gt;=</operator><literal type="number">32</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v1</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_2</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v2</name> <init>= <expr><name>seed</name> <operator>+</operator> <name>PRIME64_2</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v3</name> <init>= <expr><name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v4</name> <init>= <expr><name>seed</name> <operator>-</operator> <name>PRIME64_1</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>XXH_get64bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>XXH_get64bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>XXH_get64bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>XXH_get64bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>limit</name></expr>)</condition>;</do>

        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name> <operator>*</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name> <operator>*</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name> <operator>*</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name> <operator>*</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>h64</name>  <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME64_5</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>h64</name> <operator>+=</operator> <operator>(</operator><name>U64</name><operator>)</operator> <name>len</name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>p</name><operator>+</operator><literal type="number">8</literal><operator>&lt;=</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>U64</name></type> <name>k1</name> <init>= <expr><call><name>XXH_get64bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>k1</name></expr></argument>,<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>h64</name></expr></argument>,<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>p</name><operator>+</operator><literal type="number">4</literal><operator>&lt;=</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <operator>(</operator><name>U64</name><operator>)</operator><operator>(</operator><call><name>XXH_get32bits</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>h64</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name> <operator>+</operator> <name>PRIME64_3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>p</name><operator>&lt;</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME64_5</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>h64</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>h64</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>h64</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>*=</operator> <name>PRIME64_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>h64</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

    <return>return <expr><name>h64</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>XXH64</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    <comment type="block">/* Simple version, good for code maintenance, but unfortunately slow for small inputs */</comment>
    XXH64_state_t state;
    XXH64_reset(&amp;state, seed);
    XXH64_update(&amp;state, input, len);
    return XXH64_digest(&amp;state);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>XXH_USELESS_ALIGN_BRANCH</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>size_t</name><operator>)</operator><name>input</name><operator>)</operator> <operator>&amp;</operator> <literal type="number">7</literal><operator>)</operator><operator>==</operator><literal type="number">0</literal></expr>)</condition>   <comment type="block">/* Input is aligned, let's leverage the speed advantage */</comment>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><call><name>XXH64_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>, <argument><expr><name>XXH_aligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <return>return <expr><call><name>XXH64_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>, <argument><expr><name>XXH_aligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH64_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH64_endian_align</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>seed</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>, <argument><expr><name>XXH_unaligned</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="block" format="doxygen">/****************************************************
*  Advanced Hash Functions
****************************************************/</comment>

<comment type="block" format="doxygen">/*** Allocation ***/</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>U64</name></type> <name>total_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>seed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>v1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>v2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>v3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>v4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name><name>mem32</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* defined as U32 for alignment */</comment>
    <decl_stmt><decl><type><name>U32</name></type> <name>memsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>XXH_istate32_t</name>;</typedef>

<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>U64</name></type> <name>total_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>seed</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>v1</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>v2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>v3</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>v4</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name><name>mem64</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>   <comment type="block">/* defined as U64 for alignment */</comment>
    <decl_stmt><decl><type><name>U32</name></type> <name>memsize</name></decl>;</decl_stmt>
}</block></struct></type> <name>XXH_istate64_t</name>;</typedef>


<function><type><name>XXH32_state_t</name><modifier>*</modifier></type> <name>XXH32_createState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>XXH_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XXH32_state_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XXH_istate32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* A compilation error here means XXH32_state_t is not large enough */</comment>
    <return>return <expr><operator>(</operator><name>XXH32_state_t</name><operator>*</operator><operator>)</operator><call><name>XXH_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XXH32_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>XXH_errorcode</name></type> <name>XXH32_freeState</name><parameter_list>(<parameter><decl><type><name>XXH32_state_t</name><modifier>*</modifier></type> <name>statePtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>XXH_free</name><argument_list>(<argument><expr><name>statePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XXH64_state_t</name><modifier>*</modifier></type> <name>XXH64_createState</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>XXH_STATIC_ASSERT</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XXH64_state_t</name></expr></argument>)</argument_list></sizeof> <operator>&gt;=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>XXH_istate64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* A compilation error here means XXH64_state_t is not large enough */</comment>
    <return>return <expr><operator>(</operator><name>XXH64_state_t</name><operator>*</operator><operator>)</operator><call><name>XXH_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>XXH64_state_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>XXH_errorcode</name></type> <name>XXH64_freeState</name><parameter_list>(<parameter><decl><type><name>XXH64_state_t</name><modifier>*</modifier></type> <name>statePtr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>XXH_free</name><argument_list>(<argument><expr><name>statePtr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>


<comment type="block" format="doxygen">/*** Hash feed ***/</comment>

<function><type><name>XXH_errorcode</name></type> <name>XXH32_reset</name><parameter_list>(<parameter><decl><type><name>XXH32_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_istate32_t</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>XXH_istate32_t</name><operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_1</name> <operator>+</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>seed</name> <operator>-</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XXH_errorcode</name></type> <name>XXH64_reset</name><parameter_list>(<parameter><decl><type><name>XXH64_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>seed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_istate64_t</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>XXH_istate64_t</name><operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>=</operator> <name>seed</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>seed</name> <operator>+</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>seed</name> <operator>-</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>FORCE_INLINE</name> <name>XXH_errorcode</name></type> <name>XXH32_update_endian</name> <parameter_list>(<parameter><decl><type><name>XXH32_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_istate32_t</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>XXH_istate32_t</name> <operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XXH_ACCEPT_NULL_INPUT_POINTER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>input</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>XXH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">16</literal></expr>)</condition>   <comment type="block">/* fill in tmp buffer */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>mem32</name></name><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+=</operator> <operator>(</operator><name>U32</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
        <return>return <expr><name>XXH_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>)</condition>   <comment type="block">/* some data left from previous update */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>mem32</name></name><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">16</literal><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>U32</name><modifier>*</modifier></type> <name>p32</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>mem32</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p32</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p32</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">16</literal><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;=</operator> <name>bEnd</name><operator>-</operator><literal type="number">16</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v1</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v2</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v3</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U32</name></type> <name>v4</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>limit</name></expr>)</condition>;</do>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>mem32</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bEnd</name><operator>-</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>bEnd</name><operator>-</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XXH_errorcode</name></type> <name>XXH32_update</name> <parameter_list>(<parameter><decl><type><name>XXH32_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH32_update_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH32_update_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>FORCE_INLINE</name> <name>U32</name></type> <name>XXH32_digest_endian</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XXH32_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>XXH_istate32_t</name><modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>XXH_istate32_t</name><operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>mem32</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>bEnd</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>state</name><operator>-&gt;</operator><name>mem32</name></name><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U32</name></type> <name>h32</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>&gt;=</operator> <literal type="number">16</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name>  <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>+</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><name>U32</name><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>p</name><operator>+</operator><literal type="number">4</literal><operator>&lt;=</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name> <operator>+=</operator> <call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h32</name>  <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><name>p</name><operator>&lt;</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h32</name> <operator>+=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME32_5</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h32</name> <operator>=</operator> <call><name>XXH_rotl32</name><argument_list>(<argument><expr><name>h32</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME32_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">13</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>*=</operator> <name>PRIME32_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h32</name> <operator>^=</operator> <name>h32</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr>;</expr_stmt>

    <return>return <expr><name>h32</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>int</name></type> <name>XXH32_digest</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XXH32_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH32_digest_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH32_digest_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>FORCE_INLINE</name> <name>XXH_errorcode</name></type> <name>XXH64_update_endian</name> <parameter_list>(<parameter><decl><type><name>XXH64_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_istate64_t</name> <modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><name>XXH_istate64_t</name> <operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name>input</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>bEnd</name> <init>= <expr><name>p</name> <operator>+</operator> <name>len</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>XXH_ACCEPT_NULL_INPUT_POINTER</name></cpp:ifdef>
    <if_stmt><if>if <condition>(<expr><name>input</name><operator>==</operator><name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>XXH_ERROR</name></expr>;</return></block_content></block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+</operator> <name>len</name> <operator>&lt;</operator> <literal type="number">32</literal></expr>)</condition>   <comment type="block">/* fill in tmp buffer */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>mem64</name></name><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>+=</operator> <operator>(</operator><name>U32</name><operator>)</operator><name>len</name></expr>;</expr_stmt>
        <return>return <expr><name>XXH_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>)</condition>   <comment type="block">/* some data left from previous update */</comment>
    <block>{<block_content>
        <expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>mem64</name></name><operator>)</operator> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">32</literal><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>U64</name><modifier>*</modifier></type> <name>p64</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>mem64</name></name></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p64</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p64</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p64</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p64</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p64</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p64</name><operator>++</operator></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p64</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p64</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">32</literal><operator>-</operator><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name><operator>+</operator><literal type="number">32</literal> <operator>&lt;=</operator> <name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier> <specifier>const</specifier></type> <name>limit</name> <init>= <expr><name>bEnd</name> <operator>-</operator> <literal type="number">32</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v1</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v2</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v3</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v4</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <expr_stmt><expr><name>v1</name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>+=</operator> <call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>p</name><operator>&lt;=</operator><name>limit</name></expr>)</condition>;</do>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name> <operator>=</operator> <name>v1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name> <operator>=</operator> <name>v2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name> <operator>=</operator> <name>v3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name> <operator>=</operator> <name>v4</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>&lt;</operator> <name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>XXH_memcpy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>mem64</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>bEnd</name><operator>-</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>memsize</name></name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>bEnd</name><operator>-</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>XXH_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>XXH_errorcode</name></type> <name>XXH64_update</name> <parameter_list>(<parameter><decl><type><name>XXH64_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH64_update_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH64_update_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>input</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>



<function><type><name>FORCE_INLINE</name> <name>U64</name></type> <name>XXH64_digest_endian</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XXH64_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>, <parameter><decl><type><name>XXH_endianess</name></type> <name>endian</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>XXH_istate64_t</name> <modifier>*</modifier></type> <name>state</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>XXH_istate64_t</name> <operator>*</operator><operator>)</operator> <name>state_in</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name> <modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>mem64</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BYTE</name><modifier>*</modifier></type> <name>bEnd</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>BYTE</name><operator>*</operator><operator>)</operator><name><name>state</name><operator>-&gt;</operator><name>mem64</name></name> <operator>+</operator> <name><name>state</name><operator>-&gt;</operator><name>memsize</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>U64</name></type> <name>h64</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>total_len</name></name> <operator>&gt;=</operator> <literal type="number">32</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>U64</name></type> <name>v1</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v1</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v2</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v2</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v3</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v3</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>U64</name></type> <name>v4</name> <init>= <expr><name><name>state</name><operator>-&gt;</operator><name>v4</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v1</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v1</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v1</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name><operator>*</operator><name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v2</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v2</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name><operator>*</operator><name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v3</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v3</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v3</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name><operator>*</operator><name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>v4</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>v4</name></expr></argument>, <argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>v4</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>v4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <name>h64</name><operator>*</operator><name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name>h64</name>  <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>seed</name></name> <operator>+</operator> <name>PRIME64_5</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>h64</name> <operator>+=</operator> <operator>(</operator><name>U64</name><operator>)</operator> <name><name>state</name><operator>-&gt;</operator><name>total_len</name></name></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>p</name><operator>+</operator><literal type="number">8</literal><operator>&lt;=</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>U64</name></type> <name>k1</name> <init>= <expr><call><name>XXH_readLE64</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>k1</name></expr></argument>,<argument><expr><literal type="number">31</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k1</name> <operator>*=</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>k1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>h64</name></expr></argument>,<argument><expr><literal type="number">27</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_1</name> <operator>+</operator> <name>PRIME64_4</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">8</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>p</name><operator>+</operator><literal type="number">4</literal><operator>&lt;=</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <operator>(</operator><name>U64</name><operator>)</operator><operator>(</operator><call><name>XXH_readLE32</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>endian</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>*</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>h64</name></expr></argument>, <argument><expr><literal type="number">23</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_2</name> <operator>+</operator> <name>PRIME64_3</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>+=</operator><literal type="number">4</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <while>while <condition>(<expr><name>p</name><operator>&lt;</operator><name>bEnd</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>h64</name> <operator>^=</operator> <operator>(</operator><operator>*</operator><name>p</name><operator>)</operator> <operator>*</operator> <name>PRIME64_5</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>h64</name> <operator>=</operator> <call><name>XXH_rotl64</name><argument_list>(<argument><expr><name>h64</name></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>*</operator> <name>PRIME64_1</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>h64</name> <operator>&gt;&gt;</operator> <literal type="number">33</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>*=</operator> <name>PRIME64_2</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>h64</name> <operator>&gt;&gt;</operator> <literal type="number">29</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>*=</operator> <name>PRIME64_3</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>h64</name> <operator>^=</operator> <name>h64</name> <operator>&gt;&gt;</operator> <literal type="number">32</literal></expr>;</expr_stmt>

    <return>return <expr><name>h64</name></expr>;</return>
</block_content>}</block></function>


<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>XXH64_digest</name> <parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XXH64_state_t</name><modifier>*</modifier></type> <name>state_in</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>XXH_endianess</name></type> <name>endian_detected</name> <init>= <expr><operator>(</operator><name>XXH_endianess</name><operator>)</operator><name>XXH_CPU_LITTLE_ENDIAN</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>endian_detected</name><operator>==</operator><name>XXH_littleEndian</name><operator>)</operator> <operator>||</operator> <name>XXH_FORCE_NATIVE_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH64_digest_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>XXH_littleEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <return>return <expr><call><name>XXH64_digest_endian</name><argument_list>(<argument><expr><name>state_in</name></expr></argument>, <argument><expr><name>XXH_bigEndian</name></expr></argument>)</argument_list></call></expr>;</return></block_content></block></else></if_stmt>
</block_content>}</block></function>


</unit>
