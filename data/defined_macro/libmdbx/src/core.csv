id,name,value
45a6fc38-c932-4727-86a3-055d31f7986d,UNALIGNED_PEEK_8,
2a90c855-e7d9-4579-8842-16a1f7d374d0,UNALIGNED_POKE_8,
ec12a8a8-a62f-4eb6-952e-85194b91f58f,UNALIGNED_PEEK_16,
add9e95a-3bed-4905-86f7-cde18beb39af,UNALIGNED_POKE_16,
4c9e7c5f-051c-4d9b-89f1-aa7b4350c92f,UNALIGNED_PEEK_32,
20c22c81-f351-4eb4-b157-333928df8720,UNALIGNED_POKE_32,
49526d69-c803-4f80-8d7b-5b053efc2f61,UNALIGNED_PEEK_64,
3efe360a-7e7b-4266-a7da-237b08f9a8f2,UNALIGNED_POKE_64,
799609c7-c0ff-46ef-88aa-7feacb8d224d,NODESIZE,"offsetof(MDBX_node, mn_data)"
39fd86f3-1806-4303-aab7-cdc112aee2ff,PAGEROOM,((pagesize)-PAGEHDRSZ)
67637886-b8aa-4fee-b3bb-102c725ddf34,EVEN_FLOOR,((n) & ~(size_t)1)
70fad3b6-f609-4f58-9801-90bd4fbb48b4,BRANCH_NODE_MAX,"(EVEN_FLOOR((PAGEROOM(pagesize) - sizeof(indx_t) - NODESIZE) / (3 - 1) -     \
              sizeof(indx_t)))"
860f8c7e-7b8b-4841-a8e0-19038fceb79f,LEAF_NODE_MAX,(EVEN_FLOOR(PAGEROOM(pagesize) / 2) - sizeof(indx_t))
23c2a888-f12e-4b69-8274-0cd16bcda5c1,MAX_GC1OVPAGE,(PAGEROOM(pagesize) / sizeof(pgno_t) - 1)
46033b2d-3d3f-42e8-aa3d-c7cd25d40c43,SHIFT_INTEGERDUP_TO_INTEGERKEY,2
ea20d0c7-1cc4-4ec9-b990-7fbe57f141c0,SHIFT_REVERSEDUP_TO_REVERSEKEY,5
a6aa5879-69f2-48e3-974a-ca5fa6ca5932,atomic_sub32,"atomic_add32(p, 0 - (v))"
8f671d91-de64-4da5-abec-9c40b90279c2,RTHC_INITIAL_LIMIT,1
f047607a-1cff-4a4d-a94c-f08e1f742ec7,RTHC_INITIAL_LIMIT,16
8e1f071e-a6c1-42ed-a6eb-e186655aa824,MDBX_THREAD_RTHC_ZERO,0
072330a9-84bd-4166-b2c0-adb65c2a0e37,MDBX_THREAD_RTHC_REGISTERED,1
c9fd1da6-885f-43f4-8f92-f812b16ff431,MDBX_THREAD_RTHC_COUNTED,2
c205c029-1628-4777-9db5-0807eb15a7d2,RTHC_ENVLIST_END,((MDBX_env *)((uintptr_t)50459))
6f0134ad-85c2-41b8-b507-5accfeda9e5b,SORT_CMP_SWAP,"do {                                                                         \
    const TYPE swap_tmp = (a);                                                 \
    const bool swap_cmp = CMP(swap_tmp, b);                                    \
    (a) = swap_cmp ? swap_tmp : b;                                             \
    (b) = swap_cmp ? b : swap_tmp;                                             \
  } while (0)"
5401df26-ad50-4246-b537-a1dcea62aeb2,SORT_NETWORK_3,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
  } while (0)"
1665dc0e-e2e1-42b9-a85f-206a08dec5be,SORT_NETWORK_4,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
  } while (0)"
e94e630b-6f32-4a5c-b5ab-3f10c90afe1d,SORT_NETWORK_5,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
  } while (0)"
ac5c5b29-1569-4c26-b57b-b467179e576c,SORT_NETWORK_6,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
  } while (0)"
4349286f-444d-458b-b280-29a2b25c8b62,SORT_NETWORK_7,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
  } while (0)"
ef84a613-be62-46b0-a08b-f0807a5a06a4,SORT_NETWORK_8,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
  } while (0)"
c7609b86-4c2a-4cd5-b450-450586b98e70,SORT_NETWORK_9,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
  } while (0)"
5192cc78-1b98-43c3-b223-e8bc5b7a315a,SORT_NETWORK_10,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
  } while (0)"
a372b98c-80da-4ede-8c02-0cc3f831da0a,SORT_NETWORK_11,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
  } while (0)"
cc41875f-2456-4364-b72d-f7662b7c5e6c,SORT_NETWORK_12,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[11]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
  } while (0)"
18ea7f7a-eb99-49df-959b-a3eddb4f5644,SORT_NETWORK_13,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[11]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[11]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
  } while (0)"
849fc020-aa96-454e-958b-b0db0f8f3ca6,SORT_NETWORK_14,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[11]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[12], begin[13]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[13]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
  } while (0)"
d9cb4d5c-b0c2-41a0-9183-2d6b549aa242,SORT_NETWORK_15,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[11]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[12], begin[13]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[12], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[14]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[13], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[13]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
  } while (0)"
8c47a07c-d337-45a2-88c2-3cd2a331e229,SORT_NETWORK_16,"do {                                                                         \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[11]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[12], begin[13]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[14], begin[15]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[12], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[3]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[13], begin[15]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[15]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[14]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[15]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[13], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[11]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[2]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[4], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[1], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[13]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[14]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[2], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[13]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[12]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[10], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[5]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[9]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[3], begin[4]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[5], begin[6]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[7], begin[8]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[9], begin[10]);                             \
    SORT_CMP_SWAP(TYPE, CMP, begin[11], begin[12]);                            \
    SORT_CMP_SWAP(TYPE, CMP, begin[6], begin[7]);                              \
    SORT_CMP_SWAP(TYPE, CMP, begin[8], begin[9]);                              \
  } while (0)"
d07b6fd6-18c2-4acd-a8ff-3e6638d47a76,SORT_INNER,"switch (len) {                                                               \
  default:                                                                     \
    __unreachable();                                                           \
  case 0:                                                                      \
  case 1:                                                                      \
    break;                                                                     \
  case 2:                                                                      \
    SORT_CMP_SWAP(TYPE, CMP, begin[0], begin[1]);                              \
    break;                                                                     \
  case 3:                                                                      \
    SORT_NETWORK_3(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 4:                                                                      \
    SORT_NETWORK_4(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 5:                                                                      \
    SORT_NETWORK_5(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 6:                                                                      \
    SORT_NETWORK_6(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 7:                                                                      \
    SORT_NETWORK_7(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 8:                                                                      \
    SORT_NETWORK_8(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 9:                                                                      \
    SORT_NETWORK_9(TYPE, CMP, begin);                                          \
    break;                                                                     \
  case 10:                                                                     \
    SORT_NETWORK_10(TYPE, CMP, begin);                                         \
    break;                                                                     \
  case 11:                                                                     \
    SORT_NETWORK_11(TYPE, CMP, begin);                                         \
    break;                                                                     \
  case 12:                                                                     \
    SORT_NETWORK_12(TYPE, CMP, begin);                                         \
    break;                                                                     \
  case 13:                                                                     \
    SORT_NETWORK_13(TYPE, CMP, begin);                                         \
    break;                                                                     \
  case 14:                                                                     \
    SORT_NETWORK_14(TYPE, CMP, begin);                                         \
    break;                                                                     \
  case 15:                                                                     \
    SORT_NETWORK_15(TYPE, CMP, begin);                                         \
    break;                                                                     \
  case 16:                                                                     \
    SORT_NETWORK_16(TYPE, CMP, begin);                                         \
    break;                                                                     \
  }"
5aad6011-5975-4a19-92e9-7df919b51988,SORT_SWAP,"do {                                                                         \
    const TYPE swap_tmp = (a);                                                 \
    (a) = (b);                                                                 \
    (b) = swap_tmp;                                                            \
  } while (0)"
c440f657-eeca-41c2-9cce-1bc6122d56cf,SORT_PUSH,"do {                                                                         \
    top->lo = (low);                                                           \
    top->hi = (high);                                                          \
    ++top;                                                                     \
  } while (0)"
2b1b8e93-a95a-41f7-aae3-816a12ef2449,SORT_POP,"do {                                                                         \
    --top;                                                                     \
    low = top->lo;                                                             \
    high = top->hi;                                                            \
  } while (0)"
196a1bd8-b820-459a-aa3a-9e7051aa52a3,SORT_IMPL,"static __inline bool NAME##_is_sorted(const TYPE *first, const TYPE *last) { \
    while (++first <= last)                                                    \
      if (CMP(first[0], first[-1]))                                            \
        return false;                                                          \
    return true;                                                               \
  }                                                                            \
                                                                               \
  typedef struct {                                                             \
    TYPE *lo, *hi;                                                             \
  } NAME##_stack;                                                              \
                                                                               \
  static __hot void NAME(TYPE *const begin, TYPE *const end) {                 \
    NAME##_stack stack[sizeof(unsigned) * CHAR_BIT], *top = stack;             \
                                                                               \
    TYPE *hi = end - 1;                                                        \
    TYPE *lo = begin;                                                          \
    while (true) {                                                             \
      const ptrdiff_t len = hi - lo;                                           \
      if (len < 16) {                                                          \
        SORT_INNER(TYPE, CMP, lo, hi + 1, len + 1);                            \
        if (unlikely(top == stack))                                            \
          break;                                                               \
        SORT_POP(lo, hi);                                                      \
        continue;                                                              \
      }                                                                        \
                                                                               \
      TYPE *mid = lo + (len >> 1);                                             \
      SORT_CMP_SWAP(TYPE, CMP, *lo, *mid);                                     \
      SORT_CMP_SWAP(TYPE, CMP, *mid, *hi);                                     \
      SORT_CMP_SWAP(TYPE, CMP, *lo, *mid);                                     \
                                                                               \
      TYPE *right = hi - 1;                                                    \
      TYPE *left = lo + 1;                                                     \
      while (1) {                                                              \
        while (CMP(*left, *mid))                                               \
          ++left;                                                              \
        while (CMP(*mid, *right))                                              \
          --right;                                                             \
        if (unlikely(left > right)) {                                          \
          if (EXPECT_LOW_CARDINALITY_OR_PRESORTED) {                           \
            if (NAME##_is_sorted(lo, right))                                   \
              lo = right + 1;                                                  \
            if (NAME##_is_sorted(left, hi))                                    \
              hi = left;                                                       \
          }                                                                    \
          break;                                                               \
        }                                                                      \
        SORT_SWAP(TYPE, *left, *right);                                        \
        mid = (mid == left) ? right : (mid == right) ? left : mid;             \
        ++left;                                                                \
        --right;                                                               \
      }                                                                        \
                                                                               \
      if (right - lo > hi - left) {                                            \
        SORT_PUSH(lo, right);                                                  \
        lo = left;                                                             \
      } else {                                                                 \
        SORT_PUSH(left, hi);                                                   \
        hi = right;                                                            \
      }                                                                        \
    }                                                                          \
                                                                               \
    if (mdbx_audit_enabled()) {                                                \
      for (TYPE *scan = begin + 1; scan < end; ++scan)                         \
        assert(CMP(scan[-1], scan[0]));                                        \
    }                                                                          \
  }"
022041fa-0b37-4ac4-a885-4b5adf758c59,RADIXSORT_IMPL,"__hot static bool NAME##_radixsort(TYPE *const begin,                        \
                                     const unsigned length) {                  \
    TYPE *tmp;                                                                 \
    if (BUFFER_PREALLOCATED) {                                                 \
      tmp = begin + length + END_GAP;                                          \
      "
6b21df53-e779-4ac3-a0e9-48f7a7a88d20,SEARCH_IMPL,"static __always_inline const TYPE_LIST *NAME(                                \
      const TYPE_LIST *first, unsigned length, const TYPE_ARG item) {          \
    const TYPE_LIST *const begin = first, *const end = begin + length;         \
                                                                               \
    while (length > 3) {                                                       \
      const unsigned whole = length;                                           \
      length >>= 1;                                                            \
      const TYPE_LIST *const middle = first + length;                          \
      const unsigned left = whole - length - 1;                                \
      const bool cmp = CMP(*middle, item);                                     \
      length = cmp ? left : length;                                            \
      first = cmp ? middle + 1 : first;                                        \
    }                                                                          \
                                                                               \
    switch (length) {                                                          \
    case 3:                                                                    \
      if (!CMP(*first, item))                                                  \
        break;                                                                 \
      ++first;                                                                 \
      __fallthrough "
e3ce0c57-5a06-4093-8da7-d7f93628aba2,MDBX_PNL_EXTRACT_KEY,(*(ptr))
9704e318-d472-4551-9152-b1481cfee569,MDBX_PNL_EXTRACT_KEY,(P_INVALID - *(ptr))
38c3e9ce-a262-4ae2-8eaa-a0171e102da6,TXNID_SORT_CMP,((first) > (last))
e5937951-cda4-4bdf-a8d0-97c7c74c1586,MDBX_DPL_UNSORTED_BACKLOG,16
3043ffbb-1487-4de8-a63f-07e3cbc0f4bc,MDBX_DPL_GAP_FOR_MERGESORT,MDBX_DPL_UNSORTED_BACKLOG
5ca749bf-d7d7-4e8f-8cd6-0989bfdc82f7,MDBX_DPL_GAP_FOR_EDGING,2
c2ae6fe3-759f-4e5f-b752-e0df2d5b88d9,MDBX_DPL_RESERVE_GAP,(MDBX_DPL_GAP_FOR_MERGESORT + MDBX_DPL_GAP_FOR_EDGING)
325354f0-4de6-4ad0-b910-8595e42a0b62,MDBX_DPL_EXTRACT_KEY,((ptr)->pgno)
95a8db83-dda1-43fc-a572-55f68857c170,DP_SORT_CMP,((first).pgno < (last).pgno)
213af6ae-d8dd-4057-b2c2-d5c4ff0fd874,DP_SEARCH_CMP,((dp).pgno < (id))
99894f7e-e8a4-4866-a6be-7488e757f1d1,LINEAR_SEARCH_CASE,"case N:                                                                      \
    if (dl->items[dl->length - N + 1].pgno == pgno)                            \
      return dl->length - N + 1;                                               \
    __fallthrough"
450185f4-ca87-4135-99a4-952190f1ff87,MDBX_END_NAMES,"{                                                                            \
    ""committed"", ""empty-commit"", ""abort"", ""reset"", ""reset-tmp"", ""fail-begin"",  \
        ""fail-beginchild""                                                      \
  }"
0cdd5cc2-9d03-41a3-ab6b-c62a71f75b3a,MDBX_END_OPMASK,0x0F
2ceaf630-9e24-4420-bdeb-8a7e9d461241,MDBX_END_UPDATE,0x10
d576d480-7709-4ec3-99e6-7ca1740779dd,MDBX_END_FREE,0x20
9dff8084-0784-4fdd-a76e-c07930d05453,MDBX_END_EOTDONE,0x40
0a39c00f-94e9-4e46-8058-67f08bc1027b,MDBX_END_SLOT,0x80
65b63d0d-8214-4a1c-9d42-9a7c12de51a3,MDBX_PS_MODIFY,1
e9625ab3-d682-4aa8-84a4-3e041eb3057b,MDBX_PS_ROOTONLY,2
a148658b-39f4-470a-8812-a94a1a9b2048,MDBX_PS_FIRST,4
5fc7d197-a9dd-4de2-a30f-d513f0415a57,MDBX_PS_LAST,8
f3b6a655-c97a-4c32-a9e4-6a0a016d06de,MDBX_SPLIT_REPLACE,MDBX_APPENDDUP
5dc42f75-fe50-4b3d-878e-30afe1a12e52,SIBLING_LEFT,0
654ba446-753d-445c-8f59-2838d2de5260,SIBLING_RIGHT,2
21c066de-fe7f-433d-a2c5-c73e792b1c6b,XCURSOR_INITED,((mc)->mc_xcursor && ((mc)->mc_xcursor->mx_cursor.mc_flags & C_INITIALIZED))
53bc6633-b893-48b9-b3fa-c7a870ef83bf,XCURSOR_REFRESH,"do {                                                                         \
    MDBX_page *xr_pg = (mp);                                                   \
    MDBX_node *xr_node = page_node(xr_pg, ki);                                 \
    if ((node_flags(xr_node) & (F_DUPDATA | F_SUBDATA)) == F_DUPDATA)          \
      (mc)->mc_xcursor->mx_cursor.mc_pg[0] = node_data(xr_node);               \
  } while (0)"
ffd320a6-39dd-4d21-bfb1-a67dba18fe73,WITH_CURSOR_TRACKING,"do {                                                                         \
    mdbx_cassert(&(mn),                                                        \
                 mn.mc_txn->mt_cursors != NULL "
b44589c7-6369-4abc-b7fb-478ebc8fe447,METAPAGE,"page_meta(pgno2page(env, n))"
46d931c4-898f-4300-a653-29534f126885,METAPAGE_END,"METAPAGE(env, NUM_METAS)"
cdc45c08-bcdc-4716-8d96-95aab630002e,MDBX_ALLOC_CACHE,1
afc8491b-7127-4f4e-9195-ee122d661a49,MDBX_ALLOC_GC,2
2db6f0f7-8885-4564-972d-3e029ba5ee1b,MDBX_ALLOC_NEW,4
ec22972e-6797-40bc-9918-e95c03ee02a5,MDBX_ALLOC_SLOT,8
e4fb3352-4631-4295-a225-b59e190dbc23,MDBX_ALLOC_FAKE,16
f1188b53-8a54-40dd-b4dc-ed3c254523cd,MDBX_ALLOC_ALL,(MDBX_ALLOC_CACHE | MDBX_ALLOC_GC | MDBX_ALLOC_NEW)
6e26a5ca-6d4b-4671-a389-d7b2a8f58ce6,TXN_DBI_CHANGED,((txn)->mt_dbiseqs[dbi] != (txn)->mt_env->me_dbiseqs[dbi])
166fac31-3937-4c37-a405-15882d5b5679,SHIFT_MDBX_NODUPDATA_TO_MDBX_NOOVERWRITE,1
3f24e384-3130-420b-a023-8d809d8cfc1f,SHIFT_MDBX_APPENDDUP_TO_MDBX_APPEND,1
12b4160c-578e-43e7-9685-66c2d42623a1,IEEE754_DOUBLE_MANTISSA_SIZE,52
f39c6751-c683-4d58-baea-7adece63b212,IEEE754_DOUBLE_EXPONENTA_BIAS,0x3FF
eb1e4a8b-2221-4fab-9197-547d7ae03a4b,IEEE754_DOUBLE_EXPONENTA_MAX,0x7FF
6a8d9184-f4f5-4995-9a0f-edf1058cc051,IEEE754_DOUBLE_IMPLICIT_LEAD,UINT64_C(0x0010000000000000)
f7df237a-50bc-4a66-8201-34c218362843,IEEE754_DOUBLE_MANTISSA_MASK,UINT64_C(0x000FFFFFFFFFFFFF)
b188e335-ad75-4033-b600-198acbd996d2,IEEE754_DOUBLE_MANTISSA_AMAX,UINT64_C(0x001FFFFFFFFFFFFF)
